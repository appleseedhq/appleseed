
//
// This source file is part of appleseed.
// Visit https://appleseedhq.net/ for additional information and resources.
//
// This software is released under the MIT license.
//
// Copyright (c) 2010-2013 Francois Beaune, Jupiter Jazz Limited
// Copyright (c) 2014-2018 Francois Beaune, The appleseedhq Organization
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

// Interface header.
#include "cornellboxproject.h"

// appleseed.renderer headers.
#include "renderer/global/globaltypes.h"
#include "renderer/modeling/bsdf/bsdf.h"
#include "renderer/modeling/bsdf/lambertianbrdf.h"
#include "renderer/modeling/camera/camera.h"
#include "renderer/modeling/camera/pinholecamera.h"
#include "renderer/modeling/color/colorentity.h"
#include "renderer/modeling/edf/diffuseedf.h"
#include "renderer/modeling/edf/edf.h"
#include "renderer/modeling/frame/frame.h"
#include "renderer/modeling/material/genericmaterial.h"
#include "renderer/modeling/material/material.h"
#include "renderer/modeling/object/meshobject.h"
#include "renderer/modeling/object/object.h"
#include "renderer/modeling/object/triangle.h"
#include "renderer/modeling/project/project.h"
#include "renderer/modeling/scene/assembly.h"
#include "renderer/modeling/scene/assemblyinstance.h"
#include "renderer/modeling/scene/containers.h"
#include "renderer/modeling/scene/objectinstance.h"
#include "renderer/modeling/scene/scene.h"
#include "renderer/modeling/surfaceshader/physicalsurfaceshader.h"
#include "renderer/modeling/surfaceshader/surfaceshader.h"
#include "renderer/utility/paramarray.h"
#include "renderer/utility/transformsequence.h"

// appleseed.foundation headers.
#include "foundation/math/matrix.h"
#include "foundation/math/transform.h"
#include "foundation/math/vector.h"
#include "foundation/utility/containers/dictionary.h"
#include "foundation/utility/iostreamop.h"

// Standard headers.
#include <cstddef>

using namespace foundation;
using namespace std;

namespace renderer
{

//
// CornellBoxProjectFactory class implementation.
//
// Reference:
//
//   http://www.graphics.cornell.edu/online/box/data.html
//

auto_release_ptr<Project> CornellBoxProjectFactory::create()
{
    // Input wavelengths for white, green and red reflectances.
    const size_t ReflectanceSampleCount = 76;
    static const float ReflectanceWavelengths[ReflectanceSampleCount] =
    {
        400.0f, 404.0f, 408.0f, 412.0f, 416.0f, 420.0f, 424.0f, 428.0f, 432.0f, 436.0f,
        440.0f, 444.0f, 448.0f, 452.0f, 456.0f, 460.0f, 464.0f, 468.0f, 472.0f, 476.0f,
        480.0f, 484.0f, 488.0f, 492.0f, 496.0f, 500.0f, 504.0f, 508.0f, 512.0f, 516.0f,
        520.0f, 524.0f, 528.0f, 532.0f, 536.0f, 540.0f, 544.0f, 548.0f, 552.0f, 556.0f,
        560.0f, 564.0f, 568.0f, 572.0f, 576.0f, 580.0f, 584.0f, 588.0f, 592.0f, 596.0f,
        600.0f, 604.0f, 608.0f, 612.0f, 616.0f, 620.0f, 624.0f, 628.0f, 632.0f, 636.0f,
        640.0f, 644.0f, 648.0f, 652.0f, 656.0f, 660.0f, 664.0f, 668.0f, 672.0f, 676.0f,
        680.0f, 684.0f, 688.0f, 692.0f, 696.0f, 700.0f
    };

    // Input values for white reflectance.
    static const float WhiteReflectanceValues[ReflectanceSampleCount] =
    {
        0.343f, 0.445f, 0.551f, 0.624f, 0.665f, 0.687f, 0.708f, 0.723f, 0.715f, 0.710f,
        0.745f, 0.758f, 0.739f, 0.767f, 0.777f, 0.765f, 0.751f, 0.745f, 0.748f, 0.729f,
        0.745f, 0.757f, 0.753f, 0.750f, 0.746f, 0.747f, 0.735f, 0.732f, 0.739f, 0.734f,
        0.725f, 0.721f, 0.733f, 0.725f, 0.732f, 0.743f, 0.744f, 0.748f, 0.728f, 0.716f,
        0.733f, 0.726f, 0.713f, 0.740f, 0.754f, 0.764f, 0.752f, 0.736f, 0.734f, 0.741f,
        0.740f, 0.732f, 0.745f, 0.755f, 0.751f, 0.744f, 0.731f, 0.733f, 0.744f, 0.731f,
        0.712f, 0.708f, 0.729f, 0.730f, 0.727f, 0.707f, 0.703f, 0.729f, 0.750f, 0.760f,
        0.751f, 0.739f, 0.724f, 0.730f, 0.740f, 0.737f
    };

    // Input values for green reflectance.
    static const float GreenReflectanceValues[ReflectanceSampleCount] =
    {
        0.092f, 0.096f, 0.098f, 0.097f, 0.098f, 0.095f, 0.095f, 0.097f, 0.095f, 0.094f,
        0.097f, 0.098f, 0.096f, 0.101f, 0.103f, 0.104f, 0.107f, 0.109f, 0.112f, 0.115f,
        0.125f, 0.140f, 0.160f, 0.187f, 0.229f, 0.285f, 0.343f, 0.390f, 0.435f, 0.464f,
        0.472f, 0.476f, 0.481f, 0.462f, 0.447f, 0.441f, 0.426f, 0.406f, 0.373f, 0.347f,
        0.337f, 0.314f, 0.285f, 0.277f, 0.266f, 0.250f, 0.230f, 0.207f, 0.186f, 0.171f,
        0.160f, 0.148f, 0.141f, 0.136f, 0.130f, 0.126f, 0.123f, 0.121f, 0.122f, 0.119f,
        0.114f, 0.115f, 0.117f, 0.117f, 0.118f, 0.120f, 0.122f, 0.128f, 0.132f, 0.139f,
        0.144f, 0.146f, 0.150f, 0.152f, 0.157f, 0.159f
    };

    // Input values for red reflectance.
    static const float RedReflectanceValues[ReflectanceSampleCount] =
    {
        0.040f, 0.046f, 0.048f, 0.053f, 0.049f, 0.050f, 0.053f, 0.055f, 0.057f, 0.056f,
        0.059f, 0.057f, 0.061f, 0.061f, 0.060f, 0.062f, 0.062f, 0.062f, 0.061f, 0.062f,
        0.060f, 0.059f, 0.057f, 0.058f, 0.058f, 0.058f, 0.056f, 0.055f, 0.056f, 0.059f,
        0.057f, 0.055f, 0.059f, 0.059f, 0.058f, 0.059f, 0.061f, 0.061f, 0.063f, 0.063f,
        0.067f, 0.068f, 0.072f, 0.080f, 0.090f, 0.099f, 0.124f, 0.154f, 0.192f, 0.255f,
        0.287f, 0.349f, 0.402f, 0.443f, 0.487f, 0.513f, 0.558f, 0.584f, 0.620f, 0.606f,
        0.609f, 0.651f, 0.612f, 0.610f, 0.650f, 0.638f, 0.627f, 0.620f, 0.630f, 0.628f,
        0.642f, 0.639f, 0.657f, 0.639f, 0.635f, 0.642f
    };

    // Input wavelengths for light source radiance.
    const size_t LightRadianceSampleCount = 1024;
    static const float LightRadianceWavelengths[LightRadianceSampleCount] =
    {
        386.0000f, 386.3176f, 386.6352f, 386.9528f, 387.2704f, 387.5880f, 387.9056f, 388.2232f, 388.5408f, 388.8584f,
        389.1760f, 389.4936f, 389.8112f, 390.1288f, 390.4464f, 390.7640f, 391.0816f, 391.3992f, 391.7168f, 392.0344f,
        392.3520f, 392.6696f, 392.9872f, 393.3048f, 393.6224f, 393.9400f, 394.2576f, 394.5752f, 394.8928f, 395.2104f,
        395.5280f, 395.8456f, 396.1632f, 396.4808f, 396.7984f, 397.1160f, 397.4336f, 397.7512f, 398.0688f, 398.3864f,
        398.7040f, 399.0216f, 399.3392f, 399.6568f, 399.9744f, 400.2920f, 400.6096f, 400.9272f, 401.2448f, 401.5624f,
        401.8800f, 402.1976f, 402.5152f, 402.8328f, 403.1504f, 403.4680f, 403.7856f, 404.1032f, 404.4208f, 404.7384f,
        405.0560f, 405.3736f, 405.6912f, 406.0088f, 406.3264f, 406.6440f, 406.9616f, 407.2792f, 407.5968f, 407.9144f,
        408.2320f, 408.5496f, 408.8672f, 409.1848f, 409.5024f, 409.8200f, 410.1376f, 410.4552f, 410.7728f, 411.0904f,
        411.4080f, 411.7256f, 412.0432f, 412.3608f, 412.6784f, 412.9960f, 413.3136f, 413.6312f, 413.9488f, 414.2664f,
        414.5840f, 414.9016f, 415.2192f, 415.5368f, 415.8544f, 416.1720f, 416.4896f, 416.8072f, 417.1248f, 417.4424f,
        417.7600f, 418.0776f, 418.3952f, 418.7128f, 419.0304f, 419.3480f, 419.6656f, 419.9832f, 420.3008f, 420.6184f,
        420.9360f, 421.2536f, 421.5712f, 421.8888f, 422.2064f, 422.5240f, 422.8416f, 423.1592f, 423.4768f, 423.7944f,
        424.1120f, 424.4296f, 424.7472f, 425.0648f, 425.3824f, 425.7000f, 426.0176f, 426.3352f, 426.6528f, 426.9704f,
        427.2880f, 427.6056f, 427.9232f, 428.2408f, 428.5584f, 428.8760f, 429.1936f, 429.5112f, 429.8288f, 430.1464f,
        430.4640f, 430.7816f, 431.0992f, 431.4168f, 431.7344f, 432.0520f, 432.3696f, 432.6872f, 433.0048f, 433.3224f,
        433.6400f, 433.9576f, 434.2752f, 434.5928f, 434.9104f, 435.2280f, 435.5456f, 435.8632f, 436.1808f, 436.4984f,
        436.8160f, 437.1336f, 437.4512f, 437.7688f, 438.0864f, 438.4040f, 438.7216f, 439.0392f, 439.3568f, 439.6744f,
        439.9920f, 440.3096f, 440.6272f, 440.9448f, 441.2624f, 441.5800f, 441.8976f, 442.2152f, 442.5328f, 442.8504f,
        443.1680f, 443.4856f, 443.8032f, 444.1208f, 444.4384f, 444.7560f, 445.0736f, 445.3912f, 445.7088f, 446.0264f,
        446.3440f, 446.6616f, 446.9792f, 447.2968f, 447.6144f, 447.9320f, 448.2496f, 448.5672f, 448.8848f, 449.2024f,
        449.5200f, 449.8376f, 450.1552f, 450.4728f, 450.7904f, 451.1080f, 451.4256f, 451.7432f, 452.0608f, 452.3784f,
        452.6960f, 453.0136f, 453.3312f, 453.6488f, 453.9664f, 454.2840f, 454.6016f, 454.9192f, 455.2368f, 455.5544f,
        455.8720f, 456.1896f, 456.5072f, 456.8248f, 457.1424f, 457.4600f, 457.7776f, 458.0952f, 458.4128f, 458.7304f,
        459.0480f, 459.3656f, 459.6832f, 460.0008f, 460.3184f, 460.6360f, 460.9536f, 461.2712f, 461.5888f, 461.9064f,
        462.2240f, 462.5416f, 462.8592f, 463.1768f, 463.4944f, 463.8120f, 464.1296f, 464.4472f, 464.7648f, 465.0824f,
        465.4000f, 465.7176f, 466.0352f, 466.3528f, 466.6704f, 466.9880f, 467.3056f, 467.6232f, 467.9408f, 468.2584f,
        468.5760f, 468.8936f, 469.2112f, 469.5288f, 469.8464f, 470.1640f, 470.4816f, 470.7992f, 471.1168f, 471.4344f,
        471.7520f, 472.0696f, 472.3872f, 472.7048f, 473.0224f, 473.3400f, 473.6576f, 473.9752f, 474.2928f, 474.6104f,
        474.9280f, 475.2456f, 475.5632f, 475.8808f, 476.1984f, 476.5160f, 476.8336f, 477.1512f, 477.4688f, 477.7864f,
        478.1040f, 478.4216f, 478.7392f, 479.0568f, 479.3744f, 479.6920f, 480.0096f, 480.3272f, 480.6448f, 480.9624f,
        481.2800f, 481.5976f, 481.9152f, 482.2328f, 482.5504f, 482.8680f, 483.1856f, 483.5032f, 483.8208f, 484.1384f,
        484.4560f, 484.7736f, 485.0912f, 485.4088f, 485.7264f, 486.0440f, 486.3616f, 486.6792f, 486.9968f, 487.3144f,
        487.6320f, 487.9496f, 488.2672f, 488.5848f, 488.9024f, 489.2200f, 489.5376f, 489.8552f, 490.1728f, 490.4904f,
        490.8080f, 491.1256f, 491.4432f, 491.7608f, 492.0784f, 492.3960f, 492.7136f, 493.0312f, 493.3488f, 493.6664f,
        493.9840f, 494.3016f, 494.6192f, 494.9368f, 495.2544f, 495.5720f, 495.8896f, 496.2072f, 496.5248f, 496.8424f,
        497.1600f, 497.4776f, 497.7952f, 498.1128f, 498.4304f, 498.7480f, 499.0656f, 499.3832f, 499.7008f, 500.0184f,
        500.3360f, 500.6536f, 500.9712f, 501.2888f, 501.6064f, 501.9240f, 502.2416f, 502.5592f, 502.8768f, 503.1944f,
        503.5120f, 503.8296f, 504.1472f, 504.4648f, 504.7824f, 505.1000f, 505.4176f, 505.7352f, 506.0528f, 506.3704f,
        506.6880f, 507.0056f, 507.3232f, 507.6408f, 507.9584f, 508.2760f, 508.5936f, 508.9112f, 509.2288f, 509.5464f,
        509.8640f, 510.1816f, 510.4992f, 510.8168f, 511.1344f, 511.4520f, 511.7696f, 512.0872f, 512.4048f, 512.7224f,
        513.0400f, 513.3576f, 513.6752f, 513.9928f, 514.3104f, 514.6280f, 514.9456f, 515.2632f, 515.5808f, 515.8984f,
        516.2160f, 516.5336f, 516.8512f, 517.1688f, 517.4864f, 517.8040f, 518.1216f, 518.4392f, 518.7568f, 519.0744f,
        519.3920f, 519.7096f, 520.0272f, 520.3448f, 520.6624f, 520.9800f, 521.2976f, 521.6152f, 521.9328f, 522.2504f,
        522.5680f, 522.8856f, 523.2032f, 523.5208f, 523.8384f, 524.1560f, 524.4736f, 524.7912f, 525.1088f, 525.4264f,
        525.7440f, 526.0616f, 526.3792f, 526.6968f, 527.0144f, 527.3320f, 527.6496f, 527.9672f, 528.2848f, 528.6024f,
        528.9200f, 529.2376f, 529.5552f, 529.8728f, 530.1904f, 530.5080f, 530.8256f, 531.1432f, 531.4608f, 531.7784f,
        532.0960f, 532.4136f, 532.7312f, 533.0488f, 533.3664f, 533.6840f, 534.0016f, 534.3192f, 534.6368f, 534.9544f,
        535.2720f, 535.5896f, 535.9072f, 536.2248f, 536.5424f, 536.8600f, 537.1776f, 537.4952f, 537.8128f, 538.1304f,
        538.4480f, 538.7656f, 539.0832f, 539.4008f, 539.7184f, 540.0360f, 540.3536f, 540.6712f, 540.9888f, 541.3064f,
        541.6240f, 541.9416f, 542.2592f, 542.5768f, 542.8944f, 543.2120f, 543.5296f, 543.8472f, 544.1648f, 544.4824f,
        544.8000f, 545.1176f, 545.4352f, 545.7528f, 546.0704f, 546.3880f, 546.7056f, 547.0232f, 547.3408f, 547.6584f,
        547.9760f, 548.2936f, 548.6112f, 548.9288f, 549.2464f, 549.5640f, 549.8816f, 550.1992f, 550.5168f, 550.8344f,
        551.1520f, 551.4696f, 551.7872f, 552.1048f, 552.4224f, 552.7400f, 553.0576f, 553.3752f, 553.6928f, 554.0104f,
        554.3280f, 554.6456f, 554.9632f, 555.2808f, 555.5984f, 555.9160f, 556.2336f, 556.5512f, 556.8688f, 557.1864f,
        557.5040f, 557.8216f, 558.1392f, 558.4568f, 558.7744f, 559.0920f, 559.4096f, 559.7272f, 560.0448f, 560.3624f,
        560.6800f, 560.9976f, 561.3152f, 561.6328f, 561.9504f, 562.2680f, 562.5856f, 562.9032f, 563.2208f, 563.5384f,
        563.8560f, 564.1736f, 564.4912f, 564.8088f, 565.1264f, 565.4440f, 565.7616f, 566.0792f, 566.3968f, 566.7144f,
        567.0320f, 567.3496f, 567.6672f, 567.9848f, 568.3024f, 568.6200f, 568.9376f, 569.2552f, 569.5728f, 569.8904f,
        570.2080f, 570.5256f, 570.8432f, 571.1608f, 571.4784f, 571.7960f, 572.1136f, 572.4312f, 572.7488f, 573.0664f,
        573.3840f, 573.7016f, 574.0192f, 574.3368f, 574.6544f, 574.9720f, 575.2896f, 575.6072f, 575.9248f, 576.2424f,
        576.5600f, 576.8776f, 577.1952f, 577.5128f, 577.8304f, 578.1480f, 578.4656f, 578.7832f, 579.1008f, 579.4184f,
        579.7360f, 580.0536f, 580.3712f, 580.6888f, 581.0064f, 581.3240f, 581.6416f, 581.9592f, 582.2768f, 582.5944f,
        582.9120f, 583.2296f, 583.5472f, 583.8648f, 584.1824f, 584.5000f, 584.8176f, 585.1352f, 585.4528f, 585.7704f,
        586.0880f, 586.4056f, 586.7232f, 587.0408f, 587.3584f, 587.6760f, 587.9936f, 588.3112f, 588.6288f, 588.9464f,
        589.2640f, 589.5816f, 589.8992f, 590.2168f, 590.5344f, 590.8520f, 591.1696f, 591.4872f, 591.8048f, 592.1224f,
        592.4400f, 592.7576f, 593.0752f, 593.3928f, 593.7104f, 594.0280f, 594.3456f, 594.6632f, 594.9808f, 595.2984f,
        595.6160f, 595.9336f, 596.2512f, 596.5688f, 596.8864f, 597.2040f, 597.5216f, 597.8392f, 598.1568f, 598.4744f,
        598.7920f, 599.1096f, 599.4272f, 599.7448f, 600.0624f, 600.3800f, 600.6976f, 601.0152f, 601.3328f, 601.6504f,
        601.9680f, 602.2856f, 602.6032f, 602.9208f, 603.2384f, 603.5560f, 603.8736f, 604.1912f, 604.5088f, 604.8264f,
        605.1440f, 605.4616f, 605.7792f, 606.0968f, 606.4144f, 606.7320f, 607.0496f, 607.3672f, 607.6848f, 608.0024f,
        608.3200f, 608.6376f, 608.9552f, 609.2728f, 609.5904f, 609.9080f, 610.2256f, 610.5432f, 610.8608f, 611.1784f,
        611.4960f, 611.8136f, 612.1312f, 612.4488f, 612.7664f, 613.0840f, 613.4016f, 613.7192f, 614.0368f, 614.3544f,
        614.6720f, 614.9896f, 615.3072f, 615.6248f, 615.9424f, 616.2600f, 616.5776f, 616.8952f, 617.2128f, 617.5304f,
        617.8480f, 618.1656f, 618.4832f, 618.8008f, 619.1184f, 619.4360f, 619.7536f, 620.0712f, 620.3888f, 620.7064f,
        621.0240f, 621.3416f, 621.6592f, 621.9768f, 622.2944f, 622.6120f, 622.9296f, 623.2472f, 623.5648f, 623.8824f,
        624.2000f, 624.5176f, 624.8352f, 625.1528f, 625.4704f, 625.7880f, 626.1056f, 626.4232f, 626.7408f, 627.0584f,
        627.3760f, 627.6936f, 628.0112f, 628.3288f, 628.6464f, 628.9640f, 629.2816f, 629.5992f, 629.9168f, 630.2344f,
        630.5520f, 630.8696f, 631.1872f, 631.5048f, 631.8224f, 632.1400f, 632.4576f, 632.7752f, 633.0928f, 633.4104f,
        633.7280f, 634.0456f, 634.3632f, 634.6808f, 634.9984f, 635.3160f, 635.6336f, 635.9512f, 636.2688f, 636.5864f,
        636.9040f, 637.2216f, 637.5392f, 637.8568f, 638.1744f, 638.4920f, 638.8096f, 639.1272f, 639.4448f, 639.7624f,
        640.0800f, 640.3976f, 640.7152f, 641.0328f, 641.3504f, 641.6680f, 641.9856f, 642.3032f, 642.6208f, 642.9384f,
        643.2560f, 643.5736f, 643.8912f, 644.2088f, 644.5264f, 644.8440f, 645.1616f, 645.4792f, 645.7968f, 646.1144f,
        646.4320f, 646.7496f, 647.0672f, 647.3848f, 647.7024f, 648.0200f, 648.3376f, 648.6552f, 648.9728f, 649.2904f,
        649.6080f, 649.9256f, 650.2432f, 650.5608f, 650.8784f, 651.1960f, 651.5136f, 651.8312f, 652.1488f, 652.4664f,
        652.7840f, 653.1016f, 653.4192f, 653.7368f, 654.0544f, 654.3720f, 654.6896f, 655.0072f, 655.3248f, 655.6424f,
        655.9600f, 656.2776f, 656.5952f, 656.9128f, 657.2304f, 657.5480f, 657.8656f, 658.1832f, 658.5008f, 658.8184f,
        659.1360f, 659.4536f, 659.7712f, 660.0888f, 660.4064f, 660.7240f, 661.0416f, 661.3592f, 661.6768f, 661.9944f,
        662.3120f, 662.6296f, 662.9472f, 663.2648f, 663.5824f, 663.9000f, 664.2176f, 664.5352f, 664.8528f, 665.1704f,
        665.4880f, 665.8056f, 666.1232f, 666.4408f, 666.7584f, 667.0760f, 667.3936f, 667.7112f, 668.0288f, 668.3464f,
        668.6640f, 668.9816f, 669.2992f, 669.6168f, 669.9344f, 670.2520f, 670.5696f, 670.8872f, 671.2048f, 671.5224f,
        671.8400f, 672.1576f, 672.4752f, 672.7928f, 673.1104f, 673.4280f, 673.7456f, 674.0632f, 674.3808f, 674.6984f,
        675.0160f, 675.3336f, 675.6512f, 675.9688f, 676.2864f, 676.6040f, 676.9216f, 677.2392f, 677.5568f, 677.8744f,
        678.1920f, 678.5096f, 678.8272f, 679.1448f, 679.4624f, 679.7800f, 680.0976f, 680.4152f, 680.7328f, 681.0504f,
        681.3680f, 681.6856f, 682.0032f, 682.3208f, 682.6384f, 682.9560f, 683.2736f, 683.5912f, 683.9088f, 684.2264f,
        684.5440f, 684.8616f, 685.1792f, 685.4968f, 685.8144f, 686.1320f, 686.4496f, 686.7672f, 687.0848f, 687.4024f,
        687.7200f, 688.0376f, 688.3552f, 688.6728f, 688.9904f, 689.3080f, 689.6256f, 689.9432f, 690.2608f, 690.5784f,
        690.8960f, 691.2136f, 691.5312f, 691.8488f, 692.1664f, 692.4840f, 692.8016f, 693.1192f, 693.4368f, 693.7544f,
        694.0720f, 694.3896f, 694.7072f, 695.0248f, 695.3424f, 695.6600f, 695.9776f, 696.2952f, 696.6128f, 696.9304f,
        697.2480f, 697.5656f, 697.8832f, 698.2008f, 698.5184f, 698.8360f, 699.1536f, 699.4712f, 699.7888f, 700.1064f,
        700.4240f, 700.7416f, 701.0592f, 701.3768f, 701.6944f, 702.0120f, 702.3296f, 702.6472f, 702.9648f, 703.2824f,
        703.6000f, 703.9176f, 704.2352f, 704.5528f, 704.8704f, 705.1880f, 705.5056f, 705.8232f, 706.1408f, 706.4584f,
        706.7760f, 707.0936f, 707.4112f, 707.7288f, 708.0464f, 708.3640f, 708.6816f, 708.9992f, 709.3168f, 709.6344f,
        709.9520f, 710.2696f, 710.5872f, 710.9048f
    };

    // Input values for light source radiance.
    static const float LightRadianceValues[LightRadianceSampleCount] =
    {
         4.92835727f,  4.95023640f,  4.87167292f,  4.85039921f,  4.85475580f,
         4.80956281f,  4.77826218f,  4.75116142f,  4.69755889f,  4.66649574f,
         4.65519461f,  4.63443441f,  4.61113952f,  4.58537629f,  4.50554345f,
         4.46331279f,  4.45395241f,  4.46502019f,  4.41766996f,  4.39838089f,
         4.40903414f,  4.31906190f,  4.29160301f,  4.23493045f,  4.21922691f,
         4.19496304f,  4.14768160f,  4.12731779f,  4.09533142f,  4.05208115f,
         4.00638023f,  3.99806185f,  3.94598963f,  3.90530572f,  3.89192331f,
         3.84189391f,  3.80734009f,  3.77057298f,  3.76079115f,  3.68718653f,
         3.67040429f,  3.64547231f,  3.60396275f,  3.60246259f,  3.59170544f,
         3.57765441f,  3.57533983f,  3.54385920f,  3.55140379f,  3.53685074f,
         3.54053110f,  3.53452475f,  3.54617625f,  3.54812405f,  3.54015626f,
         3.58280680f,  3.62491123f,  3.60758575f,  3.61251344f,  3.65544931f,
         3.69239884f,  3.70221932f,  3.73093703f,  3.75150734f,  3.76142521f,
         3.79115494f,  3.78858795f,  3.81544892f,  3.79755015f,  3.80348125f,
         3.81406552f,  3.81668466f,  3.82162623f,  3.82318482f,  3.82395402f,
         3.82329460f,  3.81952184f,  3.83521351f,  3.83840922f,  3.85216398f,
         3.86120934f,  3.88787011f,  3.90896078f,  3.94768945f,  3.97612358f,
         4.00194611f,  4.04595967f,  4.09217344f,  4.12217906f,  4.15048702f,
         4.18975942f,  4.21281307f,  4.26033120f,  4.29281746f,  4.33297969f,
         4.35829327f,  4.38503818f,  4.42539408f,  4.43887952f,  4.46264602f,
         4.48390515f,  4.52602185f,  4.53983730f,  4.56657194f,  4.59490684f,
         4.62791974f,  4.65670045f,  4.69110222f,  4.72254958f,  4.74050425f,
         4.76876667f,  4.80888814f,  4.82379462f,  4.84422629f,  4.86289906f,
         4.87858012f,  4.89095248f,  4.90415848f,  4.91457056f,  4.93948424f,
         4.95677458f,  4.97895380f,  5.01438735f,  5.03957210f,  5.05976462f,
         5.08762297f,  5.12633430f,  5.15713232f,  5.21046498f,  5.25101603f,
         5.30316550f,  5.36160479f,  5.40998542f,  5.47363071f,  5.52623376f,
         5.57903298f,  5.62451523f,  5.67368076f,  5.72678803f,  5.77418930f,
         5.82062094f,  5.85697833f,  5.89874525f,  5.91979898f,  5.93623534f,
         5.97273706f,  5.99248443f,  6.00596954f,  6.02391135f,  6.03499790f,
         6.05182805f,  6.06175143f,  6.07154863f,  6.08413901f,  6.10816742f,
         6.12409861f,  6.14993596f,  6.17795416f,  6.21009036f,  6.24720290f,
         6.29442103f,  6.34025558f,  6.39561698f,  6.45722913f,  6.53145793f,
         6.59133530f,  6.64910616f,  6.72089255f,  6.80122073f,  6.87314448f,
         6.93449289f,  7.01423515f,  7.07733481f,  7.15026290f,  7.22661488f,
         7.29606138f,  7.35524174f,  7.41567347f,  7.47587213f,  7.53222835f,
         7.58356426f,  7.63308940f,  7.69371703f,  7.72501373f,  7.76442579f,
         7.81368926f,  7.86740380f,  7.90421079f,  7.94583024f,  7.99671563f,
         8.04244340f,  8.09185349f,  8.13181093f,  8.19753260f,  8.23719704f,
         8.30605821f,  8.34763957f,  8.40377164f,  8.45850190f,  8.50689521f,
         8.55880378f,  8.62199954f,  8.67023128f,  8.72579939f,  8.77654327f,
         8.82703722f,  8.87234745f,  8.92298873f,  8.96183230f,  8.99959945f,
         9.02190421f,  9.07021876f,  9.14171865f,  9.17648133f,  9.23501491f,
         9.27081558f,  9.33127360f,  9.37546361f,  9.42685055f,  9.47173114f,
         9.52499601f,  9.59225427f,  9.63452295f,  9.71017367f,  9.75544957f,
         9.81633196f,  9.85444975f,  9.92005872f,  9.97082968f, 10.03449699f,
        10.09122455f, 10.13389416f, 10.17837658f, 10.21773545f, 10.26744042f,
        10.29056919f, 10.34150281f, 10.37786995f, 10.41407219f, 10.44484102f,
        10.48570812f, 10.53218630f, 10.56512838f, 10.62006067f, 10.65887457f,
        10.69741291f, 10.76304496f, 10.79931280f, 10.85703517f, 10.92574554f,
        10.98331363f, 11.06307710f, 11.13985746f, 11.21504740f, 11.30211296f,
        11.36699941f, 11.45784698f, 11.52291388f, 11.61101817f, 11.69846243f,
        11.77479062f, 11.86833376f, 11.93298189f, 12.00576930f, 12.06813240f,
        12.15218992f, 12.21946030f, 12.27984732f, 12.35702565f, 12.41636699f,
        12.46990434f, 12.52456539f, 12.58567800f, 12.65352478f, 12.69413440f,
        12.74686113f, 12.80246461f, 12.84146482f, 12.90663700f, 12.96117766f,
        13.01274242f, 13.06615836f, 13.11619534f, 13.18279152f, 13.24036511f,
        13.29239094f, 13.38152016f, 13.43294283f, 13.50443946f, 13.55685819f,
        13.61965238f, 13.67226613f, 13.71989509f, 13.77979876f, 13.83180052f,
        13.84430227f, 13.89482616f, 13.93275292f, 13.98796853f, 14.02120281f,
        14.06469501f, 14.09613766f, 14.14338696f, 14.18403496f, 14.21806607f,
        14.25772335f, 14.29669029f, 14.33194679f, 14.37758361f, 14.42119985f,
        14.44971099f, 14.50741581f, 14.56118017f, 14.62092534f, 14.68515260f,
        14.73491963f, 14.80907502f, 14.88815737f, 14.94616320f, 15.02558463f,
        15.11203094f, 15.19717271f, 15.27718243f, 15.36567171f, 15.45184153f,
        15.53754196f, 15.64788249f, 15.72509581f, 15.81429427f, 15.92707653f,
        16.01731134f, 16.11600746f, 16.20892471f, 16.29225189f, 16.39359707f,
        16.47066209f, 16.55917178f, 16.62561782f, 16.70841038f, 16.78676522f,
        16.83121370f, 16.90970725f, 16.98273901f, 17.04871601f, 17.11268063f,
        17.17982076f, 17.22381424f, 17.30314819f, 17.35746332f, 17.43112885f,
        17.48204699f, 17.55696117f, 17.60494634f, 17.65502592f, 17.71403934f,
        17.78598100f, 17.85655375f, 17.92058866f, 17.99230099f, 18.06707477f,
        18.13436354f, 18.21311730f, 18.28960928f, 18.32967134f, 18.39692296f,
        18.45656375f, 18.52390272f, 18.57529417f, 18.62673762f, 18.67788480f,
        18.75249257f, 18.80462636f, 18.87542569f, 18.91158693f, 18.96570817f,
        19.01692378f, 19.04623736f, 19.10227678f, 19.14509502f, 19.18970799f,
        19.23873108f, 19.26780950f, 19.31419402f, 19.36528274f, 19.40118097f,
        19.46035853f, 19.52064162f, 19.58170590f, 19.63171035f, 19.70336844f,
        19.77064368f, 19.80392383f, 19.85992006f, 19.93738561f, 20.02284410f,
        20.08669014f, 20.15900956f, 20.23440699f, 20.30600184f, 20.40066552f,
        20.48273233f, 20.57931739f, 20.65593145f, 20.73726859f, 20.81966265f,
        20.89923317f, 20.99521486f, 21.08979561f, 21.16193414f, 21.22341789f,
        21.27993341f, 21.34027406f, 21.40159850f, 21.47436457f, 21.55347337f,
        21.59119691f, 21.62606604f, 21.67467413f, 21.70707069f, 21.75858598f,
        21.75450883f, 21.77856004f, 21.80338220f, 21.82430409f, 21.84731432f,
        21.83921535f, 21.82707643f, 21.81788806f, 21.83770638f, 21.82709299f,
        21.82200452f, 21.83182112f, 21.81370576f, 21.80076601f, 21.81652119f,
        21.81694442f, 21.82757391f, 21.82478527f, 21.84147779f, 21.85287888f,
        21.89030789f, 21.91890397f, 21.93885180f, 21.97121208f, 22.01583652f,
        22.07517328f, 22.10910723f, 22.19019852f, 22.27408994f, 22.35997186f,
        22.40815085f, 22.45819760f, 22.55296946f, 22.61233512f, 22.68122483f,
        22.78230399f, 22.83508167f, 22.93786266f, 23.02439055f, 23.11940579f,
        23.20009585f, 23.30795385f, 23.36914451f, 23.47258967f, 23.55535974f,
        23.66610522f, 23.74556169f, 23.84982446f, 23.90955529f, 23.98157811f,
        24.07896017f, 24.14704691f, 24.22687315f, 24.28862482f, 24.34056252f,
        24.38992656f, 24.45594790f, 24.48258955f, 24.56667776f, 24.59445536f,
        24.62805700f, 24.67003032f, 24.67523437f, 24.68408743f, 24.70882462f,
        24.68773496f, 24.68083688f, 24.68884785f, 24.69179894f, 24.68383355f,
        24.68026272f, 24.66519738f, 24.66385015f, 24.72241293f, 24.81399519f,
        24.80832879f, 24.82645691f, 24.84343603f, 24.86139493f, 24.88725735f,
        24.92005801f, 24.96863912f, 25.03206105f, 25.08095377f, 25.15205603f,
        25.21193094f, 25.29663104f, 25.40483573f, 25.48281226f, 25.56685407f,
        25.68614278f, 25.80896360f, 25.91262556f, 26.03463859f, 26.16935490f,
        26.28109060f, 26.44978666f, 26.58744659f, 26.74027759f, 26.88720372f,
        27.02579688f, 27.18921747f, 27.38550254f, 27.52613393f, 27.68919558f,
        27.86693283f, 28.04847885f, 28.19197395f, 28.37872109f, 28.56497190f,
        28.68044776f, 28.86310256f, 29.00447106f, 29.18116506f, 29.33743334f,
        29.49194157f, 29.65054267f, 29.78297475f, 29.91797056f, 30.03569309f,
        30.17708406f, 30.30409065f, 30.45612977f, 30.53107447f, 30.67196082f,
        30.77986552f, 30.89224657f, 30.96622308f, 31.07220318f, 31.15718595f,
        31.20383583f, 31.30377856f, 31.40414808f, 31.43611018f, 31.52801653f,
        31.60102442f, 31.72621718f, 31.79591280f, 31.86826527f, 31.94853434f,
        32.02539482f, 32.13974161f, 32.20423181f, 32.28018677f, 32.28395726f,
        32.40494318f, 32.46749445f, 32.52980425f, 32.63380453f, 32.68092259f,
        32.77319964f, 32.90104863f, 33.02129329f, 33.15087824f, 33.16424665f,
        33.23137293f, 33.28290115f, 33.35484158f, 33.43853487f, 33.60929049f,
        33.70046828f, 33.79738115f, 33.85206201f, 33.94663872f, 33.96045104f,
        34.05475363f, 34.10062428f, 34.18215916f, 34.25004129f, 34.32150418f,
        34.39610542f, 34.46044843f, 34.51687045f, 34.55209146f, 34.59658135f,
        34.64960558f, 34.70425712f, 34.72836102f, 34.77389830f, 34.80967030f,
        34.85796100f, 34.90914755f, 34.92277339f, 34.93897843f, 34.96598147f,
        35.02237511f, 35.06262194f, 35.11140592f, 35.14137452f, 35.16239737f,
        35.20296586f, 35.24898755f, 35.29335977f, 35.37355689f, 35.37678456f,
        35.46886556f, 35.52168787f, 35.56242018f, 35.60966168f, 35.65975868f,
        35.73275359f, 35.76218208f, 35.86790780f, 35.91765316f, 36.02584644f,
        36.10398104f, 36.20544100f, 36.31996143f, 36.43499302f, 36.53317969f,
        36.67017925f, 36.79399513f, 36.85507056f, 36.95126480f, 37.05372727f,
        37.15059134f, 37.29182879f, 37.36382982f, 37.44132457f, 37.49166785f,
        37.57717129f, 37.64735391f, 37.71130174f, 37.82473094f, 37.91546830f,
        37.99067831f, 38.09451284f, 38.15758953f, 38.23615790f, 38.32197158f,
        38.43134475f, 38.53659884f, 38.62544847f, 38.73075853f, 38.81319121f,
        38.90295298f, 38.95350872f, 39.06616089f, 39.13501614f, 39.22624636f,
        39.23983187f, 39.30548595f, 39.36147734f, 39.40495530f, 39.47796375f,
        39.57629997f, 39.62225843f, 39.68200991f, 39.73714559f, 39.79931521f,
        39.85767403f, 39.92737671f, 40.00014684f, 40.06188424f, 40.11552243f,
        40.18301915f, 40.23953960f, 40.32017452f, 40.40280466f, 40.47402128f,
        40.54780868f, 40.61686055f, 40.66449293f, 40.74033856f, 40.79884863f,
        40.85113626f, 40.89327993f, 40.92709196f, 41.02932850f, 41.07870172f,
        41.15208090f, 41.20719958f, 41.22779665f, 41.30340521f, 41.37463561f,
        41.43581449f, 41.53237538f, 41.62442610f, 41.67685766f, 41.70551621f,
        41.79387528f, 41.87249022f, 41.96748580f, 41.96066425f, 42.00236919f,
        42.06691271f, 42.14453462f, 42.17232865f, 42.21308654f, 42.29682092f,
        42.28020989f, 42.33453119f, 42.42249257f, 42.45259373f, 42.52678228f,
        42.62360174f, 42.65108357f, 42.69529079f, 42.76506482f, 42.76866147f,
        42.84197399f, 42.88348405f, 42.93480463f, 42.93029206f, 42.96927781f,
        43.03102555f, 43.06837620f, 43.07944143f, 43.11894499f, 43.14621770f,
        43.21178505f, 43.22262263f, 43.23217246f, 43.27929678f, 43.33474352f,
        43.33186074f, 43.38691324f, 43.47481497f, 43.48959909f, 43.53385056f,
        43.52006236f, 43.54288106f, 43.58467808f, 43.65098008f, 43.68014893f,
        43.77655831f, 43.82158431f, 43.87133619f, 43.89857776f, 43.90895708f,
        43.93924688f, 43.94311255f, 44.00206298f, 44.06016926f, 44.08464841f,
        44.14974194f, 44.16360932f, 44.21550172f, 44.24645163f, 44.31413103f,
        44.37582255f, 44.44290243f, 44.46713847f, 44.54954762f, 44.61770085f,
        44.62707255f, 44.68776382f, 44.75644795f, 44.82017049f, 44.86731775f,
        44.93669847f, 44.94323079f, 45.00289235f, 45.06074445f, 45.10070072f,
        45.12535413f, 45.18971616f, 45.22800594f, 45.28256242f, 45.33033970f,
        45.40157892f, 45.40990798f, 45.45005102f, 45.49876470f, 45.55719413f,
        45.57558835f, 45.65806900f, 45.71135372f, 45.73646800f, 45.75159872f,
        45.78821768f, 45.84825244f, 45.99560549f, 46.20313088f, 46.22034059f,
        46.27787413f, 46.32758131f, 46.35512346f, 46.43510848f, 46.50490991f,
        46.46179852f, 46.26014174f, 46.23810710f, 46.30556813f, 46.36527013f,
        46.37721630f, 46.45252810f, 46.50466755f, 46.55813315f, 46.66800552f,
        46.76963943f, 46.82246498f, 46.84003287f, 46.80448017f, 46.83841548f,
        46.86048386f, 46.91957734f, 46.91730690f, 46.98966653f, 47.00517008f,
        47.01315112f, 47.07074221f, 47.05280548f, 47.10234054f, 47.14878533f,
        47.18764807f, 47.20302242f, 47.19090909f, 47.24496063f, 47.27799257f,
        47.24473681f, 47.26632585f, 47.29130144f, 47.38028322f, 47.36536210f,
        47.40946164f, 47.42629682f, 47.44011415f, 47.49471639f, 47.50993333f,
        47.60153139f, 47.59098752f, 47.60599414f, 47.72138917f, 47.73101049f,
        47.77351224f, 47.80221279f, 47.82379204f, 47.89507117f, 47.91381255f,
        47.95655013f, 47.99009680f, 48.00757694f, 48.07195217f, 48.11071100f,
        48.18321233f, 48.20431083f, 48.25896998f, 48.28514079f, 48.30760284f,
        48.33195778f, 48.38468946f, 48.40754424f, 48.41721780f, 48.43762980f,
        48.47003292f, 48.53107971f, 48.56893872f, 48.62557292f, 48.61079540f,
        48.61346964f, 48.64024108f, 48.64691454f, 48.73450924f, 48.71115321f,
        48.72454994f, 48.65239888f, 48.71463654f, 48.67255147f, 48.70777995f,
        48.69123070f, 48.76049250f, 48.71636847f, 48.85251266f, 48.82720687f,
        48.86710958f, 48.89669398f, 48.89202595f, 48.90438606f, 48.86129690f,
        48.98704016f, 48.91035469f, 48.90886968f, 48.96240538f, 48.98812573f,
        48.90082552f, 48.98011640f, 49.11690487f, 49.12383559f, 49.16479829f,
        49.15441032f, 49.20513908f, 49.19469791f, 49.17543552f, 49.17685633f,
        49.07816045f, 49.06696566f, 49.08073590f, 49.08073079f, 49.12930738f,
        49.20825350f, 49.17186181f, 49.22176095f, 49.25749772f, 49.22595428f,
        49.29514363f, 49.26629340f, 49.19897346f, 49.29684832f, 49.21207757f,
        49.26279980f, 49.25745023f, 49.16981892f, 49.16472388f, 49.16827588f,
        49.12194271f, 49.19377189f, 49.14953717f, 49.13487981f, 49.09854699f,
        49.08310226f, 49.10346596f, 49.02822031f, 49.05569923f, 49.00651755f,
        48.93481065f, 48.99284161f, 48.85219580f, 48.82600862f, 48.84196777f,
        48.69357868f, 48.80868832f, 48.85607948f, 48.73882088f, 48.80816651f,
        48.64757547f, 48.57371357f, 48.56579373f, 48.50410324f, 48.35860141f,
        48.24394471f, 48.21392991f, 48.14547473f, 47.99672507f, 47.98082853f,
        47.87383481f, 47.81606591f, 47.68176414f, 47.66006320f, 47.55384819f,
        47.41638676f, 47.32727872f, 47.23891584f, 47.09295003f, 47.01618839f,
        46.87025697f, 46.81067613f, 46.61253912f, 46.48170334f, 46.30064566f,
        46.17873900f, 46.02126472f, 45.82149354f, 45.74013547f, 45.59135952f,
        45.35455311f, 45.19473268f, 45.02259432f, 44.88341894f, 44.60207461f,
        44.41965592f, 44.19481139f, 43.95425484f, 43.68767137f, 43.50054933f,
        43.18287393f, 42.94164176f, 42.69301585f, 42.38647146f, 42.16091175f,
        41.86384398f, 41.48093302f, 41.20862279f, 40.85976255f, 40.51784102f,
        40.19085497f, 39.89106781f, 39.56141360f, 39.08806529f, 38.80399629f,
        38.46100812f, 38.03595413f, 37.74622068f, 37.28595910f, 36.93238223f,
        36.51088680f, 36.08309041f, 35.71388875f, 35.31156189f, 34.86588513f,
        34.50542730f, 34.02103201f, 33.65805797f, 33.23401307f, 32.76192764f,
        32.34575040f, 31.95277910f, 31.53115586f, 31.16620917f, 30.72240903f,
        30.30990604f, 29.88332309f, 29.48625157f, 29.15599898f
    };

    // Create a project.
    auto_release_ptr<Project> project(ProjectFactory::create("cornell_box"));

    // Add default configurations to the project.
    project->add_default_configurations();

    // Create a scene.
    auto_release_ptr<Scene> scene(SceneFactory::create());

    // Create an assembly.
    auto_release_ptr<Assembly> assembly(
        AssemblyFactory().create("assembly", ParamArray()));

    // Create white reflectance.
    {
        ParamArray params;
        params.insert("color_space", "spectral");
        params.insert("wavelength_range",
            Vector2f(
                ReflectanceWavelengths[0],
                ReflectanceWavelengths[ReflectanceSampleCount - 1]));
        assembly->colors().insert(
            ColorEntityFactory::create(
                "white",
                params,
                ColorValueArray(ReflectanceSampleCount, WhiteReflectanceValues)));
    }

    // Create green reflectance.
    {
        ParamArray params;
        params.insert("color_space", "spectral");
        params.insert("wavelength_range",
            Vector2f(
                ReflectanceWavelengths[0],
                ReflectanceWavelengths[ReflectanceSampleCount - 1]));
        assembly->colors().insert(
            ColorEntityFactory::create(
                "green",
                params,
                ColorValueArray(ReflectanceSampleCount, GreenReflectanceValues)));
    }

    // Create red reflectance.
    {
        ParamArray params;
        params.insert("color_space", "spectral");
        params.insert("wavelength_range",
            Vector2f(
                ReflectanceWavelengths[0],
                ReflectanceWavelengths[ReflectanceSampleCount - 1]));
        assembly->colors().insert(
            ColorEntityFactory::create(
                "red",
                params,
                ColorValueArray(ReflectanceSampleCount, RedReflectanceValues)));
    }

    // Create light source radiance.
    {
        ParamArray params;
        params.insert("color_space", "spectral");
        params.insert("wavelength_range",
            Vector2f(
                LightRadianceWavelengths[0],
                LightRadianceWavelengths[LightRadianceSampleCount - 1]));
        assembly->colors().insert(
            ColorEntityFactory::create(
                "light_radiance",
                params,
                ColorValueArray(LightRadianceSampleCount, LightRadianceValues)));
    }

    // Create a new physical surface shader.
    assembly->surface_shaders().insert(
        PhysicalSurfaceShaderFactory().create("physical_shader", ParamArray()));

    //
    // White material.
    //

    {
        // Create a new BSDF.
        ParamArray params;
        params.insert("reflectance", "white");
        assembly->bsdfs().insert(
            LambertianBRDFFactory().create("white_material_brdf", params));
    }
    {
        // Create a new material.
        ParamArray params;
        params.insert("surface_shader", "physical_shader");
        params.insert("bsdf", "white_material_brdf");
        assembly->materials().insert(GenericMaterialFactory().create("white_material", params));
    }

    //
    // Red material.
    //

    {
        // Create a new BSDF.
        ParamArray params;
        params.insert("reflectance", "red");
        assembly->bsdfs().insert(
            LambertianBRDFFactory().create("red_material_brdf", params));
    }
    {
        // Create a new material.
        ParamArray params;
        params.insert("surface_shader", "physical_shader");
        params.insert("bsdf", "red_material_brdf");
        assembly->materials().insert(GenericMaterialFactory().create("red_material", params));
    }

    //
    // Green material.
    //

    {
        // Create a new BSDF.
        ParamArray params;
        params.insert("reflectance", "green");
        assembly->bsdfs().insert(
            LambertianBRDFFactory().create("green_material_brdf", params));
    }
    {
        // Create a new material.
        ParamArray params;
        params.insert("surface_shader", "physical_shader");
        params.insert("bsdf", "green_material_brdf");
        assembly->materials().insert(GenericMaterialFactory().create("green_material", params));
    }

    //
    // Light emitting material.
    //

    {
        // Create a new BSDF.
        ParamArray params;
        params.insert("reflectance", "white");
        assembly->bsdfs().insert(
            LambertianBRDFFactory().create("light_material_brdf", params));
    }
    {
        // Create a new EDF.
        ParamArray params;
        params.insert("radiance", "light_radiance");
        assembly->edfs().insert(
            DiffuseEDFFactory().create("light_material_edf", params));
    }
    {
        // Create a new material.
        ParamArray params;
        params.insert("surface_shader", "physical_shader");
        params.insert("bsdf", "light_material_brdf");
        params.insert("edf", "light_material_edf");
        assembly->materials().insert(GenericMaterialFactory().create("light_material", params));
    }

    //
    // Floor.
    //

    {
        // Create a new mesh object.
        auto_release_ptr<MeshObject> object(
            MeshObjectFactory().create("floor", ParamArray()));

        // Vertices.
        object->push_vertex(GVector3(552.8f, 0.0f,   0.0f));
        object->push_vertex(GVector3(  0.0f, 0.0f,   0.0f));
        object->push_vertex(GVector3(  0.0f, 0.0f, 559.2f));
        object->push_vertex(GVector3(549.6f, 0.0f, 559.2f));

        // Vertex normals.
        object->push_vertex_normal(GVector3(0.0f, 1.0f, 0.0f));

        // Material slots.
        const size_t mat_slot = object->push_material_slot("white_material");

        // Triangles.
        object->push_triangle(Triangle(0, 1, 2,  0, 0, 0,  mat_slot));
        object->push_triangle(Triangle(0, 2, 3,  0, 0, 0,  mat_slot));

        // Insert the object into the assembly.
        assembly->objects().insert(auto_release_ptr<Object>(object));

        // Create an instance of this object and insert it into the assembly.
        assembly->object_instances().insert(
            ObjectInstanceFactory::create(
                "floor_inst",
                ParamArray(),
                "floor",
                Transformd::from_local_to_parent(Matrix4d::make_scaling(Vector3d(0.001f))),
                StringDictionary()
                    .insert("white_material", "white_material")));
    }

    //
    // Ceiling.
    //

    {
        // Create a new mesh object.
        auto_release_ptr<MeshObject> object(
            MeshObjectFactory().create("ceiling", ParamArray()));

        // Vertices.
        object->push_vertex(GVector3(556.0f, 548.8f,   0.0f));
        object->push_vertex(GVector3(556.0f, 548.8f, 559.2f));
        object->push_vertex(GVector3(  0.0f, 548.8f, 559.2f));
        object->push_vertex(GVector3(  0.0f, 548.8f,   0.0f));

        // Vertex normals.
        object->push_vertex_normal(GVector3(0.0f, -1.0f, 0.0f));

        // Material slots.
        const size_t mat_slot = object->push_material_slot("white_material");

        // Triangles.
        object->push_triangle(Triangle(0, 1, 2,  0, 0, 0,  mat_slot));
        object->push_triangle(Triangle(0, 2, 3,  0, 0, 0,  mat_slot));

        // Insert the object into the assembly.
        assembly->objects().insert(auto_release_ptr<Object>(object));

        // Create an instance of this object and insert it into the assembly.
        assembly->object_instances().insert(
            ObjectInstanceFactory::create(
                "ceiling_inst",
                ParamArray(),
                "ceiling",
                Transformd::from_local_to_parent(Matrix4d::make_scaling(Vector3d(0.001f))),
                StringDictionary()
                    .insert("white_material", "white_material")));
    }

    //
    // Back wall.
    //

    {
        // Create a new mesh object.
        auto_release_ptr<MeshObject> object(
            MeshObjectFactory().create("back_wall", ParamArray()));

        // Vertices.
        object->push_vertex(GVector3(549.6f,   0.0f, 559.2f));
        object->push_vertex(GVector3(  0.0f,   0.0f, 559.2f));
        object->push_vertex(GVector3(  0.0f, 548.8f, 559.2f));
        object->push_vertex(GVector3(556.0f, 548.8f, 559.2f));

        // Vertex normals.
        object->push_vertex_normal(GVector3(0.0f, 0.0f, -1.0f));

        // Material slots.
        const size_t mat_slot = object->push_material_slot("white_material");

        // Triangles.
        object->push_triangle(Triangle(0, 1, 2,  0, 0, 0,  mat_slot));
        object->push_triangle(Triangle(0, 2, 3,  0, 0, 0,  mat_slot));

        // Insert the object into the assembly.
        assembly->objects().insert(auto_release_ptr<Object>(object));

        // Create an instance of this object and insert it into the assembly.
        assembly->object_instances().insert(
            ObjectInstanceFactory::create(
                "back_wall_inst",
                ParamArray(),
                "back_wall",
                Transformd::from_local_to_parent(Matrix4d::make_scaling(Vector3d(0.001f))),
                StringDictionary()
                    .insert("white_material", "white_material")));
    }

    //
    // Right wall.
    //

    {
        // Create a new mesh object.
        auto_release_ptr<MeshObject> object(
            MeshObjectFactory().create("right_wall", ParamArray()));

        // Vertices.
        object->push_vertex(GVector3(0.0f,   0.0f, 559.2f));
        object->push_vertex(GVector3(0.0f,   0.0f,   0.0f));
        object->push_vertex(GVector3(0.0f, 548.8f,   0.0f));
        object->push_vertex(GVector3(0.0f, 548.8f, 559.2f));

        // Vertex normals.
        object->push_vertex_normal(GVector3(1.0f, 0.0f, 0.0f));

        // Material slots.
        const size_t mat_slot = object->push_material_slot("green_material");

        // Triangles.
        object->push_triangle(Triangle(0, 1, 2,  0, 0, 0,  mat_slot));
        object->push_triangle(Triangle(0, 2, 3,  0, 0, 0,  mat_slot));

        // Insert the object into the assembly.
        assembly->objects().insert(auto_release_ptr<Object>(object));

        // Create an instance of this object and insert it into the assembly.
        assembly->object_instances().insert(
            ObjectInstanceFactory::create(
                "right_wall_inst",
                ParamArray(),
                "right_wall",
                Transformd::from_local_to_parent(Matrix4d::make_scaling(Vector3d(0.001f))),
                StringDictionary()
                    .insert("green_material", "green_material")));
    }

    //
    // Left wall.
    //

    {
        // Create a new mesh object.
        auto_release_ptr<MeshObject> object(
            MeshObjectFactory().create("left_wall", ParamArray()));

        // Vertices.
        object->push_vertex(GVector3(552.8f,   0.0f,   0.0f));
        object->push_vertex(GVector3(549.6f,   0.0f, 559.2f));
        object->push_vertex(GVector3(556.0f, 548.8f, 559.2f));
        object->push_vertex(GVector3(556.0f, 548.8f,   0.0f));

        // Vertex normals.
        object->push_vertex_normal(GVector3(-0.99991564f,  0.011660824f, -0.0057219779f));
        object->push_vertex_normal(GVector3(  -0.999983f, 0.0058308047f,           0.0f));

        // Material slots.
        const size_t mat_slot = object->push_material_slot("red_material");

        // Triangles.
        object->push_triangle(Triangle(0, 1, 2,  0, 0, 0,  mat_slot));
        object->push_triangle(Triangle(0, 2, 3,  1, 1, 1,  mat_slot));

        // Insert the object into the assembly.
        assembly->objects().insert(auto_release_ptr<Object>(object));

        // Create an instance of this object and insert it into the assembly.
        assembly->object_instances().insert(
            ObjectInstanceFactory::create(
                "left_wall_inst",
                ParamArray(),
                "left_wall",
                Transformd::from_local_to_parent(Matrix4d::make_scaling(Vector3d(0.001f))),
                StringDictionary()
                    .insert("red_material", "red_material")));
    }

    //
    // Short block.
    //

    {
        // Create a new mesh object.
        auto_release_ptr<MeshObject> object(
            MeshObjectFactory().create("short_block", ParamArray()));

        // Vertices.
        object->push_vertex(GVector3(130.0f, 165.0f,  65.0f));
        object->push_vertex(GVector3( 82.0f, 165.0f, 225.0f));
        object->push_vertex(GVector3(240.0f, 165.0f, 272.0f));
        object->push_vertex(GVector3(290.0f, 165.0f, 114.0f));
        object->push_vertex(GVector3(290.0f,   0.0f, 114.0f));
        object->push_vertex(GVector3(290.0f, 165.0f, 114.0f));
        object->push_vertex(GVector3(240.0f, 165.0f, 272.0f));
        object->push_vertex(GVector3(240.0f,   0.0f, 272.0f));
        object->push_vertex(GVector3(130.0f,   0.0f,  65.0f));
        object->push_vertex(GVector3(130.0f, 165.0f,  65.0f));
        object->push_vertex(GVector3(290.0f, 165.0f, 114.0f));
        object->push_vertex(GVector3(290.0f,   0.0f, 114.0f));
        object->push_vertex(GVector3( 82.0f,   0.0f, 225.0f));
        object->push_vertex(GVector3( 82.0f, 165.0f, 225.0f));
        object->push_vertex(GVector3(130.0f, 165.0f,  65.0f));
        object->push_vertex(GVector3(130.0f,   0.0f,  65.0f));
        object->push_vertex(GVector3(240.0f,   0.0f, 272.0f));
        object->push_vertex(GVector3(240.0f, 165.0f, 272.0f));
        object->push_vertex(GVector3( 82.0f, 165.0f, 225.0f));
        object->push_vertex(GVector3( 82.0f,   0.0f, 225.0f));

        // Vertex normals.
        object->push_vertex_normal(GVector3(        0.0f, 1.0f,         0.0f));
        object->push_vertex_normal(GVector3(  0.9534001f, 0.0f,  0.30170889f));
        object->push_vertex_normal(GVector3( 0.29282578f, 0.0f, -0.95616581f));
        object->push_vertex_normal(GVector3(-0.95782629f, 0.0f, -0.28734789f));
        object->push_vertex_normal(GVector3(-0.28512091f, 0.0f,  0.95849156f));

        // Material slots.
        const size_t mat_slot = object->push_material_slot("white_material");

        // Triangles.
        object->push_triangle(Triangle( 0,  1,  2,  0,  0,  0,  mat_slot));
        object->push_triangle(Triangle( 0,  2,  3,  0,  0,  0,  mat_slot));
        object->push_triangle(Triangle( 4,  5,  6,  1,  1,  1,  mat_slot));
        object->push_triangle(Triangle( 4,  6,  7,  1,  1,  1,  mat_slot));
        object->push_triangle(Triangle( 8,  9, 10,  2,  2,  2,  mat_slot));
        object->push_triangle(Triangle( 8, 10, 11,  2,  2,  2,  mat_slot));
        object->push_triangle(Triangle(12, 13, 14,  3,  3,  3,  mat_slot));
        object->push_triangle(Triangle(12, 14, 15,  3,  3,  3,  mat_slot));
        object->push_triangle(Triangle(16, 17, 18,  4,  4,  4,  mat_slot));
        object->push_triangle(Triangle(16, 18, 19,  4,  4,  4,  mat_slot));

        // Insert the object into the assembly.
        assembly->objects().insert(auto_release_ptr<Object>(object));

        // Create an instance of this object and insert it into the assembly.
        assembly->object_instances().insert(
            ObjectInstanceFactory::create(
                "short_block_inst",
                ParamArray(),
                "short_block",
                Transformd::from_local_to_parent(Matrix4d::make_scaling(Vector3d(0.001f))),
                StringDictionary()
                    .insert("white_material", "white_material")));
    }

    //
    // Tall block.
    //

    {
        // Create a new mesh object.
        auto_release_ptr<MeshObject> object(
            MeshObjectFactory().create("tall_block", ParamArray()));

        // Vertices.
        object->push_vertex(GVector3(423.0f, 330.0f, 247.0f));
        object->push_vertex(GVector3(265.0f, 330.0f, 296.0f));
        object->push_vertex(GVector3(314.0f, 330.0f, 456.0f));
        object->push_vertex(GVector3(472.0f, 330.0f, 406.0f));
        object->push_vertex(GVector3(423.0f,   0.0f, 247.0f));
        object->push_vertex(GVector3(423.0f, 330.0f, 247.0f));
        object->push_vertex(GVector3(472.0f, 330.0f, 406.0f));
        object->push_vertex(GVector3(472.0f,   0.0f, 406.0f));
        object->push_vertex(GVector3(472.0f,   0.0f, 406.0f));
        object->push_vertex(GVector3(472.0f, 330.0f, 406.0f));
        object->push_vertex(GVector3(314.0f, 330.0f, 456.0f));
        object->push_vertex(GVector3(314.0f,   0.0f, 456.0f));
        object->push_vertex(GVector3(314.0f,   0.0f, 456.0f));
        object->push_vertex(GVector3(314.0f, 330.0f, 456.0f));
        object->push_vertex(GVector3(265.0f, 330.0f, 296.0f));
        object->push_vertex(GVector3(265.0f,   0.0f, 296.0f));
        object->push_vertex(GVector3(265.0f,   0.0f, 296.0f));
        object->push_vertex(GVector3(265.0f, 330.0f, 296.0f));
        object->push_vertex(GVector3(423.0f, 330.0f, 247.0f));
        object->push_vertex(GVector3(423.0f,   0.0f, 247.0f));

        // Vertex normals.
        object->push_vertex_normal(GVector3(        0.0f, 1.0f,         0.0f));
        object->push_vertex_normal(GVector3( 0.95564896f, 0.0f, -0.29450817f));
        object->push_vertex_normal(GVector3( 0.30170889f, 0.0f,   0.9534001f));
        object->push_vertex_normal(GVector3(-0.95616581f, 0.0f,  0.29282578f));
        object->push_vertex_normal(GVector3(-0.29620907f, 0.0f, -0.95512313f));

        // Material slots.
        const size_t mat_slot = object->push_material_slot("white_material");

        // Triangles.
        object->push_triangle(Triangle( 0,  1,  2,  0,  0,  0,  mat_slot));
        object->push_triangle(Triangle( 0,  2,  3,  0,  0,  0,  mat_slot));
        object->push_triangle(Triangle( 4,  5,  6,  1,  1,  1,  mat_slot));
        object->push_triangle(Triangle( 4,  6,  7,  1,  1,  1,  mat_slot));
        object->push_triangle(Triangle( 8,  9, 10,  2,  2,  2,  mat_slot));
        object->push_triangle(Triangle( 8, 10, 11,  2,  2,  2,  mat_slot));
        object->push_triangle(Triangle(12, 13, 14,  3,  3,  3,  mat_slot));
        object->push_triangle(Triangle(12, 14, 15,  3,  3,  3,  mat_slot));
        object->push_triangle(Triangle(16, 17, 18,  4,  4,  4,  mat_slot));
        object->push_triangle(Triangle(16, 18, 19,  4,  4,  4,  mat_slot));

        // Insert the object into the assembly.
        assembly->objects().insert(auto_release_ptr<Object>(object));

        // Create an instance of this object and insert it into the assembly.
        assembly->object_instances().insert(
            ObjectInstanceFactory::create(
                "tall_block_inst",
                ParamArray(),
                "tall_block",
                Transformd::from_local_to_parent(Matrix4d::make_scaling(Vector3d(0.001f))),
                StringDictionary()
                    .insert("white_material", "white_material")));
    }

    //
    // Light source.
    //

    {
        // Create a new mesh object.
        auto_release_ptr<MeshObject> object(
            MeshObjectFactory().create("light", ParamArray()));

        // Vertices.
        object->push_vertex(GVector3(343.0f, 548.7999f, 227.0f));
        object->push_vertex(GVector3(343.0f, 548.7999f, 332.0f));
        object->push_vertex(GVector3(213.0f, 548.7999f, 332.0f));
        object->push_vertex(GVector3(213.0f, 548.7999f, 227.0f));

        // Vertex normals.
        object->push_vertex_normal(GVector3(0.0f, -1.0f, 0.0f));

        // Material slots.
        const size_t mat_slot = object->push_material_slot("light_material");

        // Triangles.
        object->push_triangle(Triangle(0, 1, 2,  0, 0, 0,  mat_slot));
        object->push_triangle(Triangle(0, 2, 3,  0, 0, 0,  mat_slot));

        // Insert the object into the assembly.
        assembly->objects().insert(auto_release_ptr<Object>(object));

        // Create an instance of this object and insert it into the assembly.
        assembly->object_instances().insert(
            ObjectInstanceFactory::create(
                "light_inst",
                ParamArray(),
                "light",
                Transformd::from_local_to_parent(Matrix4d::make_scaling(Vector3d(0.001f))),
                StringDictionary()
                    .insert("light_material", "light_material")));
    }

    // Create an instance of the assembly and insert it into the scene.
    scene->assembly_instances().insert(
        AssemblyInstanceFactory::create(
            "assembly_inst",
            ParamArray(),
            "assembly"));

    // Insert the assembly into the scene.
    scene->assemblies().insert(assembly);

    //
    // Camera.
    //

    {
        // Create a pinhole camera.
        ParamArray params;
        params.insert("film_dimensions", "0.025 0.025");
        params.insert("focal_length", "0.035");
        auto_release_ptr<Camera> camera(
            PinholeCameraFactory().create("camera", params));
        camera->transform_sequence().set_transform(
            0.0f,
            Transformd::from_local_to_parent(
                  Matrix4d::make_translation(Vector3d(0.278, 0.273, -0.800))
                * Matrix4d::make_rotation_y(Pi<double>())));

        // Attach the camera to the scene.
        scene->cameras().insert(camera);
    }

    //
    // Frame.
    //

    {
        // Create a frame.
        ParamArray params;
        params.insert("camera", "camera");
        params.insert("resolution", "512 512");
        auto_release_ptr<Frame> frame(FrameFactory::create("beauty", params));

        // Attach the frame to the project.
        project->set_frame(frame);
    }

    // Attach the scene to the project.
    project->set_scene(scene);

    // Return the newly created project.
    return project;
}

}   // namespace renderer
