
//
// This source file is part of appleseed.
// Visit https://appleseedhq.net/ for additional information and resources.
//
// This software is released under the MIT license.
//
// Copyright (c) 2019 Esteban Tovagliari, The appleseedhq Organization
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

// Interface header.
#include "filtersamplingtable.h"

// appleseed.foundation headers.
#include "foundation/math/scalar.h"

// Standard headers.
#include <algorithm>

using namespace std;

namespace foundation
{

FilterSamplingTable::FilterSamplingTable(const BoxFilter1<float>& filter)
{
    // We only sample the positive side of the filter.
    // The negative part is generated by reflection.
    for (size_t i = 0; i < TableSize; ++i)
    {
        const float x = i / static_cast<float>(TableSize);
        m_table[i] = filter.sample(x * 0.5f + 0.5f);
    }

    m_table[TableSize] = filter.get_radius();
}

FilterSamplingTable::FilterSamplingTable(const TriangleFilter1<float>& filter)
{
    // We only sample the positive side of the filter.
    // The negative part is generated by reflection.
    for (size_t i = 0; i < TableSize; ++i)
    {
        const float x = i / static_cast<float>(TableSize);
        m_table[i] = filter.sample(x * 0.5f + 0.5f);
    }

    m_table[TableSize] = filter.get_radius();
}

}   // namespace foundation
