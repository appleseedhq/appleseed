
//
// This source file is part of appleseed.
// Visit https://appleseedhq.net/ for additional information and resources.
//
// This software is released under the MIT license.
//
// Copyright (c) 2010-2013 Francois Beaune, Jupiter Jazz Limited
// Copyright (c) 2014-2018 Francois Beaune, The appleseedhq Organization
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

// Interface header.
#include "objmeshfilewriter.h"

// appleseed.foundation headers.
#include "foundation/core/appleseed.h"
#include "foundation/core/exceptions/exceptionioerror.h"
#include "foundation/meshio/imeshwalker.h"
#include "foundation/platform/types.h"
#include "foundation/string/string.h"
#include "foundation/utility/otherwise.h"

namespace foundation
{

//
// OBJMeshFileWriter class implementation.
//

OBJMeshFileWriter::OBJMeshFileWriter(const std::string& filename)
  : m_filename(filename)
  , m_file(nullptr)
  , m_base_vertex_index(1)
  , m_base_vertex_normal_index(1)
  , m_base_tex_coords_index(1)
{
}

OBJMeshFileWriter::~OBJMeshFileWriter()
{
    close();
}

void OBJMeshFileWriter::write(const IMeshWalker& walker)
{
    if (m_file == nullptr)
    {
        // Open the file for writing.
        m_file = fopen(m_filename.c_str(), "wt");
        if (m_file == nullptr)
            throw ExceptionIOError();

        // Write the file header.
        fprintf(
            m_file,
            "# File generated by %s.\n",
            Appleseed::get_synthetic_version_string());
    }

    // Write the mesh object name.
    fprintf(m_file, "o %s\n", walker.get_name());

    // Write the mesh data.
    write_vertices(walker);
    write_vertex_normals(walker);
    write_texture_coordinates(walker);
    write_faces(walker);

    // Update base indices.
    m_base_vertex_index += walker.get_vertex_count();
    m_base_vertex_normal_index += walker.get_vertex_normal_count();
    m_base_tex_coords_index += walker.get_tex_coords_count();
}

void OBJMeshFileWriter::close()
{
    if (m_file)
    {
        fclose(m_file);
        m_file = nullptr;
    }
}

void OBJMeshFileWriter::write_vertices(const IMeshWalker& walker) const
{
    const size_t vertex_count = walker.get_vertex_count();

    fprintf(
        m_file,
        "# %s %s.\n",
        pretty_int(vertex_count).c_str(),
        plural(vertex_count, "vertex", "vertices").c_str());

    for (size_t i = 0; i < vertex_count; ++i)
    {
        const Vector3d v = walker.get_vertex(i);
        write_vector("v", v);
    }
}

void OBJMeshFileWriter::write_vertex_normals(const IMeshWalker& walker) const
{
    const size_t vertex_normal_count = walker.get_vertex_normal_count();

    if (vertex_normal_count == 0)
        return;

    fprintf(
        m_file,
        "# %s %s.\n",
        pretty_int(vertex_normal_count).c_str(),
        plural(vertex_normal_count, "vertex normal").c_str());

    for (size_t i = 0; i < vertex_normal_count; ++i)
    {
        const Vector3d vn = walker.get_vertex_normal(i);
        write_vector("vn", vn);
    }
}

void OBJMeshFileWriter::write_texture_coordinates(const IMeshWalker& walker) const
{
    const size_t tex_coords_count = walker.get_tex_coords_count();

    if (tex_coords_count == 0)
        return;

    fprintf(
        m_file,
        "# %s %s.\n",
        pretty_int(tex_coords_count).c_str(),
        plural(tex_coords_count, "texture coordinate").c_str());

    for (size_t i = 0; i < tex_coords_count; ++i)
    {
        const Vector2d vt = walker.get_tex_coords(i);
        write_vector("vt", vt);
    }
}

void OBJMeshFileWriter::write_faces(const IMeshWalker& walker) const
{
    const size_t face_count = walker.get_face_count();

    fprintf(
        m_file,
        "# %s %s.\n",
        pretty_int(face_count).c_str(),
        plural(face_count, "face").c_str());

    const size_t feature_mask =
        (walker.get_vertex_normal_count() > 0 ? 1 : 0) +
        (walker.get_tex_coords_count() > 0 ? 2 : 0);

    switch (feature_mask)
    {
      case 0: write_faces_no_vn_no_vt(walker); break;
      case 1: write_faces_vn_no_vt(walker); break;
      case 2: write_faces_no_vn_vt(walker); break;
      case 3: write_faces_vn_vt(walker); break;
      assert_otherwise;
    }
}

void OBJMeshFileWriter::write_faces_no_vn_no_vt(const IMeshWalker& walker) const
{
    const size_t face_count = walker.get_face_count();

    for (size_t face_index = 0; face_index < face_count; ++face_index)
    {
        fprintf(m_file, "f");

        const size_t face_vertex_count = walker.get_face_vertex_count(face_index);

        for (size_t vertex_index = 0; vertex_index < face_vertex_count; ++vertex_index)
        {
            fprintf(
                m_file,
                " " FMT_SIZE_T,
                m_base_vertex_index + walker.get_face_vertex(face_index, vertex_index));
        }

        fprintf(m_file, "\n");
    }
}

void OBJMeshFileWriter::write_faces_vn_no_vt(const IMeshWalker& walker) const
{
    const size_t face_count = walker.get_face_count();

    for (size_t face_index = 0; face_index < face_count; ++face_index)
    {
        fprintf(m_file, "f");

        const size_t face_vertex_count = walker.get_face_vertex_count(face_index);

        for (size_t vertex_index = 0; vertex_index < face_vertex_count; ++vertex_index)
        {
            fprintf(
                m_file,
                " "  FMT_SIZE_T "//" FMT_SIZE_T,
                m_base_vertex_index + walker.get_face_vertex(face_index, vertex_index),
                m_base_vertex_normal_index + walker.get_face_vertex_normal(face_index, vertex_index));
        }

        fprintf(m_file, "\n");
    }
}

void OBJMeshFileWriter::write_faces_no_vn_vt(const IMeshWalker& walker) const
{
    const size_t face_count = walker.get_face_count();

    for (size_t face_index = 0; face_index < face_count; ++face_index)
    {
        fprintf(m_file, "f");

        const size_t face_vertex_count = walker.get_face_vertex_count(face_index);

        for (size_t vertex_index = 0; vertex_index < face_vertex_count; ++vertex_index)
        {
            fprintf(
                m_file,
                " "  FMT_SIZE_T "/" FMT_SIZE_T,
                m_base_vertex_index + walker.get_face_vertex(face_index, vertex_index),
                m_base_tex_coords_index + walker.get_face_tex_coords(face_index, vertex_index));
        }

        fprintf(m_file, "\n");
    }
}

void OBJMeshFileWriter::write_faces_vn_vt(const IMeshWalker& walker) const
{
    const size_t face_count = walker.get_face_count();

    for (size_t face_index = 0; face_index < face_count; ++face_index)
    {
        fprintf(m_file, "f");

        const size_t face_vertex_count = walker.get_face_vertex_count(face_index);

        for (size_t vertex_index = 0; vertex_index < face_vertex_count; ++vertex_index)
        {
            fprintf(
                m_file,
                " "  FMT_SIZE_T "/" FMT_SIZE_T "/" FMT_SIZE_T,
                m_base_vertex_index + walker.get_face_vertex(face_index, vertex_index),
                m_base_tex_coords_index + walker.get_face_tex_coords(face_index, vertex_index),
                m_base_vertex_normal_index + walker.get_face_vertex_normal(face_index, vertex_index));
        }

        fprintf(m_file, "\n");
    }
}

// Formatting string for all floating-point values.
#define FP_FORMAT "%.17f"

void OBJMeshFileWriter::write_vector(const char* prefix, const Vector2d& v) const
{
    fprintf(
        m_file,
        "%s " FP_FORMAT " " FP_FORMAT "\n",
        prefix, v[0], v[1]);
}

void OBJMeshFileWriter::write_vector(const char* prefix, const Vector3d& v) const
{
    fprintf(
        m_file,
        "%s " FP_FORMAT " " FP_FORMAT " " FP_FORMAT "\n",
        prefix, v[0], v[1], v[2]);
}

#undef FP_FORMAT

}   // namespace foundation
