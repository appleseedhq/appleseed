
#
# This source file is part of appleseed.
# Visit http://appleseedhq.net/ for additional information and resources.
#
# This software is released under the MIT license.
#
# Copyright (c) 2010-2013 Francois Beaune, Jupiter Jazz Limited
# Copyright (c) 2014-2017 Francois Beaune, The appleseedhq Organization
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#


#--------------------------------------------------------------------------------------------------
# gcc on Linux, generating 32-bit or 64-bit binaries.
#--------------------------------------------------------------------------------------------------

set (platform "linux-gcc")


#--------------------------------------------------------------------------------------------------
# Compiler version.
#--------------------------------------------------------------------------------------------------

if (CMAKE_COMPILER_IS_GNUCC)
    execute_process (COMMAND ${CMAKE_CXX_COMPILER} -dumpversion
                     OUTPUT_VARIABLE GCC_VERSION
                     OUTPUT_STRIP_TRAILING_WHITESPACE)

    message (STATUS "Using gcc ${GCC_VERSION} as the compiler")
endif ()


#--------------------------------------------------------------------------------------------------
# Extension of executable files.
#--------------------------------------------------------------------------------------------------

set (exe_ext "")


#--------------------------------------------------------------------------------------------------
# Tools.
#--------------------------------------------------------------------------------------------------

set (git_command "git")


#--------------------------------------------------------------------------------------------------
# Preprocessor definitions.
#--------------------------------------------------------------------------------------------------


#--------------------------------------------------------------------------------------------------
# Compilation/Linking Flags.
#--------------------------------------------------------------------------------------------------

# Flags common to all configurations.
set (c_compiler_flags_common
    -Wall
    -Wno-switch                                         # don't complain about unhandled enumeration values in switch
    -Wno-unknown-pragmas
    -Wno-sign-compare
    -Wno-unused-function
    -Wno-strict-aliasing
    -fno-math-errno                                     # ignore errno when calling math functions
    -fPIC                                               # emit position-independent code
)
set (cxx_compiler_flags_common
    -Wno-reorder
)
if (WARNINGS_AS_ERRORS)
    if (CMAKE_BUILD_TYPE STREQUAL "Debug" OR
        CMAKE_BUILD_TYPE STREQUAL "Profile" OR
        CMAKE_BUILD_TYPE STREQUAL "Release")
        set (c_compiler_flags_common
            ${c_compiler_flags_common}
            -Werror                                     # treat Warnings As Errors
        )
    endif()
endif ()
if (USE_CPP11)
    set (cxx_compiler_flags_common
        ${cxx_compiler_flags_common}
        -std=c++11                                      # enable C++11
        -Wno-deprecated-declarations                    # remove when C++11 support improves.
    )
elseif (CMAKE_COMPILER_IS_GNUCC AND (NOT CMAKE_COMPILER_IS_CLANG))
    if (${GCC_VERSION} VERSION_GREATER 5.0)
        set (cxx_compiler_flags_common
            ${cxx_compiler_flags_common}
            -Wno-deprecated-declarations                # remove when C++11 support improves.
        )

        add_definitions (-DBOOST_NO_CXX11_SCOPED_ENUMS)
        add_definitions (-D_GLIBCXX_USE_CXX11_ABI=0)
    endif()
endif ()
if (is_x86)
    if (USE_SSE)
        set (c_compiler_flags_common
            ${c_compiler_flags_common}
            -msse2                                      # enable SSE instruction sets up to SSE 2
        )
    endif ()
    if (USE_SSE42)
        set (c_compiler_flags_common
            ${c_compiler_flags_common}
            -msse4.2                                    # enable SSE instruction sets up to SSE 4.2
        )
    endif ()
    if (USE_AVX)
        set (c_compiler_flags_common
            ${c_compiler_flags_common}
            -mavx                                       # enable AVX instruction set
        )
    endif ()
    if (USE_AVX2)
        set (c_compiler_flags_common
            ${c_compiler_flags_common}
            -mavx2                                      # enable AVX2 instruction set
            -mfma                                       # enable FMA instruction
            -mf16c                                      # enable F16C instructions
            -ffp-contract=off                           # for now only explicit fmadd
        )
    endif ()
elseif (TARGET_ARCH MATCHES "ARM")
    if (USE_NEON)
        set (c_compiler_flags_common
            ${c_compiler_flags_common}
            -mfpu=neon
        )
    endif ()
elseif (TARGET_ARCH MATCHES "PPC")
    if (USE_ALTIVEC)
        set (c_compiler_flags_common
            ${c_compiler_flags_common}
            -maltivec
            -mabi=altivec
        )
    endif ()
endif ()
set (exe_linker_flags_common
    -Werror                                             # Treat Warnings As Errors
)
set (shared_lib_linker_flags_common
    -Werror                                             # Treat Warnings As Errors
)
if (HIDE_SYMBOLS)
    set (c_compiler_flags_common
        ${c_compiler_flags_common}
        -fvisibility=hidden                             # Hide all non-exported symbols
    )
    set (cxx_compiler_flags_common
        ${cxx_compiler_flags_common}
        -fvisibility=hidden -fvisibility-inlines-hidden # Hide all non-exported symbols
    )
    set (exe_linker_flags_common
        ${exe_linker_flags_common}
        -fvisibility=hidden -fvisibility-inlines-hidden # Hide all non-exported symbols
    )
    set (shared_lib_linker_flags_common
        ${shared_lib_linker_flags_common}
        -fvisibility=hidden -fvisibility-inlines-hidden # Hide all non-exported symbols
    )
endif ()

# Release configuration.
set (c_compiler_flags_release
    -O3                                                 # optimization level
)


#--------------------------------------------------------------------------------------------------
# Libraries.
#--------------------------------------------------------------------------------------------------

macro (link_against_platform target)
    target_link_libraries (${target}
        -lpthread
        -lrt
    )
endmacro ()

macro (link_against_zlib target)
    if (USE_EXTERNAL_ZLIB)
        target_link_libraries (${target} ${ZLIB_LIBRARIES})
    else ()
        target_link_libraries (${target}
            ${CMAKE_SOURCE_DIR}/build/${platform}/zlib/libz.a
        )
    endif ()
endmacro ()

macro (link_against_libpng target)
    if (USE_EXTERNAL_PNG)
        target_link_libraries (${target} ${PNG_LIBRARIES})
    else ()
        target_link_libraries (${target}
            ${CMAKE_SOURCE_DIR}/build/${platform}/libpng/libpng.a
        )
    endif ()
endmacro ()

macro (link_against_openexr target)
    if (USE_EXTERNAL_EXR)
        target_link_libraries (${target}
            ${IMATH_LIBRARIES}
            ${OPENEXR_LIBRARIES}
        )
    else ()
        target_link_libraries (${target}
            # Static libraries must be specified in order of reverse-dependency.
            ${CMAKE_SOURCE_DIR}/build/${platform}/openexr/libHalf.a
            ${CMAKE_SOURCE_DIR}/build/${platform}/openexr/libIlmImf.a
            ${CMAKE_SOURCE_DIR}/build/${platform}/openexr/libIlmThread.a
            ${CMAKE_SOURCE_DIR}/build/${platform}/openexr/libImath.a
            ${CMAKE_SOURCE_DIR}/build/${platform}/openexr/libIex.a
        )
    endif ()
endmacro ()

macro (link_against_hdf5 target)
    if (USE_EXTERNAL_ALEMBIC)
        target_link_libraries (${target}
            ${HDF5_LIBRARIES}
            ${HDF5_HL_LIBRARIES}
        )
    else ()
        target_link_libraries (${target}
            # Static libraries must be specified in order of reverse-dependency.
            ${CMAKE_SOURCE_DIR}/build/${platform}/hdf5/libhdf5_hl.a
            ${CMAKE_SOURCE_DIR}/build/${platform}/hdf5/libhdf5.a
        )
    endif ()
endmacro ()

macro (link_against_alembic target)
    if (USE_EXTERNAL_ALEMBIC)
        target_link_libraries (${target} ${ALEMBIC_LIBRARIES})
    else ()
        target_link_libraries (${target}
            ${CMAKE_SOURCE_DIR}/build/${platform}/alembic/libalembic.a
        )
    endif ()
endmacro ()

macro (link_against_xercesc target)
    if (USE_EXTERNAL_XERCES)
        target_link_libraries (${target} ${XERCES_LIBRARIES})
    else ()
        target_link_libraries (${target}
            ${CMAKE_SOURCE_DIR}/build/${platform}/xerces-c/libxerces-c.a
        )
    endif ()
endmacro ()

macro (link_against_oiio target)
    target_link_libraries (${target} ${OPENIMAGEIO_LIBRARIES})
endmacro ()

macro (link_against_osl target)
    target_link_libraries (${target} ${OSL_EXEC_LIBRARY} ${OSL_QUERY_LIBRARY})
endmacro ()

macro (link_against_seexpr target)
    target_link_libraries (${target} ${SEEXPR_LIBRARIES})
endmacro ()

macro (link_against_seexpreditor target)
    target_link_libraries (${target} ${SEEXPREDITOR_LIBRARIES})
endmacro ()

macro (link_against_partio target)
    target_link_libraries (${target} ${PARTIO_LIBRARIES})
endmacro ()


#--------------------------------------------------------------------------------------------------
# Copy a target binary to the sandbox.
#--------------------------------------------------------------------------------------------------

macro (get_sandbox_bin_path path)
    set (${path} ${PROJECT_SOURCE_DIR}/sandbox/bin/${CMAKE_BUILD_TYPE}/)
endmacro ()

macro (get_sandbox_lib_path path)
    set (${path} ${PROJECT_SOURCE_DIR}/sandbox/lib/${CMAKE_BUILD_TYPE}/)
endmacro ()

macro (add_copy_target_exe_to_sandbox_command target)
    get_target_property (target_path ${target} LOCATION)
    get_sandbox_bin_path (sandbox_path)

    add_custom_command (TARGET ${target} POST_BUILD
        COMMAND mkdir -p ${sandbox_path}
        COMMAND cp ${target_path} ${sandbox_path}
    )
endmacro ()

macro (add_copy_target_lib_to_sandbox_command target)
    get_target_property (target_path ${target} LOCATION)
    get_sandbox_lib_path (sandbox_path)

    add_custom_command (TARGET ${target} POST_BUILD
        COMMAND mkdir -p ${sandbox_path}
        COMMAND cp ${target_path} ${sandbox_path}
    )
endmacro ()

macro (add_copy_target_to_sandbox_py_module_command target)
    get_target_property (target_path ${target} LOCATION)
    get_sandbox_lib_path (sandbox_path)

    add_custom_command (TARGET ${target} POST_BUILD
        COMMAND mkdir -p ${sandbox_path}/python${PYTHON_MAJOR_VERSION}.${PYTHON_MINOR_VERSION}/appleseed
        COMMAND cp ${target_path} ${sandbox_path}/python${PYTHON_MAJOR_VERSION}.${PYTHON_MINOR_VERSION}/appleseed
    )
endmacro ()

macro (add_copy_py_file_to_sandbox_py_module_command py_src)
    get_sandbox_lib_path (sandbox_path)

    add_custom_command (TARGET appleseed.python POST_BUILD
        COMMAND mkdir -p ${sandbox_path}/python${PYTHON_MAJOR_VERSION}.${PYTHON_MINOR_VERSION}/appleseed
        COMMAND cp ${py_src} ${sandbox_path}/python${PYTHON_MAJOR_VERSION}.${PYTHON_MINOR_VERSION}/appleseed
    )
endmacro ()

macro (add_copy_dir_to_sandbox_py_module_command py_dir)
    get_sandbox_lib_path (sandbox_path)

    add_custom_command (TARGET appleseed.python POST_BUILD
        COMMAND cp -r ${py_dir} ${sandbox_path}/python${PYTHON_MAJOR_VERSION}.${PYTHON_MINOR_VERSION}/appleseed
    )
endmacro ()
