
//
// This source file is part of appleseed.
// Visit http://appleseedhq.net/ for additional information and resources.
//
// This software is released under the MIT license.
//
// Copyright (c) 2016 Luis Barrancos, The appleseedhq Organization
// Copyright (c) 2016 Esteban Tovagliari, The appleseedhq Organization
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

#ifndef AS_OSL_EXTENSIONS_H
#define AS_OSL_EXTENSIONS_H

#define APPLESEED_VERSION_MAJOR     ${appleseed_version_major}
#define APPLESEED_VERSION_MINOR     ${appleseed_version_minor}
#define APPLESEED_VERSION_PATCH     ${appleseed_version_patch}

#define APPLESEED_VERSION               \
    APPLESEED_VERSION_MAJOR * 10000 +   \
    APPLESEED_VERSION_MINOR * 100 +     \
    APPLESEED_VERSION_PATCH

#ifndef M_1_PI
#define M_1_PI      0.3183098861837907      // 1/PI
#endif

matrix inverse(matrix m) { return 1 / m; }

float min(color C) { return min(C[0], min(C[1], C[2])); }
float max(color C) { return max(C[0], max(C[1], C[2])); }

float min(vector V) { return min(V[0], min(V[1], V[2])); }
float max(vector V) { return max(V[0], max(V[1], V[2])); }

closure color mix(closure color A, closure color B, float w)
{
    return (1.0 - w) * A + w * B;
}

closure color mix(closure color A, closure color B, color w)
{
    return (1.0 - w) * A + w * B;
}

closure color as_sheen(normal N) BUILTIN;

closure color as_glossy(
    string  distribution,
    normal  N,
    vector  T,
    float   roughness,
    float   highlight_falloff,
    float   anisotropic,
    float   ior) BUILTIN;

closure color as_blinn(
    normal  N,
    float   exponent,
    float   ior) BUILTIN;

closure color as_metal(
    string  distribution,
    normal  N,
    vector  T,
    color   normal_reflectance,
    color   edge_tint,
    float   roughness,
    float   highlight_falloff,
    float   anisotropic) BUILTIN;

closure color as_glass(
    string  distribution,
    normal  N,
    vector  T,
    color   surface_transmittance,
    color   reflection_tint,
    color   refraction_tint,
    float   roughness,
    float   highlight_falloff,
    float   anisotropic,
    float   ior,
    color   volume_transmittance,
    float   volume_transmittance_distance) BUILTIN;

closure color as_subsurface(
    string  profile,
    normal  N,
    color   reflectance,
    color   mean_free_path,
    float   ior
//
//  keyword arguments:
//  ==================
//
//      float "fresnel_weight" = 1
//
    ) BUILTIN;

closure color as_ashikhmin_shirley(
    normal  N,
    vector  T,
    color   diffuse_reflectance,
    color   glossy_reflectance,
    float   exponent_u, // Phong-like exponent along U direction
    float   exponent_v, // Phong-like exponent along V direction
    float   fresnel_multiplier) BUILTIN;

closure color as_disney(
    normal  N,
    vector  T,
    color   base_color,
    float   subsurface,
    float   metallic,
    float   specular,
    float   specular_tint,
    float   anisotropic,
    float   roughness,
    float   sheen,
    float   sheen_tint,
    float   clearcoat,
    float   clearcoat_gloss) BUILTIN;

//
// AlSurface specular layer.
//
//  We use ints instead of strings for closure params
//  to match the parameter types used in the original Arnold shader.

closure color as_alsurface_layer(
    closure color   substrate,
    int             distribution,       // 0 = beckmann, 1 = GGX.
    normal          N,
    vector          T,
    color           reflectance,
    float           roughness,
    float           anisotropy,
    int             fresnel_mode,       // 0 = dielectric, 1 = metallic.
    float           ior,                // ior for dielectric fresnel.
    color           normal_reflectance, // f0 reflectance for metallic fresnel.
    color           edge_tint           // edge tint for metallic fresnel.
    ) BUILTIN;

#endif // AS_OSL_EXTENSIONS_H
