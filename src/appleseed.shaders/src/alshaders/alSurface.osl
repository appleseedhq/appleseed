
//
// This source file is part of appleseed.
// Visit http://appleseedhq.net/ for additional information and resources.
//
// This software is released under the MIT license.
//
// Copyright (c) 2017 Esteban Tovagliari, The appleseedhq Organization
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

#include "appleseed/material/as_material_helpers.h"

// Constants.
#define IMPORTANCE_EPS 1e-5

#define SSSMODE_CUBIC       0
#define SSSMODE_DIFFUSION   1
#define SSSMODE_DIRECTIONAL 2
#define SSSMODE_EMPIRICAL   3

// Utility.
float minh(color c)
{
    return min(c[0], min(c[1], c[2]));
}

float maxh(color c)
{
    return max(c[0], max(c[1], c[2]));
}

shader alSurface
[[
   string help = "A physically plausible, energy-conserving, general-purpose surface shader.",
   string description = "Suitable for any dielectric or metallic material including skin, plastic, wood, metal, glass, etc.",
    string as_maya_node_name = "alSurface"
]]
(
    normal in_globalNormal = N
    [[
        string as_maya_attribute_name = "normalCamera",
        string as_maya_attribute_name = "n"
    ]],
    vector Tn = 0
    [[
        int lockgeom = 0,
        string widget = "null"
    ]],

    normal in_diffuseNormal = normal(0)
    [[
        string as_maya_attribute_name = "diffuseNormal"
    ]],
    float in_diffuseStrength = 1
    [[
        string as_maya_attribute_name = "diffuseStrength"
    ]],
    color in_diffuseColor =  color(0.5)
    [[
        string as_maya_attribute_name = "diffuseColor"
    ]],
    float in_diffuseRoughness = 0
    [[
        string as_maya_attribute_name = "diffuseRoughness"
    ]],

    float in_backlightStrength = 0
    [[
        string as_maya_attribute_name = "backlightStrength"
    ]],
    color in_backlightColor = color(0.18)
    [[
        string as_maya_attribute_name = "backlightColor"
    ]],

    float in_sssMix = 0
    [[
        string as_maya_attribute_name = "sssMix"
    ]],
    int in_sssMode = 0
    [[
        string as_maya_attribute_name = "sssMode"
    ]],
    float in_sssRadius = 1.5
    [[
        string as_maya_attribute_name = "sssRadius"
    ]],
    float in_sssWeight1 = 1
    [[
        string as_maya_attribute_name = "sssWeight1"
    ]],
    color in_sssRadiusColor = color(0.439, 0.156, 0.078)
    [[
        string as_maya_attribute_name = "sssRadiusColor"
    ]],
    float in_sssRadius2 = 4.0
    [[
        string as_maya_attribute_name = "sssRadius2"
    ]],
    float in_sssWeight2 = 0
    [[
        string as_maya_attribute_name = "sssWeight2"
    ]],
    color in_sssRadiusColor2 = color(0.439, 0.08, 0.018)
    [[
        string as_maya_attribute_name = "sssRadiusColor2"
    ]],
    float in_sssRadius3 = 0.75
    [[
        string as_maya_attribute_name = "sssRadius3"
    ]],
    float in_sssWeight3 = 0
    [[
        string as_maya_attribute_name = "sssWeight3"
    ]],
    color in_sssRadiusColor3 = color(0.523, 0.637, 0.667)
    [[
        string as_maya_attribute_name = "sssRadiusColor3"
    ]],
    float in_sssDensityScale = 1
    [[
        string as_maya_attribute_name = "sssDensityScale"
    ]],

    normal in_specular1Normal = normal(0)
    [[
        string as_maya_attribute_name = "specular1Normal"
    ]],
    float in_specular1Strength = 1
    [[
        string as_maya_attribute_name = "specular1Strength"
    ]],
    color in_specular1Color = color(1)
    [[
        string as_maya_attribute_name = "specular1Color"
    ]],
    float in_specular1Roughness = 0.3
    [[
        string as_maya_attribute_name = "specular1Roughness"
    ]],
    float in_specular1Anisotropy = 0
    [[
        string as_maya_attribute_name = "specular1Anisotropy"
    ]],
    float in_specular1Rotation = 0
    [[
        string as_maya_attribute_name = "specular1Rotation"
    ]],
    int in_specular1FresnelMode = 0
    [[
        string as_maya_attribute_name = "specular1FresnelMode"
    ]],
    float in_specular1Ior= 1.4
    [[
        string as_maya_attribute_name = "specular1Ior"
    ]],
    color in_specular1Reflectivity = color(0.548, 0.549, 0.570)
    [[
        string as_maya_attribute_name = "specular1Reflectivity"
    ]],
    color in_specular1EdgeTint = color(0.579, 0.598, 0.620)
    [[
        string as_maya_attribute_name = "specular1EdgeTint"
    ]],
    float in_specular1RoughnessDepthScale = 1
    [[
        string as_maya_attribute_name = "specular1RoughnessDepthScale"
    ]],
    int in_specular1Distribution = 0
    [[
        string as_maya_attribute_name = "specular1Distribution"
    ]],

    normal in_specular2Normal = normal(0)
    [[
        string as_maya_attribute_name = "specular2Normal"
    ]],
    float in_specular2Strength = 0
    [[
        string as_maya_attribute_name = "specular2Strength"
    ]],
    color in_specular2Color = color(1)
    [[
        string as_maya_attribute_name = "specular2Color"
    ]],
    float in_specular2Roughness = 0
    [[
        string as_maya_attribute_name = "specular2Roughness"
    ]],
    float in_specular2Anisotropy = 0
    [[
        string as_maya_attribute_name = "specular2Anisotropy"
    ]],
    float in_specular2Rotation = 0
    [[
        string as_maya_attribute_name = "specular2Rotation"
    ]],
    int in_specular2FresnelMode = 0
    [[
        string as_maya_attribute_name = "specular2FresnelMode"
    ]],
    float in_specular2Ior = 1.4
    [[
        string as_maya_attribute_name = "specular2Ior"
    ]],
    color in_specular2Reflectivity = color(0.548, 0.549, 0.570)
    [[
        string as_maya_attribute_name = "specular2Reflectivity"
    ]],
    color in_specular2EdgeTint = color(0.579, 0.598, 0.620)
    [[
        string as_maya_attribute_name = "specular2EdgeTint"
    ]],
    float in_specular2RoughnessDepthScale = 1
    [[
        string as_maya_attribute_name = "specular2RoughnessDepthScale"
    ]],
    int in_specular2Distribution = 0
    [[
        string as_maya_attribute_name = "specular2Distribution"
    ]],

    normal in_transmissionNormal = normal(0)
    [[
        string as_maya_attribute_name = "transmissionNormal"
    ]],
    float in_transmissionStrength = 0
    [[
        string as_maya_attribute_name = "transmissionStrength"
    ]],
    color in_transmissionColor = color(1)
    [[
        string as_maya_attribute_name = "transmissionColor"
    ]],
    int in_transmissionLinkToSpecular1 = 1
    [[
        string as_maya_attribute_name = "transmissionLinkToSpecular1"
    ]],
    float in_transmissionRoughness = 0
    [[
        string as_maya_attribute_name = "transmissionRoughness"
    ]],
    float in_transmissionIor = 1.4
    [[
        string as_maya_attribute_name = "transmissionIor"
    ]],
    float in_transmissionRoughnessDepthScale = 1
    [[
        string as_maya_attribute_name = "transmissionRoughnessDepthScale"
    ]],

    color in_ssAttenuationColor = color(1)
    [[
        string as_maya_attribute_name = "ssAttenuationColor"
    ]],
    float in_ssDensityScale = 1
    [[
        string as_maya_attribute_name = "ssDensityScale"
    ]],

    float in_emissionStrength = 0
    [[
        string as_maya_attribute_name = "emissionStrength"
    ]],
    color in_emissionColor = color(1)
    [[
        string as_maya_attribute_name = "emissionColor"
    ]],

    color in_opacity = 1
    [[
        string as_maya_attribute_name = "opacity"
    ]],

    output closure color out_result = 0
    [[
        string as_maya_attribute_name = "outColor",
        string as_maya_attribute_short_name = "oc"
    ]]
)
{
    if (raytype("transparency"))
    {
        out_result = (color(1) - in_opacity) * transparent();
        return;
    }

    int do_diffuse = 1;
    int do_backlight = 1;
    int do_sss = 1;
    int do_transmission = 1;
    int do_emission = 1;
    int do_glossy2 = 1;
    int do_glossy = 1;

    if (raytype("shadow"))
    {
        do_diffuse = 0;
        do_backlight = 0;
        do_sss = 0;
        do_transmission = 1;
        do_emission = 0;
        do_glossy2 = 0;
        do_glossy = 0;
    }
    else if (raytype("light"))
    {
        do_diffuse = 0;
        do_backlight = 0;
        do_sss = 0;
        do_transmission = 0;
        do_emission = 1;
        do_glossy2 = 1;
        do_glossy = 1;
    }

    // balance diffuse, transmission and backlight
    color transmissionColor = in_transmissionColor * in_transmissionStrength;
    color diffuseColor = in_diffuseColor * in_diffuseStrength;
    color backlightColor = in_backlightColor * in_backlightStrength;
    float t_sum = maxh(transmissionColor) + maxh(diffuseColor) + maxh(backlightColor);

    if (t_sum > 1.0)
    {
        float t_sum_inv = 1.0 / t_sum;
        transmissionColor *= t_sum_inv;
        diffuseColor      *= t_sum_inv;
        backlightColor    *= t_sum_inv;
    }

    if (maxh(diffuseColor) < IMPORTANCE_EPS || in_sssMix == 1.0)
        do_diffuse = 0;

    if (maxh(backlightColor) < IMPORTANCE_EPS || in_sssMix == 1.0)
        do_backlight = 0;

    if (in_sssMix == 0.0 || maxh(diffuseColor) < IMPORTANCE_EPS)
        do_sss = 0;

    if (maxh(transmissionColor) < IMPORTANCE_EPS || in_sssMix == 1.0)
        do_transmission = 0;

    color emissionColor = in_emissionColor * in_emissionStrength;
    if (maxh(emissionColor) < IMPORTANCE_EPS)
        do_emission = 0;

    color specular1Color = in_specular1Color * in_specular1Strength;
    if (maxh(specular1Color) < IMPORTANCE_EPS)
        do_glossy = 0;

    color specular2Color = in_specular2Color * in_specular2Strength;
    if (maxh(specular2Color) < IMPORTANCE_EPS)
        do_glossy2 = 0;

    // Create closures.
    normal globalNormal = normalize(in_globalNormal);

    normal diffuseNormal = globalNormal;
    if (isconnected(in_diffuseNormal) == 1)
        diffuseNormal = normalize(in_diffuseNormal);

    if (do_diffuse)
        out_result += diffuseColor * (1.0 - in_sssMix) * oren_nayar(diffuseNormal, in_diffuseRoughness);

    if (do_backlight)
        out_result += backlightColor * (1.0 - in_sssMix) * translucent(diffuseNormal);

    if (do_sss)
    {
        color sssColor = diffuseColor * in_sssMix;

        // Normalize the SSS weights.
        float sssWeight1 = in_sssWeight1;
        float sssWeight2 = in_sssWeight2;
        float sssWeight3 = in_sssWeight3;

        float normweight = 1.0 / (sssWeight1 + sssWeight2 + sssWeight3);
        sssWeight1 *= normweight;
        sssWeight2 *= normweight;
        sssWeight3 *= normweight;

        float sssIor = 1.3;

        if (in_sssMode == SSSMODE_DIFFUSION || in_sssMode == SSSMODE_DIRECTIONAL)
        {
            // TODO: implement this.
        }
        else // SSSMODE_CUBIC || SSSMODE_EMPIRICAL
        {
            if (sssWeight1 > IMPORTANCE_EPS)
            {
                color radius = max(
                    color(0.0001),
                    in_sssRadius * in_sssRadiusColor / (in_sssDensityScale * 7.0));

                out_result += sssColor * sssWeight1 * as_subsurface(
                    in_sssMode == SSSMODE_CUBIC ? "gaussian" : "normalized_diffusion",
                    diffuseNormal,
                    color(1, 1, 1),
                    radius,
                    sssIor,
                    "fresnel_weight", 0.0);
            }

            // TODO: add lobes 2 and 3.
        }
    }

    if (do_transmission)
    {
        normal transmissionNormal = globalNormal;
        if (isconnected(in_transmissionNormal) == 1)
            transmissionNormal = normalize(in_transmissionNormal);

        float transmissionRoughness;
        float transmissionIor;
        if (in_transmissionLinkToSpecular1)
        {
            transmissionRoughness = in_specular1Roughness;
            transmissionIor = in_specular1Ior;
        }
        else
        {
            transmissionRoughness = in_transmissionRoughness;
            transmissionIor = in_transmissionIor;
        }

        color volumeTransmittanceColor = color(1);
        float volumeTransmittanceDistance = 0.0;

        if (minh(in_ssAttenuationColor) < 1.0)
        {
            color sigmaA =
                (color(1) - clamp(in_ssAttenuationColor, color(0), color(0.999))) * in_ssDensityScale;

            // Convert to transmittance.
            volumeTransmittanceColor = exp(-sigmaA);
            volumeTransmittanceDistance = 1.0;
        }

        out_result += (1.0 - in_sssMix) * as_glass(
            "beckmann",
            transmissionNormal,
            vector(0),
            transmissionColor,
            color(0), // transmission only.
            color(1),
            transmissionRoughness,
            0,
            transmissionIor,
            volumeTransmittanceColor,
            volumeTransmittanceDistance);
    }

    if (do_emission)
        out_result += emissionColor * emission();

    if (do_glossy2)
    {
        normal specular2Normal = globalNormal;
        if (isconnected(in_specular2Normal) == 1)
            specular2Normal = normalize(in_specular2Normal);

        vector T = Tn;
        if (in_specular2Rotation != 0.0)
        {
            T = rotate(
                T,
                -in_specular2Rotation * M_PI,
                point(0),
                point(specular2Normal));
        }

        out_result = as_alsurface_layer(
            out_result,
            in_specular2Distribution,
            specular2Normal,
            T,
            specular2Color,
            in_specular2Roughness,
            in_specular2Anisotropy,
            in_specular2FresnelMode,
            in_specular2Ior,
            in_specular2Reflectivity,
            in_specular2EdgeTint);
    }

    if (do_glossy)
    {
        normal specular1Normal = globalNormal;
        if (isconnected(in_specular1Normal) == 1)
            specular1Normal = normalize(in_specular1Normal);

        vector T = Tn;
        if (in_specular1Rotation != 0.0)
        {
            T = rotate(
                T,
                -in_specular1Rotation * M_PI,
                point(0),
                point(specular1Normal));
        }

        out_result = as_alsurface_layer(
            out_result,
            in_specular1Distribution,
            specular1Normal,
            T,
            specular1Color,
            in_specular1Roughness,
            in_specular1Anisotropy,
            in_specular1FresnelMode,
            in_specular1Ior,
            in_specular1Reflectivity,
            in_specular1EdgeTint);
    }
}