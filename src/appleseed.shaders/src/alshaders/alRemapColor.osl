
//
// This software is released under the MIT licence
//
// Copyright (c) 2013 Anders Langlands
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of
// this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//

// This code comes from alshaders OSL branch, with minimal changes.
// https://bitbucket.org/anderslanglands/alshaders/branch/osl

shader alRemapColor
[[
    string as_maya_node_name = "alRemapColor"
]]
(
    color input = color(0.18, 0.18, 0.18),
    float gamma = 1,
    float saturation = 1,
    float hueOffset = 0,
    float contrastVal = 1,
    float contrastPivot = 0.18,
    float gain = 1,
    float exposure = 0,
    float mask = 1,
    output color result = color(0,0,0)
    [[
        string as_maya_attribute_name = "outColor",
        string as_maya_attribute_short_name = "oc"
    ]]
)
{
    result = input;

    if (mask > 0)
    {
        if (gamma != 1)
            result = pow(result, 1 / gamma);

        if (saturation != 1)
        {
            float l = luminance(result);
            result = mix(color(l), result, saturation);
        }

        if (hueOffset != 0)
        {
            color hsv = transformc("hsv", result);
            hsv[0] += hueOffset;
            result = transformc("rgb", result);
        }

        if (contrastVal != 1)
        {
            result = (result-color(contrastPivot))*contrastVal + color(contrastPivot);
        }

        result = result * gain * pow(2, exposure);

        if (mask < 1)
            result = mix(input, result, mask);
    }
}
