
//
// This software is released under the MIT licence
//
// Copyright (c) 2013 Anders Langlands
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of
// this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//

// This code comes from alshaders OSL branch, with minimal changes.
// https://bitbucket.org/anderslanglands/alshaders/branch/osl

shader alJitterColor
[[
    string as_maya_node_name = "alJitterColor",
    string help = "Applies random color variation within a range.",
    string description = "Use this in a network attached to multiple objects to add random color variation to each object."
]]
(
    color in_input = color(1)
    [[
        string label = "Input",
        string help = "The input color to be jittered.",
        string as_maya_attribute_name = "input"
    ]],
    float in_minSaturation = 0.0
    [[
        string label = "Min Saturation",
        string help = "Minimum random saturation scale to apply.",
        string as_maya_attribute_name = "minSaturation"
    ]],
    float in_maxSaturation = 1.0
    [[
        string label = "Max Saturation",
        string help = "Maximum random saturation scale to apply.",
        string as_maya_attribute_name = "maxSaturation"
    ]],
    float in_minHueOffset = -1.0
    [[
        string label = "Min Hue Offset",
        string help = "Minimum hue offset to apply.",
        string as_maya_attribute_name = "minHueOffset"
    ]],
    float in_maxHueOffset = 1.0
    [[
        string label = "Max Hue Offset",
        string help = "Maximum hue offset to apply.",
        string as_maya_attribute_name = "maxHueOffset"
    ]],
    float in_minGain = 0.0
    [[
        string label = "Min Gain",
        string help = "Minimum random gain to apply.",
        string as_maya_attribute_name = "minGain"
    ]],
    float in_maxGain = 1.0
    [[
        string label = "Max Gain",
        string help = "Maximum random gain to apply.",
        string as_maya_attribute_name = "maxGain"
    ]],
    float in_clampResult = 1
    [[
        string label = "Clamp",
        string help = "If enabled, the output color will be clamped to 0-1.",
        string as_maya_attribute_name = "clampResult"
    ]],
    float in_signal = 0.0
    [[
        string label = "Signal",
        string help = "Signal to use to drive the randomization. This wants to be a unique value per object such as the object id.",
        string as_maya_attribute_name = "signal"
    ]],
    output color out_result = color(0)
    [[
        string as_maya_attribute_name = "outColor",
        string as_maya_attribute_short_name = "oc"
    ]]
)
{
    out_result = in_input;

    float saturation = noise("cell", in_signal, 51731.132151);
    saturation = mix(in_minSaturation, in_maxSaturation, saturation);
    if (saturation != 1)
    {
        float l = luminance(out_result);
        out_result = mix(color(l), out_result, saturation);
    }

    float hueOffset = noise("cell", in_signal, 173.1231);
    hueOffset = mix(in_minHueOffset, in_maxHueOffset, hueOffset);
    if (hueOffset != 0)
    {
        color hsv = transformc("hsv", out_result);
        hsv[0] += hueOffset;
        out_result = transformc("rgb", hsv);
    }

    float gain = noise("cell", in_signal, 413.7254);
    gain = mix(in_minGain, in_maxGain, gain);
    out_result *= gain;

    if (in_clampResult)
        out_result = clamp(out_result, color(0), color(1));
}
