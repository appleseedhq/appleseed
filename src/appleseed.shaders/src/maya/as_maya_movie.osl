
//
// This source file is part of appleseed.
// Visit http://appleseedhq.net/ for additional information and resources.
//
// This software is released under the MIT license.
//
// Copyright (c) 2017 Luis Barrancos, The appleseedhq Organization
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

// Ref: $MAYA_LOCATION/docs/Nodes/movie.html

#include "appleseed/maya/as_maya_cms_syncolor_idt.h"
#include "appleseed/maya/as_maya_helpers.h"

shader as_maya_movie
[[
    string as_maya_node_name = "movie"
]]
(
    string in_fileTextureName = ""
    [[
        string as_maya_attribute_name = "fileTextureName",
        string label = "Image File",
        string widget = "filename"
    ]],
    int in_disableFileLoad = 0
    [[
        string as_maya_attribute_name = "disableFileLoad",
        string label = "Disable File Load",
        string widget = "checkBox"
    ]],
    int in_useFrameExtension = 0
    [[
        string as_maya_attribute_name = "useFrameExtension",
        string label = "Use Frame Extension",
        string widget = "checkBox"
    ]],
    int in_frameExtension = 1
    [[
        string as_maya_attribute_name = "frameExtension",
        string label = "Frame Extension",
        string widget = "number",
        int slider = 0
    ]],
    int in_frameOffset = 0
    [[
        string as_maya_attribute_name = "frameOffset",
        string label = "Frame Offset",
        string widget = "number",
        int slider = 0
    ]],
    int in_filterType = 3
    [[
        string as_maya_attribute_name = "filterType",
        string label = "Filter Type",
        string widget = "mapper",
        string options = "None:0|Mip Map:1|Box:2|Quadratic:3|Quartic:4|Gaussian:5"
    ]],
    float in_filterWidth = 0.707
    [[
        string as_maya_attribute_name = "filterWidth",
        string label = "Filter Width"
    ]],
    int in_preFilter = 0
    [[
        string as_maya_attribute_name = "preFilter",
        string label = "Pre-Filter",
        string widget = "checkBox"
    ]],
    float in_preFilterRadius = 2.0
    [[
        string as_maya_attribute_name = "preFilterRadius",
        string label = "Pre-Filter Radius",
        int slider = 1,
        int slidermin = 1,
        int slidermax = 10,
        int digits = 4
    ]],

    MAYA_COLORMANAGEMENT_PARAMETERS,
    MAYA_COLORBALANCE_PARAMETERS,
    MAYA_EFFECTS_PARAMETERS,
    MAYA_UV_PARAMETERS,

    output color out_outColor = color(0)
    [[
        string as_maya_attribute_name = "outColor",
        string as_maya_attribute_short_name = "oc",
        string label = "Output Color",
        string widget = "null"
    ]],
    output float out_outAlpha = 1.0
    [[
        string as_maya_attribute_name = "outAlpha",
        string as_maya_attribute_short_name = "oa",
        string label = "Output File Alpha",
        string widget = "null"
    ]],
    output color out_outTransparency = color(0)
    [[
        string as_maya_attribute_name = "outTransparency",
        string as_maya_attribute_short_name = "ot",
        string label = "Output Transparency",
        string widget = "null"
    ]],
    output int out_fileHasAlpha = 0
    [[
        string as_maya_attribute_name = "fileHasAlpha",
        string label = "File Has Alpha",
        string widget = "null"
    ]],
    output int out_outSize[2] = {0, 0}
    [[
        string as_maya_attribute_name ="outSize",
        string label = "File Texture Size",
        string widget = "null"
    ]]
)
{
    if (in_disableFileLoad || in_fileTextureName == "")
    {
        out_outColor = in_defaultColor;

        maya_colorBalance(
            in_colorGain,
            in_colorOffset,
            in_defaultColor,
            in_alphaGain,
            in_alphaOffset,
            in_invert,
            in_alphaIsLuminance,
            out_outColor,
            out_outAlpha);

        return;
    }
    
    if (in_uvCoord[0] == OUTSIDE_UVFRAME || in_uvCoord[1] == OUTSIDE_UVFRAME)
    {
        out_outColor = in_defaultColor;
        out_outAlpha = maya_luminance(in_defaultColor);
    }
    else
    {
        int channels = 0;
        int size[2] = {0,0};

        gettextureinfo(in_fileTextureName, "channels", channels);
        gettextureinfo(in_fileTextureName, "resolution", size);

        out_outSize[0] = size[0];
        out_outSize[1] = size[1];

        out_fileHasAlpha = (channels > 3) ? 1 : 0;

        float st[2] = {in_uvCoord[0], in_uvCoord[1]}, dsdt[4];

        string filter = "";

        if (in_filterType)
        {
            dsdt[0] = Dx(st[0]);
            dsdt[1] = Dx(st[1]);
            dsdt[2] = Dy(st[0]);
            dsdt[3] = Dy(st[1]);

            // Starting point for filter choice (rough) matching.

            if (in_filterType == 1)
            {
                filter = "linear";
            }
            else if (in_filterType == 2)
            {
                filter = "closest";
            }
            else if (in_filterType == 3)
            {
                filter = "cubic";
            }
            else if (in_filterType == 4)
            {
                filter = "smartcubic";
            }
            else if (in_filterType == 5)
            {
                filter = "smartcubic";
            }
            else
            {
                filter = "closest";
            }
        }
        else
        {
            dsdt[0] = 0;
            dsdt[1] = 0;
            dsdt[2] = 0;
            dsdt[3] = 0;
            
            filter = "closest";
        }

        // Disabled filtering can still be overriden by filter radius.

        if (in_preFilter)
        {
            float fw = in_filterWidth * in_preFilterRadius;

            dsdt[0] *= fw;
            dsdt[1] *= fw;
            dsdt[2] *= fw;
            dsdt[3] *= fw;
        }

        // OIIO uses subimage to access frames in movie.

        if (in_useFrameExtension)
        {
            out_outColor =
                texture(
                    in_fileTextureName,
                    st[0], st[1],
                    dsdt[0], dsdt[1], dsdt[2], dsdt[3],
                    "blur", in_filterOffset,
                    "width", in_filter,
                    "wrap", "periodic",
                    "subimage", in_frameExtension + in_frameOffset,
                    "missingcolor", in_defaultColor,
                    "missingalpha", 1.0,
                    "alpha", out_outAlpha,
                    "interp", filter);
        }
        else
        {
            out_outColor =
                texture(
                    in_fileTextureName,
                    st[0], st[1],
                    dsdt[0], dsdt[1], dsdt[2], dsdt[3],
                    "blur", in_filterOffset,
                    "width", in_filter,
                    "wrap", "periodic",
                    "missingcolor", in_defaultColor,
                    "missingalpha", 1.0,
                    "alpha", out_outAlpha,
                    "interp", filter);
        }

        if (in_colorManagementEnabled == 1 &&
            in_ignoreColorSpaceFileRules == 0 &&
            in_colorSpace != "Raw")
        {
            out_outColor =
                transform_colorspace_to_workingspace(
                    out_outColor,
                    in_colorSpace,
                    in_workingSpace);
        }        
    }

    out_outColor = max(0, out_outColor);

    maya_colorBalance(
        in_colorGain,
        in_colorOffset,
        in_defaultColor,
        in_alphaGain,
        in_alphaOffset,
        in_invert,
        in_alphaIsLuminance,
        out_outColor,
        out_outAlpha
        );
}
