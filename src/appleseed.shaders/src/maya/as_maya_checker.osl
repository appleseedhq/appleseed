
//
// This source file is part of appleseed.
// Visit http://appleseedhq.net/ for additional information and resources.
//
// This software is released under the MIT license.
//
// Copyright (c) 2016 Luis Barrancos, The appleseedhq Organization
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

// Ref: $MAYA_LOCATION/docs/Nodes/checker.html

#include "appleseed/maya/as_maya_helpers.h"
#include "appleseed/pattern/as_pattern_helpers.h"

shader as_maya_checker
[[
    string as_maya_node_name = "checker"
]]
(
    color in_color1 = color(1)
    [[
        string as_maya_attribute_name = "color1",
        string label = "Color 1",
        string page = "Checker Attributes"
    ]],
    color in_color2 = color(0)
    [[
        string as_maya_attribute_name = "color2",
        string label = "Color 2",
        string page = "Checker Attributes"
    ]],
    float in_contrast = 1.0
    [[
        string as_maya_attribute_name = "contrast",
        string label = "Contrast",
        string page = "Checker Attributes"
    ]],

    MAYA_COLORBALANCE_PARAMETERS,
    MAYA_EFFECTS_PARAMETERS,
    MAYA_UV_PARAMETERS,

    output color out_outColor = color(0)
    [[
        string as_maya_attribute_name = "outColor",
        string label = "Output Color",
        string widget = "null"
    ]],
    output float out_outAlpha = 1.0
    [[
        string as_maya_attribute_name = "outAlpha",
        string label = "Output Alpha",
        string widget = "null"
    ]]
)
{
    if (in_uvCoord[0] == OUTSIDE_UVFRAME || in_uvCoord[1] == OUTSIDE_UVFRAME)
    {
        out_outColor = in_defaultColor;
        out_outAlpha = maya_luminance(in_defaultColor);
    }
    else
    {
        float st[2] = {in_uvCoord[0], in_uvCoord[1]};

        st[0] = mod(st[0], UVWRAP);
        st[1] = mod(st[1], UVWRAP);

        float dsdt[2] = {
            in_filter *
                (in_uvFilterSize[0] == UNDEFINED_UVFILTER
                    ? filterwidth(st[0])
                    : in_uvFilterSize[0]),
            in_filter *
                (in_uvFilterSize[1] == UNDEFINED_UVFILTER
                    ? filterwidth(st[1])
                    : in_uvFilterSize[1])};

        dsdt[0] += 2 * in_filterOffset; // double to match Maya
        dsdt[1] += 2 * in_filterOffset;

        // Contrast default 1, with 0 being full blend of input colors+alpha.
        color color_blend = mix(in_color1, in_color2, 0.5);
        float alpha_blend = 0.5;

        color A = mix(color_blend, in_color1, in_contrast);
        color B = mix(color_blend, in_color2, in_contrast);

        float weight = 0.5 - 2 *
            (filtered_pulsetrain(0.5, 1, st[0], dsdt[0]) - 0.5) *
            (filtered_pulsetrain(0.5, 1, st[1], dsdt[1]) - 0.5);

        weight = clamp(weight, 0, 1);

        out_outColor = mix(A, B, weight);
        out_outAlpha = mix(alpha_blend, 1 - weight, in_contrast);

        maya_colorBalance(
            in_colorGain,
            in_colorOffset,
            in_defaultColor,
            in_alphaGain,
            in_alphaOffset,
            in_invert,
            in_alphaIsLuminance,
            out_outColor,
            out_outAlpha);
    }
}
