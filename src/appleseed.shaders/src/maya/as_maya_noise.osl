
//
// This source file is part of appleseed.
// Visit http://appleseedhq.net/ for additional information and resources.
//
// This software is released under the MIT license.
//
// Copyright (c) 2017 Luis Barrancos, The appleseedhq Organization
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

// Ref: $MAYA_LOCATION/docs/Nodes/noise.html

#include "appleseed/fractal/as_fractal_helpers.h"
#include "appleseed/maya/as_maya_fractal_helpers.h"
#include "appleseed/maya/as_maya_helpers.h"

shader as_maya_noise
[[
    string as_maya_node_name = "noise"
]]
(
    float in_amplitude = 1.0
    [[
        string as_maya_attribute_name = "amplitude",
        string label = "Amplitude"
    ]],
    float in_ratio = 0.707
    [[
        string as_maya_attribute_name = "ratio",
        string label = "Ratio"
    ]],
    float in_threshold = 0.0
    [[
        string as_maya_attribute_name = "threshold",
        string label = "Threshold"
    ]],
    int in_depthMax = 3
    [[
        string as_maya_attribute_name = "depthMax",
        string widget = "slider",
        int slidermin = 1,
        int slidermax = 8,
        string label = "Maximum Depth"
    ]],
    float in_frequency = 8.0
    [[
        string as_maya_attribute_name = "frequency",
        string widget = "slider",
        float slidermin = 0.0,
        float slidermax = 100.0,
        string label = "Frequency"
    ]],
    float in_frequencyRatio = 2.0
    [[
        string as_maya_attribute_name = "frequencyRatio",
        string widget = "slider",
        float slidermin = 1.0,
        float slidermax = 10.0,
        string label = "Frequency Ratio"
    ]],
    int in_inflection = 0
    [[
        string as_maya_attribute_name = "inflection",
        string widget = "checkBox",
        string label = "Inflection"
    ]],
    float in_time = 0.0
    [[
        string as_maya_attribute_name = "time",
        string label = "Time"
    ]],
    int in_noiseType = 1
    [[
        string as_maya_attribute_name = "noiseType",
        string widget = "mapper",
        string options = "Perlin:0|Billow:1|Wave:2|Wispy:3|SpaceTime:4",
        string label = "Noise Type"
    ]],
    float in_density = 1.0
    [[
        string as_maya_attribute_name = "density",
        string label = "Density"
    ]],
    float in_spottyness = 0.1
    [[
        string as_maya_attribute_name = "spottyness",
        string label = "Spottyness"
    ]],
    float in_sizeRand = 0.0
    [[
        string as_maya_attribute_name = "sizeRand",
        string label = "Size Randomness"
    ]],
    float in_randomness = 1.0
    [[
        string as_maya_attribute_name = "randomness",
        string label = "Randomness"
    ]],
    int in_falloff = 2
    [[
        string as_maya_attribute_name = "falloff",
        string widget = "mapper",
        string options = "Linear:0|Smooth:1|Fast:2|Bubble:3",
        string label = "Falloff"
    ]],
    int in_numWaves = 5
    [[
        string as_maya_attribute_name = "numWaves",
        string widget = "slider",
        int slidermin = 1,
        int slidermax = 20,
        string label = "Number of Waves"
    ]],
    float in_implode = 0.0
    [[
        string as_maya_attribute_name = "implode",
        string widget = "slider",
        float slidermin = -1.0,
        float slidermax = 1.0,
        string label = "Implode"
    ]],
    float in_implodeCenter[2] = {0.5, 0.5}
    [[
        string as_maya_attribute_name = "implodeCenter",
        string label = "Implode Center"
    ]],

    MAYA_COLORBALANCE_PARAMETERS,
    MAYA_EFFECTS_PARAMETERS,
    MAYA_UV_PARAMETERS,

    output color out_outColor = color(0)
    [[
        string as_maya_attribute_name = "outColor",
        string as_maya_attribute_short_name = "oc",
        string label = "Output Color",
        string widget = "null"
    ]],
    output float out_outAlpha = 1.0
    [[
        string as_maya_attribute_name = "outAlpha",
        string as_maya_attribute_short_name = "oa",
        string label = "Output Alpha",
        string widget = "null"
    ]]
)
{
    if (in_uvCoord[0] == OUTSIDE_UVFRAME || in_uvCoord[1] == OUTSIDE_UVFRAME)
    {
        out_outColor = in_defaultColor;
        out_outAlpha = maya_luminance(in_defaultColor);
    }
    else if (in_amplitude == 0.0)
    {
        out_outAlpha = (in_noiseType == 1) ? 0.0 : 0.5;
        out_outColor = color(out_outAlpha);
    }
    else
    {
        float st[2] = {in_uvCoord[0], in_uvCoord[1]};

        float dsdt[2] = {
            in_filter *
                (in_uvFilterSize[0] == UNDEFINED_UVFILTER
                    ? filterwidth(st[0])
                    : in_uvFilterSize[0]),
            in_filter *
                (in_uvFilterSize[1] == UNDEFINED_UVFILTER
                    ? filterwidth(st[1])
                    : in_uvFilterSize[1])};


        // The filter size factors seem to match Maya's result better.

        dsdt[0] += 2 * in_filterOffset;
        dsdt[1] += 2 * in_filterOffset;

        float filter_size = abs(max(dsdt[0], dsdt[1])), val = 0.0;

        filter_size = clamp(filter_size, 1.0e-8, 0.5);

        point coords = point(st[0], st[1], 0);

        if (in_implode)
        {
            implode_2d(in_implode, in_implodeCenter, coords[0], coords[1]);
        }

        coords *= in_frequency;  
             
        if (in_noiseType == 0)
        {
            if (in_inflection)
            {
                val = maya_turbulence(
                    coords,
                    in_time,
                    filter_size,
                    in_amplitude,
                    in_depthMax,
                    in_frequencyRatio,
                    in_ratio);
            }
            else
            {
                val = maya_fBm(
                    coords,
                    in_time,
                    filter_size,
                    in_amplitude,
                    in_depthMax,
                    in_frequencyRatio,
                    in_ratio);
            }
        }
        else if (in_noiseType == 1)
        {
            val = maya_billow_noise_2d(
                coords,
                in_amplitude,
                in_time,
                in_frequencyRatio,
                in_ratio,
                in_density,
                in_randomness,
                in_sizeRand,
                in_spottyness,
                in_falloff,
                in_depthMax,
                in_inflection);
        }
        else if (in_noiseType == 2)
        {
            val = maya_waves_noise(
                coords,
                in_amplitude,
                in_time,
                in_frequencyRatio,
                in_ratio,
                in_depthMax,
                in_numWaves,
                in_inflection);
        }
        else if (in_noiseType == 3)
        {
            coords += (vector) noise("uperlin", coords * 0.2) * 2.5;
            
            if (in_inflection)
            {
                val = maya_turbulence(
                    coords,
                    in_time,
                    filter_size,
                    in_amplitude,
                    in_depthMax,
                    in_frequencyRatio,
                    in_ratio);
            }
            else
            {
                val = maya_fBm(
                    coords,
                    in_time,
                    filter_size,
                    in_amplitude,
                    in_depthMax,
                    in_frequencyRatio,
                    in_ratio);
            }
        }
        else if (in_noiseType == 4)
        {
            if (in_inflection)
            {
                val = maya_turbulence(
                    coords,
                    in_time + time,
                    filter_size,
                    in_amplitude,
                    in_depthMax,
                    in_frequencyRatio,
                    in_ratio);
            }
            else
            {
                val = fBm(
                    coords,
                    in_time + time,
                    filter_size,
                    in_amplitude,
                    in_depthMax,
                    in_frequencyRatio,
                    in_ratio) * 0.5 + 0.5;
            }
        }
        else
        {
#ifdef DEBUG
            string shadername = "";
            getattribute("shader:shadername", shadername);

            warning("[WARNING]: invalid noise type in %s, %s:%i\n",
                    shadername, __FILE__, __LINE__);
#endif
        }

        out_outAlpha = clamp(val + in_threshold, 0.0, 1.0);
        out_outColor = color(out_outAlpha);

        maya_colorBalance(
            in_colorGain,
            in_colorOffset,
            in_defaultColor,
            in_alphaGain,
            in_alphaOffset,
            in_invert,
            in_alphaIsLuminance,
            out_outColor,
            out_outAlpha
            );
    }
}
