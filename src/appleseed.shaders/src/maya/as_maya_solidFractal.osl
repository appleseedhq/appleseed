
//
// This source file is part of appleseed.
// Visit http://appleseedhq.net/ for additional information and resources.
//
// This software is released under the MIT license.
//
// Copyright (c) 2017 Luis Barrancos, The appleseedhq Organization
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

// Ref: $MAYA_LOCATION/docs/Nodes/solidFractal.html

#include "appleseed/fractal/as_fractal_helpers.h"
#include "appleseed/fractal/as_noise_helpers.h"
#include "appleseed/math/as_math_helpers.h"
#include "appleseed/maya/as_maya_helpers.h"
#include "appleseed/maya/as_maya_transform_helpers.h"

shader as_maya_solidFractal
[[
    string as_maya_node_name = "solidFractal"
]]
(
    float in_threshold = 0.0
    [[
        string as_maya_attribute_name = "threshold",
        float min = 0.0,
        float softmax = 1.0,
        string label = "Threshold",
        string page = "Solid Fractal Attributes"
    ]],
    float in_amplitude = 1.0
    [[
        string as_maya_attribute_name = "amplitude",
        float min = 0.0,
        float softmax = 1.0,
        string label = "Amplitude",
        string page = "Solid Fractal Attributes"
    ]],
    float in_ratio = 0.707
    [[
        string as_maya_attribute_name = "ratio",
        float min = 0.0,
        float max = 1.0,
        string label = "Ratio",
        string page = "Solid Fractal Attributes"
    ]],
    float in_frequencyRatio = 2.0
    [[
        string as_maya_attribute_name = "frequencyRatio",
        float softmin = 1.0,
        float softmax = 10.0,
        string label = "Frequency Ratio",
        string page = "Solid Fractal Attributes"
    ]],
    vector in_ripples = vector(1)
    [[
        string as_maya_attribute_name = "ripples",
        string label = "Ripples",
        string page = "Solid Fractal Attributes",
        int divider = 1
    ]],
    float in_ripplesX = 1.0
    [[
        string as_maya_attribute_name = "ripplesX",
        string widget = "null"
    ]],
    float in_ripplesY = 1.0
    [[
        string as_maya_attribute_name = "ripplesY",
        string widget = "null"
    ]],
    float in_ripplesZ = 1.0
    [[
        string as_maya_attribute_name = "ripplesZ",
        string widget = "null"
    ]],
    float in_depth[2] = {0.0, 0.8}
    [[
        string as_maya_attribute_name = "depth",
        string label = "depth",
        string page = "Solid Fractal Attributes",
        int divider = 1
    ]],
    float in_bias = 0.0
    [[
        string as_maya_attribute_name = "bias",
        float softmin = -1.0,
        float softmax = 1.0,
        string label = "Bias",
        string page = "Solid Fractal Attributes"
    ]],
    int in_inflection = 0
    [[
        string as_maya_attribute_name = "inflection",
        string label = "Inflection",
        string page = "Solid Fractal Attributes",
        string widget = "checkBox"
    ]],
    int in_animated = 0
    [[
        string as_maya_attribute_name = "animated",
        string label = "Animated",
        string page = "Solid Fractal Attributes",
        string widget = "checkBox"
    ]],
    float in_time = 0.0
    [[
        string as_maya_attribute_name = "time",
        float min = 0.0,
        float max = 1.0,
        string label = "Time",
        string page = "Solid Fractal Attributes"
    ]],
    float in_timeRatio = 2.0
    [[
        string as_maya_attribute_name = "timeRatio",
        float softmin = 1.0,
        float softmax = 10.0,
        string label = "Time Ratio",
        string page = "Solid Fractal Attributes"
    ]],
    point in_refPointCamera = P
    [[
        string as_maya_attribute_name = "refPointCamera",
        string label = "Surface Point",
        string widget = "null"
    ]],
    matrix in_placementMatrix = matrix(1)
    [[
        string as_maya_attribute_name = "placementMatrix",
        string label = "Placement Matrix",
        string widget = "null"
    ]],

    MAYA_COLORBALANCE_PARAMETERS,
    MAYA_EFFECTS_PARAMETERS,
    MAYA_EFFECTS_3DTEX_PARAMETERS,

    output color out_outColor = color(0)
    [[
        string as_maya_attribute_name = "outColor",
        string as_maya_attribute_short_name = "oc",
        string label = "Output Color",
        string widget = "null"
    ]],
    output float out_outAlpha = 1.0
    [[
        string as_maya_attribute_name = "outAlpha",
        string as_maya_attribute_short_name = "oa",
        string label = "Output Alpha",
        string widget = "null"
    ]]
)
{
    matrix placement = (in_local)
        ? matrix("common", "object") * in_placementMatrix
        : in_placementMatrix;

    point Pp = transform(placement, in_refPointCamera);

    float box_blending = 0.0;

    int outside_box = outside_place3d_volume(
        Pp,
        in_wrap,
        in_blend,
        box_blending);

    if (outside_box)
    {
        out_outColor = in_defaultColor;
        out_outAlpha = maya_luminance(out_outColor);
        return;
    }
    else if (in_amplitude > 0.0 && in_bias > -1.0)
    {
        float filter_width = 0.0;

        if (in_filter > 0.0)
        {
            filter_width = in_filter * max(EPS, sqrt(area(Pp)));
            filter_width += in_filterOffset;
        }

        vector ripples = isconnected(in_ripples)
            ? in_ripples
            : vector(in_ripplesX, in_ripplesY, in_ripplesZ);

        filter_width *= max(ripples);
        float iterate;

        if (in_frequencyRatio == 2.0)
        {
            iterate = -log2(filter_width);
        }
        else if (in_frequencyRatio > 1.01)
        {
            iterate = -log(filter_width, in_frequencyRatio);
        }
        else
        {
            iterate = -log(filter_width, 1.01);
        }

        iterate = clamp(iterate, in_depth[0], in_depth[1]);

        int max_iteration = (int) floor(iterate);

        vector frequency = ripples * 0.5; // better match with .5 factor
        vector offset = vector(0);

        float anim_time = (in_animated) ? in_time + time : 0.0;
        float amplitude = in_amplitude, val, out_value = 0.0;
        float bias_plus1, bias_minus1, sqr_bias_plus1;

        if (in_bias != 0)
        {
            bias_plus1 = in_bias + 1;
            bias_minus1 = in_bias - 1;
            sqr_bias_plus1 = sqr(bias_plus1);
        }

        for (int i = 0; i < max_iteration + 1; ++i)
        {
            if (i == max_iteration)
            {
                amplitude *= iterate - max_iteration;
            }
            if (amplitude == 0.0) // < EPS ?
            {
                break;
            }

            offset += vector(0.1, 0.03, 0.13);

            val = filtered_snoise(
                Pp * frequency + offset,
                anim_time,
                filter_width);

            if (in_bias != 0)
            {
                int bias_sign = 1;

                if (val < 0.0)
                {
                    bias_sign = -1;
                    val = -val;
                }
                if (in_bias == 1.0)
                {
                    val = bias_sign;
                }
                else
                {
                    float tmp = sqr(bias_plus1 /
                        (1.0 - 2.0 * in_bias * val / bias_minus1));

                    val = bias_sign * (sqr_bias_plus1 - tmp) / (4 * in_bias);
                }
            }

            if (in_inflection)
            {
                val = abs(val) * 2.0 - 1.0;
            }

            out_value += amplitude * val;

            frequency *= in_frequencyRatio;
            anim_time *= in_timeRatio;
            amplitude *= in_ratio;
        }

        out_outAlpha = clamp(out_value * .5 + .5 + in_threshold, 0.0, 1.0);
        out_outColor = color(out_outAlpha);

        if (!in_wrap && in_blend)
        {
            out_outColor = mix(in_defaultColor, out_outColor, box_blending);
            out_outAlpha *= box_blending;
        }

        maya_colorBalance(
            in_colorGain,
            in_colorOffset,
            in_defaultColor,
            in_alphaGain,
            in_alphaOffset,
            in_invert,
            in_alphaIsLuminance,
            out_outColor,
            out_outAlpha
            );
    }
    else
    {
        out_outColor = color(0.5);
        out_outAlpha = 1.0;

        if (!in_wrap && in_blend)
        {
            out_outColor = mix(in_defaultColor, out_outColor, box_blending);
            out_outAlpha *= box_blending;
        }

        maya_colorBalance(
            in_colorGain,
            in_colorOffset,
            in_defaultColor,
            in_alphaGain,
            in_alphaOffset,
            in_invert,
            in_alphaIsLuminance,
            out_outColor,
            out_outAlpha
            );
    }
}
