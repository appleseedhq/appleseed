
//
// This source file is part of appleseed.
// Visit https://appleseedhq.net/ for additional information and resources.
//
// This software is released under the MIT license.
//
// Copyright (c) 2016-2018 Luis Barrancos, The appleseedhq Organization
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

// Ref: $MAYA_LOCATION/docs/Nodes/phongE.html

#include "appleseed/color/as_color_helpers.h"

shader as_maya_phongE
[[
    string as_node_name = "phongE"
]]
(
    color in_color = color(0.5)
    [[
        string as_maya_attribute_name = "color",
        string label = "Color",
        string page = "Common Material Attributes"
    ]],
    color in_transparency = color(0)
    [[
        string as_maya_attribute_name = "transparency",
        string label = "Transparency",
        string page = "Common Material Attributes"
    ]],
    color in_ambientColor = color(0)
    [[
        string as_maya_attribute_name = "ambientColor",
        string label = "Ambient Color",
        string page = "Common Material Attributes"
    ]],
    color in_incandescence = color(0)
    [[
        string as_maya_attribute_name = "incandescence",
        string label = "Incandescence Color",
        string page = "Common Material Attributes"
    ]],
    normal in_normalCamera = N
    [[
        string as_maya_attribute_name = "normalCamera",
        string label = "Bump Mapping Normal",
        string page = "Common Material Attributes"
    ]],
    float in_diffuse = 0.8
    [[
        string as_maya_attribute_name = "diffuse",
        string label = "Diffuse Intensity",
        string page = "Common Material Attributes"
    ]],
    float in_translucence = 0.0
    [[
        string as_maya_attribute_name = "translucence",
        string label = "Translucence",
        string page = "Common Material Attributes"
    ]],
    float in_translucenceDepth = 0.5
    [[
        string as_maya_attribute_name = "translucenceDepth",
        string label = "Translucence Depth",
        string page = "Common Material Attributes"
    ]],
    float in_translucenceFocus = 0.5
    [[
        string as_maya_attribute_name = "translucenceFocus",
        string label = "Translucence Focus",
        string page = "Common Material Attributes"
    ]],
    float in_roughness = 0.5
    [[
        string as_maya_attribute_name = "roughness",
        string label = "Roughness",
        string page = "Specular Shading"
    ]],
    float in_highlightSize = 0.5
    [[
        string as_maya_attribute_name = "highlightSize",
        string label = "Highlight Size",
        string page = "Specular Shading"
    ]],
    color in_whiteness = color(0.5)
    [[
        string as_maya_attribute_name = "whiteness",
        string label = "Whiteness",
        string page = "Specular Shading"
    ]],
    color in_specularColor = color(0.5)
    [[
        string as_maya_attribute_name = "specularColor",
        string label = "Specular Color",
        string page = "Specular Shading"
    ]],
    float in_reflectivity = 0.5
    [[
        string as_maya_attribute_name = "reflectivity",
        string label = "Reflectivity",
        string page = "Specular Shading"
    ]],
    color in_reflectedColor = color(0)
    [[
        string as_maya_attribute_name = "reflectedColor",
        string label = "Reflected Color",
        string page = "Specular Shading"
    ]],
    int in_matteOpacityMode = 2
    [[
        string as_maya_attribute_name = "matteOpacityMode",
        string label = "Matte Opacity Mode",
        string widget = "mapper",
        string options = "Black Hole:0|Solid Matte:1|Opacity Gain:2",
        string page = "Matte Opacity"
    ]],
    float in_matteOpacity = 1.0
    [[
        string as_maya_attribute_name = "matteOpacity",
        string label = "Matte Opacity",
        string page = "Matte Opacity"
    ]],
    int in_refractions = 0
    [[
        string as_maya_attribute_name = "refractions",
        string label = "Refractions",
        string widget = "checkBox",
        string page = "Raytrace Options"
    ]],
    float in_refractiveIndex = 1.0
    [[
        string as_maya_attribute_name = "refractiveIndex",
        string label = "Refractive Index",
        float min = 0.010,
        float max = 3.0,
        float softmin = 0.010,
        float softmax = 3.0,
        string page = "Raytrace Options"
    ]],
    int in_refractionLimit = 1
    [[
        string as_maya_attribute_name = "refractionLimit",
        string label = "Refraction Limit",
        string widget = "intslider",
        int min = 0,
        int max = 10,
        int softmin = 0,
        int softmax = 10,
        string page = "Raytrace Options"
    ]],
    float in_shadowAttenuation = 0.5
    [[
        string as_maya_attribute_name = "shadowAttenuation",
        string label = "Shadow Attenuation",
        string page = "Raytrace Options"
    ]],

    int in_hideSource = 0
    [[
        string as_maya_attribute_name = "hideSource",
        string label = "Hide Glow Source",
        string widget = "checkBox",
        string page = "Special Effects"
    ]],
    float in_glowIntensity = 0.0
    [[
        string as_maya_attribute_name = "glowIntensity",
        string label = "Glow Intensity",
        string page = "Special Effects"
    ]],

    output closure color out_outColor = 0
    [[
        string as_maya_attribute_name = "outColor",
        string label = "Output Color",
        string widget = "null"
    ]],
    output closure color out_outTransparency = 0
    [[
        string as_maya_attribute_name = "outTransparency",
        string label = "Output Transparency",
        string widget = "null"
    ]],
    output closure color out_outGlowColor = 0
    [[
        string as_maya_attribute_name = "outGlowColor",
        string label = "Output Glow Color",
        string widget = "null"
    ]],
    output closure color out_outMatteOpacity = 0
    [[
        string as_maya_attribute_name = "outMatteOpacity",
        string label = "Output Matte Opacity",
        string widget = "null"
    ]]
)
{
    int is_transparent = max(in_transparency) > 0.0 ? 1 : 0;

    if (raytype("transparency"))
    {
        if (is_transparent)
        {
            out_outTransparency = in_transparency * transparent();
            out_outColor = out_outTransparency;
        }

        // We only support Maya's mode 0. For everything else, there's
        // as_matte() and its shader pass-through.
        if (in_matteOpacityMode == 0)
        {
            out_outMatteOpacity = as_matte(color(0), 0.0);
            out_outColor += out_outMatteOpacity;
        }
        return;
    }

    if (raytype("shadow"))
    {
        // Shadow attenuation, 0=constant, 1=fake caustics.
        if (in_refractions && is_transparent)
        {
            out_outColor = mix(
                in_transparency,
                abs(dot(I, normalize(in_normalCamera))),
                in_shadowAttenuation) * transparent();
        }
        return;
    }

    color opacity = 1.0 - in_transparency;

    if (raytype("light") && max(in_incandescence) > 0.0 && opacity != 0)
    {
        out_outColor += opacity * in_incandescence * emission();
        return;
    }

    normal Nn = normalize(in_normalCamera);

    if (max(in_color) > 0.0 && opacity != 0)
    {
        out_outColor += opacity * in_diffuse * in_color * diffuse(Nn);
        out_outColor += opacity * in_translucence * in_color *
                        translucent(Nn);
    }

    if (in_refractions && is_transparent)
    {
        int ray_depth = 0;
        int status = getattribute("path:ray_depth", ray_depth);

        if (status && ray_depth <= in_refractionLimit)
        {
            // Maya associates transparency with the BTDF
            out_outColor += in_transparency *
                refraction(Nn, in_refractiveIndex);
        }
    }

    if (max(in_specularColor) > 0.0 && opacity != 0)
    {
        color specular_color = in_specularColor *
            mix(in_color, color(1), in_whiteness);

        // Parameter "highlight size" controls the tails of the specular
        // highlight (i.e: gamma in GTR MDF).

        out_outColor += opacity * specular_color *
            as_glossy(
                Nn,
                vector(0),
                in_roughness,
                0.0,
                0.0);
    }
}
