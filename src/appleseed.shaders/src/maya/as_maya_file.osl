
//
// This source file is part of appleseed.
// Visit http://appleseedhq.net/ for additional information and resources.
//
// This software is released under the MIT license.
//
// Copyright (c) 2016 Luis Barrancos, The appleseedhq Organization
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

// Ref: $MAYA_LOCATION/docs/Nodes/file.html

#include "appleseed/maya/as_maya_helpers.h"

shader as_maya_file
[[
    string maya_node_name = "file",
    string maya_classification = "texture/2d"
]]
(
    string in_fileTextureName = ""
    [[
        string maya_attribute_name = "fileTextureName",
        string maya_attribute_type = "string",
        string label = "Image File",
        string widget = "filename"
    ]],
    int in_disableFileLoad = 0
    [[
        string maya_attribute_name = "disableFileLoad",
        string maya_attribute_type = "bool",
        string label = "Disable File Load",
        string widget = "checkBox"
    ]],
    int in_useFrameExtension = 0
    [[
        string maya_attribute_name = "useFrameExtension",
        string maya_attribute_type = "bool",
        string label = "Use Frame Extension",
        string widget = "checkBox"
    ]],
    int in_frameExtension = 1
    [[
        string maya_attribute_name = "frameExtension",
        string maya_attribute_type = "integer",
        string label = "Frame Extension",
        string widget = "number",
        int slider = 0
    ]],
    int in_frameOffset = 0
    [[
        string maya_attribute_name = "frameOffset",
        string maya_attribute_type = "integer",
        string label = "Frame Offset",
        string widget = "number",
        int slider = 0
    ]],
    int in_filterType = 3
    [[
        string maya_attribute_name = "filterType",
        string maya_attribute_type = "enum",
        string label = "Filter Type",
        string widget = "mapper",
        string options = "None:0|Mip Map:1|Box:2|Quadratic:3|Quartic:4|Gaussian:5"
    ]],
    float in_filterWidth = 0.707
    [[
        string maya_attribute_name = "filterWidth",
        string maya_attribute_type = "float",
        string label = "Filter Width"
    ]],
    int in_preFilter = 0
    [[
        string maya_attribute_name = "preFilter",
        string maya_attribute_type = "bool",
        string label = "Pre-Filter",
        string widget = "checkBox"
    ]],
    float in_preFilterRadius = 2.0
    [[
        string maya_attribute_name = "preFilterRadius",
        string maya_attribute_type = "float",
        string label = "Pre-Filter Radius",
        int slider = 1,
        int slidermin = 1,
        int slidermax = 10,
        int digits = 4
    ]],
    int in_useMaximumRes = 0
    [[
        string maya_attribute_name = "useMaximumRes",
        string maya_attribute_type = "bool",
        string label = "Use Maximum Res",
        string widget = "checkBox"
    ]],
    float in_ptexFilterBlur = 0.0
    [[
        string maya_attribute_name = "ptexFilterBlur",
        string maya_attribute_type = "float",
        string label = "PTex Filter Blur",
        int slider = 1
    ]],
    float in_ptexFilterWidth = 0.0
    [[
        string maya_attribute_name = "ptexFilterWidth",
        string maya_attribute_type = "float",
        string label = "PTex Filter Width",
        int slider = 1
    ]],
    int in_ptexFilterType = 3
    [[
        string maya_attribute_name = "ptexFilterType",
        string maya_attribute_type = "enum",
        string label = "PTex Filter Type",
        string widget = "mapper",
        string options =
        "Point:0|Bilinear:1|Box:2|Gaussian:3|Bicubic:4|B-Spline:5|Catmull-Rom:6|Mitchell:7"
    ]],
    int in_ptexFilterInterpolateLevels = 0
    [[
        string maya_attribute_name = "ptexFilterInterpolateLevels",
        string maya_attribute_type = "bool",
        string label = "PTex Filter Interpolate Levels",
        string widget = "checkBox"
    ]],

    float in_exposure = 0.0
    [[
        string maya_attribute_name = "exposure",
        string maya_attribute_type = "float",
        string label = "Exposure"
    ]],

    MAYA_COLORBALANCE_PARAMETERS,
    MAYA_EFFECTS_PARAMETERS,
    MAYA_UV_PARAMETERS,

    output color out_outColor = color(0)
    [[
        string maya_attribute_name = "outColor",
        string maya_attribute_type = "vector",
        string label = "Output Color",
        string widget = "null"
    ]],
    output float out_outAlpha = 1.0
    [[
        string maya_attribute_name = "outAlpha",
        string maya_attribute_type = "float",
        string label = "Output File Alpha",
        string widget = "null"
    ]],
    output color out_outTransparency = color(0)
    [[
        string maya_attribute_name = "outTransparency",
        string maya_attribute_type = "vector",
        string label = "Output Transparency",
        string widget = "null"
    ]],
    output int out_fileHasAlpha = 0
    [[
        string maya_attribute_name = "fileHasAlpha",
        string maya_attribute_type = "bool",
        string label = "File Has Alpha",
        string widget = "null"
    ]],
    output int out_outSize[2] = {0, 0}
    [[
        string maya_attribute_name ="outSize",
        string maya_attribute_type = "int[]",
        string label = "File Texture Size",
        string widget = "null"
    ]]
)
{
    if (in_disableFileLoad || in_fileTextureName == "")
    {
        out_outColor = in_defaultColor;

        maya_colorBalance(
            in_colorGain,
            in_colorOffset,
            in_defaultColor,
            in_alphaGain,
            in_alphaOffset,
            in_invert,
            in_alphaIsLuminance,
            out_outColor,
            out_outAlpha);

        exit();
    }

    // UV frame coverage is meaningless in Ptex.
    // No Ptex queries supported in gettextureinfo(), check extension instead.

    if (endswith(in_fileTextureName, ".ptx") ||
        endswith(in_fileTextureName, ".ptex")||
        endswith(in_fileTextureName, ".penv"))
    {
#if 0
        int facendx = 0;
        int status = getattribute("object:faceindex", facendx);

        if (!status)
        {
#ifdef DEBUG
            string shadername = "";
            getattribute("shader:shadername", shadername);

            error("[WARNING]: No face indices found for Ptex in %s, %s:%i\n",
                    shadername, __FILE__, __LINE__);
#endif
            exit();
        }

        // No supported Ptex queries in gettextureinfo(), assume alpha present.

        float ptex_alpha = 1;

        // Placeholder for what could be support for Ptex in OSL texture(),
        // which extra parameters being "ptexfilter".

        float fw = (in_ptexFilterType == 0) ? 0 : in_ptexFilterWidth;

        out_outColor =
            texture(
                in_fileTextureName,
                0,
                facendx,
                "blur", in_ptexFilterBlur,
                "width", fw,
                "missingalpha", 1,
                "alpha", ptex_alpha,
                "ptexfilter", in_ptexFilterType,
                "ptexinterpolate", in_ptexFilterInterpolateLevels
                );
#endif
    }
    else if (in_uvCoord[0] == OUTSIDE_UVFRAME ||
             in_uvCoord[1] == OUTSIDE_UVFRAME)
    {
        out_outColor = in_defaultColor;
        out_outAlpha = maya_luminance(in_defaultColor);
    }
    else
    {
        int channels = 0;
        int size[2] = {0,0};

        gettextureinfo(in_fileTextureName, "channels", channels);
        gettextureinfo(in_fileTextureName, "resolution", size);

        out_outSize[0] = size[0];
        out_outSize[1] = size[1];

        out_fileHasAlpha = (channels > 3) ? 1 : 0;

        float st[2] = {in_uvCoord[0], in_uvCoord[1]}, dsdt[4];

        string filter = "";

        if (in_filterType)
        {
            dsdt[0] = Dx(st[0]);
            dsdt[1] = Dx(st[1]);
            dsdt[2] = Dy(st[0]);
            dsdt[3] = Dy(st[1]);

            // Starting point for filter choice (rough) matching.

            if (in_filterType == 1)
            {
                filter = "linear";
            }
            else if (in_filterType == 2)
            {
                filter = "closest";
            }
            else if (in_filterType == 3)
            {
                filter = "cubic";
            }
            else if (in_filterType == 4)
            {
                filter = "smartcubic";
            }
            else if (in_filterType == 5)
            {
                filter = "smartcubic";
            }
            else
            {
                filter = "closest";
            }
        }
        else
        {
            dsdt[0] = 0;
            dsdt[1] = 0;
            dsdt[2] = 0;
            dsdt[3] = 0;
            
            filter = "closest";
        }

        // Disabled filtering can still be overriden by filter radius.

        if (in_preFilter)
        {
            float fw = in_filterWidth * in_preFilterRadius;

            dsdt[0] = fw;
            dsdt[1] = fw;
            dsdt[2] = fw;
            dsdt[3] = fw;
        }

        if (in_filterType == 1 && in_useMaximumRes)
        {
            out_outColor =
                texture(
                    in_fileTextureName,
                    st[0], st[1],
                    dsdt[0], dsdt[1], dsdt[2], dsdt[3],
                    "blur", in_filterOffset,
                    "width", in_filter,
                    "wrap", "periodic",
                    "subimage", 0,
                    "missingcolor", in_defaultColor,
                    "missingalpha", 1,
                    "alpha", out_outAlpha,
                    "interp", filter);
        }
        else
        {
            out_outColor =
                texture(
                    in_fileTextureName,
                    st[0], st[1],
                    dsdt[0], dsdt[1], dsdt[2], dsdt[3],
                    "blur", in_filterOffset,
                    "width", in_filter,
                    "wrap", "periodic",
                    "missingcolor", in_defaultColor,
                    "missingalpha", 1,
                    "alpha", out_outAlpha,
                    "interp", filter);
        }
    }

    if (in_exposure)
    {
        out_outColor *= pow(2, in_exposure);
    }

    maya_colorBalance(
        in_colorGain,
        in_colorOffset,
        in_defaultColor,
        in_alphaGain,
        in_alphaOffset,
        in_invert,
        in_alphaIsLuminance,
        out_outColor,
        out_outAlpha
        );
}
