
//
// This source file is part of appleseed.
// Visit https://appleseedhq.net/ for additional information and resources.
//
// This software is released under the MIT license.
//
// Copyright (c) 2017-2018 Sergo Pogosyan, The appleseedhq Organization
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

shader as_max_uv_transform
(
    float in_coordU = u,
    float in_coordV = v,

    float in_offsetU = 0.0,
    float in_offsetV = 0.0,

    float in_tilingU = 1.0,
    float in_tilingV = 1.0,

    float in_rotateW = 0.0,

    int in_mirrorU = 0,
    int in_mirrorV = 0,

    int in_wrapU = 0,
    int in_wrapV = 0,

    float in_cropW = 1.0,
    float in_cropH = 1.0,
    float in_cropU = 0.0,
    float in_cropV = 0.0,

    string in_crop_mode = "off",

    output float out_U = 0.0,
    output float out_V = 0.0,

    output float out_outUV[2] = {0.0, 0.0},
    output float out_outUvFilterSize[2] = {-1, -1},
)
{
    float out_u = in_coordU;
    float out_v = in_coordV;

    // Apply offset before rotation
    out_u -= in_offsetU;
    out_v -= in_offsetV;

    if (in_rotateW != 0.0)
    {
        point rot = rotate(
            point(out_u, out_v, 0.0),
            radians(in_rotateW),
            point(0.0, 0.0, 0.0),
            point(0.0, 0.0, 1.0));

        out_u = rot[0];
        out_v = rot[1];
    }

    // Apply tiling without considering cropping
    out_u = (out_u * in_tilingU);
    out_v = (out_v * in_tilingV);

    // Apply mirroring.
    if (in_mirrorU)
    {
        out_u *= 2;
        if (mod(out_u, 2) >= 1.0)
        {
            out_u = 1 - out_u;
        }
    }
    if (in_mirrorV)
    {
        out_v *= 2;
        if (mod(out_v, 2) >= 1.0)
        {
            out_v = 1 - out_v;
        }
    }

    // "Manual" periodic tiling required for correct cropping.
    out_u = fmod(out_u, 1.0);
    out_v = fmod(out_v, 1.0);

    // Avoid negative values
    if (out_u < 0)
        out_u = 1 + out_u;
    if (out_v < 0)
        out_v = 1 + out_v;

    // Apply cropping.
    if (in_crop_mode == "crop")
    {
        out_u *= in_cropW;
        out_u += in_cropU;

        out_v *= in_cropH;
        out_v -= in_cropV;
        out_v = out_v + (1 - in_cropH); // Looks like V=0 is bottom left corner, so had to move it to the top to match 3ds max coords
    }

    out_outUvFilterSize[0] = filterwidth(out_u);
    out_outUvFilterSize[1] = filterwidth(out_v);

    out_outUV[0] = out_u;
    out_outUV[1] = out_v;

    out_U = out_u;
    out_V = out_v;
}
