
//
// This source file is part of appleseed.
// Visit https://appleseedhq.net/ for additional information and resources.
//
// This software is released under the MIT license.
//
// Copyright (c) 2017-2018 Sergo Pogosyan, The appleseedhq Organization
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

#include "appleseed/material/as_material_helpers.h"

shader as_max_sss_material
(
    // BSSRDF part.
    float                SSSReflectance = 0.8,
    color                SSSColor = 1.0,
    string               Profile = "normalized_diffusion",
    color                Radius = 1.0,
    float                RadiusScale = 0.1,
    float                Ior = 1.3,
    int                  MaxSubsurfaceRayDepth = 1,

    // BRDF part.
    float                SpecularReflectance = 0.8,
    color                SpecularColor = 1.0,
    string               Distribution = "ggx"
    [[
        string widget = "null",
        int as_deprecated = 1,
    ]],
    float                Roughness = 0.1,
    float                RoughnessDepthScale = 1.0,
    float                Anisotropic = 0.0,

    vector               Normal = N,
    vector               Tn = 0,

    output closure color ClosureOut = 0
)
{
    int RayDepth;
    getattribute("path:ray_depth", RayDepth);
    closure color BSSRDF;
    closure color BRDF;

    if (RayDepth <= MaxSubsurfaceRayDepth)
    {
        BSSRDF = SSSReflectance * as_subsurface(
            Profile,
            Normal,
            SSSColor,
            Radius * RadiusScale,
            Ior);
    }
    else
        BSSRDF = SSSReflectance * SSSColor * diffuse(Normal);

     BRDF = SpecularColor * SpecularReflectance * as_glossy(
        Normal,
        Tn,
        microfacet_roughness(Roughness, RoughnessDepthScale),
        Anisotropic,
        Ior);

    ClosureOut = BSSRDF + BRDF;
}
