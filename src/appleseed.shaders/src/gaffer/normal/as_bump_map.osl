
//
// This source file is part of appleseed.
// Visit http://appleseedhq.net/ for additional information and resources.
//
// This software is released under the MIT license.
//
// Copyright (c) 2014-2017 The masked shader writer, The appleseedhq Organization
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

shader as_bump_map
(
    vector        Position = P,
    vector        Normal = N,
    vector        Tn = 0
    [[
        string help = "Tangent",
        string label = "Tangent",
        int    lockgeom = 0
    ]],
    vector        Bn = 0
    [[
        string help = "Bitangent",
        string label = "Bitangent",
        int    lockgeom = 0
    ]],
    string        Method = "classic"
    [[
        string help = "Bump mapping algorithm to use.",
        string widget = "popup",
        string options = "classic|surface_gradients"
    ]],
    float         Height = 0,
    float         Amount = 1
    [[
        float  min = 0
    ]],
    int           PreventNormalFlip = 1
    [[
        string help = "Flip NormalOut if not in the same hemisphere as Normal.",
        string widget = "checkbox"
    ]],
    output vector NormalOut = Normal
)
{
    if (Amount == 0.0)
        return;

    vector dpdx = Dx(Position);
    vector dpdy = Dy(Position);

    float dhx = Dx(Height) * Amount;
    float dhy = Dy(Height) * Amount;

    if (Method == "classic")
    {
        //
        // Classic Blinn algorithm.
        //
        // Reference:
        //
        //   Physically Based Rendering, 2nd edition, page 490.
        //

        vector new_tn = Tn * length(dpdx) + Normal * dhx;
        vector new_bn = Bn * length(dpdy) + Normal * dhy;
        NormalOut = cross(new_bn, new_tn);
    }
    else
    {
        //
        // Surface gradients.
        //
        // Reference:
        //
        //   Bump Mapping Unparametrized Surfaces on the GPU
        //   Morten S. Mikkelsen
        //   https://dl.dropbox.com/u/55891920/papers/mm_sfgrad_bump.pdf
        //

        int has_diffs;
        int get_attr_ok = getattribute("path:ray_has_differentials", has_diffs);

        // dPdx and dPdy are not always defined.
        if (get_attr_ok && has_diffs)
        {
            vector rx = cross(dpdy, Normal);
            vector ry = cross(Normal, dpdx);

            float det = dot(dpdx, rx);
            vector surf_grad = sign(det) * (dhx * rx + dhy * ry);

            NormalOut = abs(det) * Normal - surf_grad;
        }
    }

    NormalOut = normalize(NormalOut);

    // Place the perturbed normal in the same hemisphere
    // as the original normal.
    if (PreventNormalFlip && dot(Normal, NormalOut) < 0.0)
        NormalOut = -NormalOut;
}
