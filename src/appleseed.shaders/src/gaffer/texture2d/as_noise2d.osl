
//
// This source file is part of appleseed.
// Visit http://appleseedhq.net/ for additional information and resources.
//
// This software is released under the MIT license.
//
// Copyright (c) 2015-2017 The masked shader writer, The appleseedhq Organization
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

shader as_noise2d
(
    float         U = u,
    float         V = v,
    string        NoiseType = "perlin"
    [[
        string widget = "popup",
        string options = "perlin|uperlin|cell|simplex|usimplex|gabor"
    ]],
    int           Periodic = 0
    [[
        string widget = "checkBox"
    ]],
    vector        Period = 1,
    vector        Frequency = 1,
    vector        Offset = 0,
    int           AnisotropyMode = 0
    [[
        string widget = "mapper",
        string options = "Isotropic:0|Anisotropic:1|Hybrid:2"
    ]],
    vector        Direction = 0,
    float         Bandwidth = 1.0,
    float         Impulses = 16,
    output float  FloatOut = 0,
    output vector VectorOut = 0,
    output color  ColorOut = 0
)
{
    float uu = (U * Frequency[0]) + Offset[0];
    float vv = (V * Frequency[1]) + Offset[1];

    if (Periodic)
    {
        FloatOut = pnoise(
            NoiseType,
            uu,
            vv,
            Period[0],
            Period[1],
            "anisotropic", AnisotropyMode,
            "direction", Direction,
            "bandwidth", Bandwidth,
            "impulses", Impulses);

        VectorOut = pnoise(
            NoiseType,
            uu,
            vv,
            Period[0],
            Period[1],
            "anisotropic", AnisotropyMode,
            "direction", Direction,
            "bandwidth", Bandwidth,
            "impulses", Impulses);
    }
    else
    {
        FloatOut = noise(
            NoiseType,
            uu,
            vv,
            "anisotropic", AnisotropyMode,
            "direction", Direction,
            "bandwidth", Bandwidth,
            "impulses", Impulses);

        VectorOut = noise(
            NoiseType,
            uu,
            vv,
            "anisotropic", AnisotropyMode,
            "direction", Direction,
            "bandwidth", Bandwidth,
            "impulses", Impulses);
    }

    ColorOut = color(VectorOut);
}
