
//
// This source file is part of appleseed.
// Visit http://appleseedhq.net/ for additional information and resources.
//
// This software is released under the MIT license.
//
// Copyright (c) 2014-2017 The masked shader writer, The appleseedhq Organization
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

#include "appleseed/gaffer/udim.h"

shader as_color_texture
(
    float        U = u,
    float        V = v,
    string       Filename = ""
    [[
        string widget = "filename"
    ]],
    string       UDIM = "off"
    [[
        string widget = "popup",
        string options = "off|mari"
    ]],
    string       UDIMPrefix = ".tx",
    string       UWrap = "periodic"
    [[
        string widget = "popup",
        string options = "default|black|periodic|clamp|mirror"
    ]],
    string       VWrap = "periodic"
    [[
        string widget = "popup",
        string options = "default|black|periodic|clamp|mirror"
    ]],
    string       Filter = "smartcubic"
    [[
        string widget = "popup",
        string options = "smartcubic|cubic|linear|closest",
        int    divider = 1
    ]],
    float        UWidth = 1.0,
    float        VWidth = 1.0,
    float        UBlur = 0.0,
    float        VBlur = 0.0
    [[
        int    divider = 1
    ]],
    int          FirstChannel = 0,
    float        Fill = 0.0,
    output color ColorOut = 0,
    output float AlphaOut = 1.0
)
{
    string mari_filenames[100] = {TEN_MARI_UDIM_ROWS};

    string tx_filename = "";
    float uu;
    float vv;

    if (UDIM == "mari")
    {
        int utile  = int(U);
        int vtile  = int(V);
        int offset = 10 * vtile + utile;
        tx_filename = mari_filenames[offset];
        uu = U - utile;
        vv = V - vtile;
    }
    else
    {
        tx_filename = Filename;
        uu = U;
        vv = V;
    }

    ColorOut = texture(
        tx_filename,
        uu,
        vv,
        "swidth", UWidth,
        "twidth", VWidth,
        "sblur", UBlur,
        "tblur", VBlur,
        "swrap", UWrap,
        "twrap", VWrap,
        "firstchannel", FirstChannel,
        "fill", Fill,
        "alpha", AlphaOut);
}
