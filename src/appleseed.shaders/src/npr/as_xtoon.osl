
//
// This source file is part of appleseed.
// Visit https://appleseedhq.net/ for additional information and resources.
//
// This software is released under the MIT license.
//
// Copyright (c) 2018 Esteban Tovagliari, The appleseedhq Organization
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

#include "appleseed/color/as_color_blend_modes.h"

//
// Reference:
//
//   X-Toon: An extended toon shader.
//   http://hal.inria.fr/inria-00362888/PDF/x-toon.pdf
//

shader as_xtoon
[[
    string help = "XToon material node.",
    string icon = "asDisneyMaterial.png",

    string as_maya_node_name = "asXToon",
    string as_maya_classification = "drawdb/shader/surface:rendernode/appleseed/surface:shader/surface:swatch/AppleseedRenderSwatch",
    int as_maya_type_id = 0x00127a02,

    string as_blender_node_name = "asXToon",
    string as_blender_category = "shader"
]]
(
    //
    // Shading.
    //

    color in_color = color(0.5)
    [[
        string as_maya_attribute_name = "color",
        string as_maya_attribute_short_name = "c",
        string label = "Surface Color",
        string page = "Shading"
    ]],
    float in_diffuse_weight = 1.0
    [[
        string as_maya_attribute_name = "diffuseWeight",
        float min = 0.0,
        float max = 1.0,
        string label = "Diffuse Weight",
        string page = "Shading",
        int divider = 1
    ]],
    float in_specular_weight = 1.0
    [[
        string as_maya_attribute_name = "specularWeight",
        float min = 0.0,
        float max = 1.0,
        string label = "Specular Weight",
        string page = "Shading"
    ]],
    float in_specular_roughness = 0.1
    [[
        string as_maya_attribute_name = "specularRoughness",
        float min = 0.0,
        float max = 1.0,
        string label = "Specular Roughness",
        string page = "Shading"
    ]],
    float in_metallic_amount = 0.0
    [[
        string as_maya_attribute_name = "metallicAmount",
        string as_maya_attribute_short_name = "ma",
        float min = 0.0,
        float max = 1.0,
        string label = "Metallicness",
        string page = "Shading"
    ]],

    //
    // XToon Remapping
    //

    string in_xtoon_tex = ""
    [[
        string as_maya_attribute_name = "xtoonTex",
        string label = "Texture",
        string page = "XToon",
        string widget = "filename",
        int as_maya_attribute_connectable = 0,
        int as_maya_attribute_keyable = 0,
        int as_maya_attribute_hidden = 1,
        int as_blender_input_socket = 0,
        int gafferNoduleLayoutVisible = 0
    ]],
    string in_xtoon_detail_mode = "None"
    [[
        string as_maya_attribute_name = "xtoonDetailMode",
        string widget = "popup",
        string options = "None|Depth|Orientation|Texture",
        int as_maya_attribute_connectable = 0,
        int as_maya_attribute_keyable = 0,
        int as_maya_attribute_hidden = 1,
        int as_blender_input_socket = 0,
        int gafferNoduleLayoutVisible = 0,
        string label = "Detail Mode",
        string page = "XToon",
    ]],
    float in_min_depth = 0.0
    [[
        string as_maya_attribute_name = "xtoonDetailZmin",
        float min = 0.0,
        string label = "Min Depth",
        string page = "XToon"
    ]],
    float in_max_depth = 100.0
    [[
        string as_maya_attribute_name = "xtoonDetailZmax",
        float min = 0.0,
        string label = "Max Depth",
        string page = "XToon"
    ]],
    float in_orientation_magnitude = 1.0
    [[
        string as_maya_attribute_name = "xtoonDetailOrientMag",
        float min = 1.0,
        string label = "Orientation Magnitude",
        string page = "XToon"
    ]],
    float in_texture_detail = 1.0
    [[
        string as_maya_attribute_name = "xtoonTexDetail",
        float min = 1.0,
        string label = "Texture Detail",
        string page = "XToon"
    ]],
    string in_xtoon_blend_mode = "Replace"
    [[
        string as_maya_attribute_name = "xtoonBlendMode",
        string widget = "popup",
        string options = "Source|Replace|Darken|Multiply|Color Burn|Linear Burn|Lighten|Screen|Color Dodge|Linear Dodge|Overlay|Soft Light|Hard Light|Vivid Light|Linear Light|Pin Light|Difference|Exclusion|Subtract|Divide|Hue|Saturation|Color|Luminosity",
        int as_maya_attribute_connectable = 0,
        int as_maya_attribute_keyable = 0,
        int as_maya_attribute_hidden = 1,
        int as_blender_input_socket = 0,
        int gafferNoduleLayoutVisible = 0,
        string label = "Overlay Blend",
        string page = "XToon",
    ]],

    //
    // Contours
    //

    color in_contour_color = color(0.0)
    [[
        string as_maya_attribute_name = "contourColor",
        string label = "Color",
        string page = "Contours"
    ]],
    float in_contour_opacity = 1.0
    [[
        string as_maya_attribute_name = "contourOpacity",
        float min = 0.0,
        float max = 1.0,
        string label = "Opacity",
        string page = "Contours"
    ]],
    float in_contour_width = 1.0
    [[
        string as_maya_attribute_name = "contourWidth",
        float min = 0.0,
        string label = "Width",
        string page = "Contours"
    ]],
    int in_contour_object = 0
    [[
        string as_maya_attribute_name = "contourObj",
        string widget = "checkBox",
        string label = "Object",
        string page = "Contours",
        int as_maya_attribute_connectable = 0,
        int as_maya_attribute_keyable = 0,
        int as_maya_attribute_hidden = 1
    ]],
    int in_contour_material = 0
    [[
        string as_maya_attribute_name = "contourMtl",
        string widget = "checkBox",
        string label = "Material",
        string page = "Contours",
        int as_maya_attribute_connectable = 0,
        int as_maya_attribute_keyable = 0,
        int as_maya_attribute_hidden = 1
    ]],
    int in_contour_occlusion = 0
    [[
        string as_maya_attribute_name = "contourOcc",
        string widget = "checkBox",
        string label = "Occlusion",
        string page = "Contours",
        int as_maya_attribute_connectable = 0,
        int as_maya_attribute_keyable = 0,
        int as_maya_attribute_hidden = 1
    ]],
    int in_contour_creases = 0
    [[
        string as_maya_attribute_name = "contourCrease",
        string widget = "checkBox",
        string label = "Creases",
        string page = "Contours",
        int as_maya_attribute_connectable = 0,
        int as_maya_attribute_keyable = 0,
        int as_maya_attribute_hidden = 1
    ]],
    float in_occlusion_threshold = 0.1
    [[
        string as_maya_attribute_name = "occlusionThreshold",
        float min = 0.0,
        string label = "Occlusion threshold",
        string page = "Contours"
    ]],
    float in_crease_threshold = 15
    [[
        string as_maya_attribute_name = "creaseThreshold",
        float min = 0.0,
        string label = "Crease threshold",
        string page = "Contours"
    ]],

    //
    // Output
    //

    output closure color out_outColor = 0
    [[
        string as_maya_attribute_name = "outColor",
        string as_maya_attribute_short_name = "oc",
        string widget = "null"
    ]],
    output closure color out_outTransparency = 0
    [[
        string as_maya_attribute_name = "outTransparency",
        string as_maya_attribute_short_name = "ot",
        string widget = "null"
    ]]
)
{
    if (raytype("npr"))
    {
        color diffuse_shading;
        getattribute("surface_shader:diffuse", diffuse_shading);

        color glossy_shading;
        getattribute("surface_shader:glossy", glossy_shading);

        color shading = diffuse_shading + glossy_shading;

        if (in_xtoon_tex != "" && in_xtoon_blend_mode != "Source")
        {
            // Shading Axis.
            float s = clamp(luminance(shading), 0.0, 1.0);

            // Detail Axis.
            float t;

            if (in_xtoon_detail_mode == "Depth")
            {
                float zmin = max(in_min_depth, 0.0001);
                float zmax = max(in_max_depth, zmin);

                float z;
                getattribute("path:ray_length", z);
                z = clamp(z, zmin, zmax);

                t = 1.0 - log(z / zmin) / log(zmax / zmin);
            }
            else if (in_xtoon_detail_mode == "Orientation")
                t = pow(abs(dot(N, I)), in_orientation_magnitude);
            else if (in_xtoon_detail_mode == "Texture")
                t = in_texture_detail;
            else if (in_xtoon_detail_mode == "None")
                t = 0.0;

            t = clamp(t, 0.0, 1.0);
            color remapped_shading = (color) texture(
                in_xtoon_tex,
                s,
                t,
                "swrap", "clamp",
                "twrap", "clamp");

            if (in_xtoon_blend_mode == "Replace")
                shading = remapped_shading;
            else
                shading = blend_color(in_xtoon_blend_mode, shading, remapped_shading);
        }

        // Write shading result.
        out_outColor = shading * as_npr_shading();

        // Contours
        out_outColor += as_npr_contour(
            in_contour_color,
            in_contour_opacity,
            in_contour_width,
            in_contour_object,
            in_contour_material,
            in_contour_occlusion,
            in_occlusion_threshold,
            in_contour_creases,
            in_crease_threshold);
    }
    else
    {
        // Shading.

        vector T = vector(0);
        float anisotropy = 0.0;

        closure color plastic =
            (in_color * in_diffuse_weight * diffuse(N)) +
            (in_specular_weight * as_glossy("beckmann", N, T, in_specular_roughness, 0.0, 0.0, 1.5));

        closure color metal = as_metal("beckmann", N, T, in_color, color(1), in_specular_roughness, 0.0, 0.0);

        out_outColor = mix(plastic, metal, in_metallic_amount);
    }
}
