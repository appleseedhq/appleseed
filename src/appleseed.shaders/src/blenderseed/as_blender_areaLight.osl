
//
// This source file is part of appleseed.
// Visit https://appleseedhq.net/ for additional information and resources.
//
// This software is released under the MIT license.
//
// Copyright (c) 2016-2018 The appleseedhq Organization
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

shader as_blender_areaLight
[[
    string as_node_name = "asAreaLight",
    string as_category = "shader"
]]
(
    color in_color = color(1)
    [[
        string label = "Color",
        string page = "Emission",
    ]],
    float in_intensity = 1.0
    [[
        string label = "intensity",
        string page = "Emission",
    ]],
    float in_intensity_scale = 1.0
    [[
        string label = "Intensity Scale",
        string page = "Emission",
    ]],
    float in_exposure = 0.0
    [[
        string label = "Exposure",
        string page = "Emission",
    ]],
    int in_normalize = 0
    [[
        string label = "Normalize",
        string widget = "checkBox",
        int as_blender_input_socket = 0,
        string page = "Emission",
    ]],
    output closure color out_output = 0
    [[
        string label = "Output"
    ]]
)
{
    float power = in_intensity * in_intensity_scale * pow(2.0, in_exposure);

    if (in_normalize)
    {
        power /= surfacearea();
    }

    out_output = power * in_color * emission();
}
