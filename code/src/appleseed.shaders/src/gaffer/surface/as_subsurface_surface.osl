
//
// This source file is part of appleseed.
// Visit http://appleseedhq.net/ for additional information and resources.
//
// This software is released under the MIT license.
//
// Copyright (c) 2016 The masked shader writer, The appleseedhq Organization
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

shader as_subsurface_surface
[[
    string help = "Subsurface surface shader"
]]
(
    vector               Normal = N,
    float                Reflectance = 0.8
    [[
        float  min = 0
    ]],
    color                Color = 1.0,
    string               Profile = "better_dipole"
    [[
        string widget = "popup",
        string options = "normalized_diffusion|standard_dipole|better_dipole|directional_dipole"
    ]],
    color                Radius = 1.0,
    float                RadiusScale = 0.1,
    float                Ior = 1.3,
    int                  MaxSubsurfaceRayDepth = 2
    [[
        string help = "Replace subsurface by diffuse when ray depth is greater.",
        int    min = 0,
    ]],
    output closure color BSSRDF = 0
)
{
    int RayDepth;
    getattribute("path:ray_depth", RayDepth);
    if (RayDepth <= MaxSubsurfaceRayDepth)
    {
        BSSRDF = Reflectance * as_subsurface(
            Profile,
            Normal,
            Color,
            Radius * RadiusScale,
            Ior);
    }
    else
        BSSRDF = Reflectance * Color * diffuse(Normal);
}
