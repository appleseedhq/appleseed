#
# This source file is part of appleseed.
# Visit http://appleseedhq.net/ for additional information and resources.
#
# This software is released under the MIT license.
#
# Copyright (c) 2012 Esteban Tovagliari.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#

import os
import math

import bpy

class ProjectWriter( object):
    def __init__( self, scene, proj_dir = None, proj_name = None, use_anim = False):
        self.__indentation = 0
        self.__scene = scene
        self.__camera_name = "camera"
        self.__use_anim = use_anim

        self.__proj_path = proj_dir

        if self.__proj_path is None:
            if bpy.data.filepath == '':
                self.__proj_path = bpy.app.tempdir
            else:
                self.__proj_path = os.path.dirname( bpy.data.filepath)

            self.__proj_path = os.path.join( self.__proj_path, "appleseed")

        print( "Appleseed proj_path = ", self.__proj_path)
        self.__makedir( self.__proj_path)

        self.__geom_path = os.path.join( self.__proj_path, "geom")
        print( "Appleseed geom_path = ", self.__geom_path)
        self.__makedir( self.__geom_path)

        self.__tex_path = os.path.join( self.__proj_path, "tex")
        print( "Appleseed tex_path = ", self.__tex_path)
        self.__makedir( self.__tex_path)

        self.__render_path = os.path.join( self.__proj_path, "render")
        print( "Appleseed render_path = ", self.__render_path)
        self.__makedir( self.__render_path)

        filename = proj_name

        if filename is None:
            filename = scene.name

        if not filename.endswith( ".appleseed"):
            filename += ".appleseed"

        filename = os.path.join( self.__proj_path, filename)
        print( "Appleseed project_file = ", filename)
        #self.__output_file = open( filename, "w")

    def write( self):
        return {}
        self.__write_header()
        self.__open_element( "project")
        self.__open_element( "scene")
        self.__close_element( "scene")
        self.__close_element( "project")

    def __makedir( self, path):
        if not os.path.exists( path):
            os.mkdir( path)

    def __write_header( self):
        self.__emit_line( "<?xml version=\"1.0\" encoding=\"UTF-8\"?>")
        self.__emit_line( "<!-- File generated by render_appleseed. -->")

    def __indent( self):
        self.__indentation += 1

    def __unindent( self):
        assert self.__indentation > 0
        self.__indentation -= 1

    def __emit_indent( self):
        IndentSize = 4
        self.__output_file.write( " " * self.__indentation * IndentSize)

    def __emit_line( self, line):
        self.__emit_indent()
        self.__output_file.write( line + "\n")

    def __emit_parameter( self, name, value):
        self.__emit_line( "<parameter name=\"" + name + "\" value=\"" + str(value) + "\" />")

    def __open_element( self, name):
        self.__emit_line( "<" + name + ">")
        self.__indent()

    def __close_element( self, name):
        self.__unindent()
        self.__emit_line( "</" + name + ">")

    """
    def write_camera( self):
        if not self.__scene.camera or self.__scene.camera.type != 'CAMERA':
            self.__write_default_camera()
            return

        camera = self.__scene.camera.data
        if camera.type != 'PERSP':
            self.__write_default_camera()
            return

        self.__camera_name = camera.name
        render = self.__scene.render

        sensor = cam.sensor_height if camera.sensor_fit == 'VERTICAL' else camera.sensor_width
        aspect_ratio = self.__get_frame_aspect_ratio()
        fov= 360.0 * math.atan( ( sensor * 0.5) / camera.lens / aspectratio) / math.pi

        camera_matrix = camera.matrix_world
        origin = camera_matrix.col[3]
        forward = -camera_matrix.col[2]
        up = camera_matrix.col[1]
        target = origin + forward

        self.open_element( 'camera name="' + camera.name + '" model="pinhole_camera"')
        self.__emit_parameter( "film_width", sensor)
        self.__emit_parameter( "aspect_ratio", aspect_ratio)
        self.__emit_parameter( "horizontal_fov", fov)

        self.open_element("transform")
        self.__emit_line('<look_at origin="{0} {1} {2}" target="{3} {4} {5}" up="{6} {7} {8}" />'.format( \
                         origin[0], origin[2], -origin[1],
                         target[0], target[2], -target[1],
                         up[0], up[2], -up[1]))
        self.close_element("transform")
        self.close_element("camera")

    def write_environment( self):
        self.open_element('environment name="environment" model="generic_environment"')
        self.close_element('environment')

    def write_output( self):
        self.open_element( "output")
        width, height = self.__get_frame_resolution()

        self.open_element( "frame name=\"beauty\"")
        self.__emit_parameter("camera", self.__camera_name)
        self.__emit_parameter( "resolution", "{0} {1}".format( width, height))
        self.__emit_parameter( "color_space", "linear")
        self.close_element( "frame")

        self.close_element( "output")

    def write_configurations( self):
        self.open_element( "configurations")
        self.__emit_interactive_configuration_element()
        self.__emit_final_configuration_element()
        self.close_element( "configurations")

    def __get_frame_resolution( self):
        scale = self.__scene.render.resolution_percentage / 100.0
        width = int( self.__scene.render.resolution_x * scale)
        height = int( self.__scene.render.resolution_y * scale)
        return width, height

    def __get_frame_aspect_ratio( self):
        width, height = self.__get_frame_resolution()
        xratio = width * self.__scene.render.pixel_aspect_x
        yratio = height * self.__scene.render.pixel_aspect_y
        return xratio / yratio

    def __write_default_camera( self):
        self.open_element( 'camera name="camera" model="pinhole_camera"')
        self.__emit_parameter( "film_width", 0.024892)
        self.__emit_parameter( "film_height", 0.018669)
        self.__emit_parameter( "focal_length", 0.035)
        self.close_element( "camera")

    def __emit_interactive_configuration_element(self):
        self.__open_element('configuration name="interactive" base="base_interactive"')
        self.__emit_common_configuration_parameters()
        self.__close_element("configuration")

    def __emit_final_configuration_element(self):
        self.__open_element('configuration name="final" base="base_final"')
        self.__emit_common_configuration_parameters()
        self.__open_element('parameters name="generic_tile_renderer"')
        #self.__emit_parameter("min_samples", self.sample_count)
        #self.__emit_parameter("max_samples", self.sample_count)
        self.__close_element("parameters")
        self.__close_element("configuration")

    def __emit_common_configuration_parameters(self):
        #self.__emit_parameter("lighting_engine", self.lighting_engine)
        #self.__open_element('parameters name="{0}"'.format(self.lighting_engine))
        #self.__emit_parameter("enable_ibl", "true" if self.enable_ibl else "false")
        #self.__emit_parameter("enable_caustics", "true" if self.enable_caustics else "false")
        #self.__close_element('parameters')
        pass
    """
