OpenShadingLanguage 1.00
# Compiled by oslc 1.5.7dev
surface glass
param	float	eta	1.5 		 %read{2,5} %write{2147483647,-1}
global	vector	I	 %read{9,57} %write{2147483647,-1}
global	normal	N	 %read{9,69} %write{2147483647,-1}
global	closure color	Ci	 %read{2147483647,-1} %write{71,71}
local	float	___216_IdotN	 %read{50,58} %write{48,48}
local	float	___216_k	 %read{54,59} %write{53,53}
local	float	___217_c	 %read{10,38} %write{9,12}
local	float	___217_g	 %read{24,38} %write{23,26}
local	float	___219_beta	 %read{31,39} %write{27,27}
local	float	___219_F	 %read{35,43} %write{33,42}
local	vector	___221_R	 %read{2147483647,-1} %write{17,17}
local	vector	___221_T	 %read{2147483647,-1} %write{56,66}
local	float	from_ior	 %read{6,69} %write{2,4}
local	float	to_ior	 %read{6,69} %write{3,5}
local	float	Kr	 %read{44,68} %write{43,64}
local	float	Kt	 %read{70,70} %write{46,65}
temp	int	$tmp1	 %read{1,1} %write{0,0}
const	float	$const1	1		 %read{3,64} %write{2147483647,-1}
temp	float	$tmp2	 %read{19,58} %write{6,6}
const	string	$const2	"fresnel"		 %read{7,8} %write{2147483647,-1}
const	int	$const3	0		 %read{10,54} %write{2147483647,-1}
temp	int	$tmp3	 %read{11,11} %write{10,10}
const	string	$const4	"reflect"		 %read{13,13} %write{2147483647,-1}
temp	float	$tmp4	 %read{15,15} %write{14,14}
temp	float	$tmp5	 %read{16,16} %write{15,15}
const	float	$const6	2		 %read{15,15} %write{2147483647,-1}
temp	vector	$tmp6	 %read{17,17} %write{16,16}
temp	float	$tmp7	 %read{20,20} %write{19,19}
const	string	$const7	"sqr"		 %read{18,40} %write{2147483647,-1}
temp	float	$tmp8	 %read{21,21} %write{20,20}
temp	float	$tmp9	 %read{23,23} %write{21,21}
temp	float	$tmp10	 %read{23,23} %write{22,22}
const	float	$const8	0		 %read{24,65} %write{2147483647,-1}
temp	int	$tmp11	 %read{25,25} %write{24,24}
temp	float	$tmp12	 %read{29,29} %write{28,28}
temp	float	$tmp13	 %read{30,30} %write{29,29}
temp	float	$tmp14	 %read{33,33} %write{30,30}
temp	float	$tmp15	 %read{32,32} %write{31,31}
temp	float	$tmp16	 %read{33,33} %write{32,32}
const	float	$const9	0.5		 %read{37,37} %write{2147483647,-1}
temp	float	$tmp17	 %read{36,36} %write{35,35}
temp	float	$tmp18	 %read{37,37} %write{36,36}
temp	float	$tmp19	 %read{42,42} %write{41,41}
temp	float	$tmp20	 %read{39,39} %write{38,38}
temp	float	$tmp21	 %read{41,41} %write{39,39}
temp	float	$tmp22	 %read{45,45} %write{44,44}
temp	float	$tmp23	 %read{46,46} %write{45,45}
const	string	$const10	"refract"		 %read{47,47} %write{2147483647,-1}
temp	float	$tmp24	 %read{52,52} %write{49,49}
temp	float	$tmp25	 %read{51,51} %write{50,50}
temp	float	$tmp26	 %read{52,52} %write{51,51}
temp	float	$tmp27	 %read{53,53} %write{52,52}
temp	int	$tmp28	 %read{55,55} %write{54,54}
const	vector	$const12	0 0 0		 %read{56,66} %write{2147483647,-1}
temp	vector	$tmp29	 %read{62,62} %write{57,57}
temp	float	$tmp30	 %read{60,60} %write{58,58}
temp	float	$tmp31	 %read{60,60} %write{59,59}
temp	float	$tmp32	 %read{61,61} %write{60,60}
temp	vector	$tmp33	 %read{62,62} %write{61,61}
temp	closure color	$tmp34	 %read{68,68} %write{67,67}
const	string	$const13	"reflection"		 %read{67,67} %write{2147483647,-1}
temp	closure color	$tmp35	 %read{71,71} %write{68,68}
temp	closure color	$tmp36	 %read{70,70} %write{69,69}
const	string	$const14	"refraction"		 %read{69,69} %write{2147483647,-1}
temp	closure color	$tmp37	 %read{71,71} %write{70,70}
code ___main___
# glass.osl:6
# 	if (backfacing())
	backfacing	$tmp1 	%filename{"glass.osl"} %line{6} %argrw{"w"}
	if		$tmp1 4 6 	%argrw{"r"}
# glass.osl:8
# 		from_ior = eta;
	assign		from_ior eta 	%line{8} %argrw{"wr"}
# glass.osl:9
# 		to_ior = 1.0;
	assign		to_ior $const1 	%line{9} %argrw{"wr"}
# glass.osl:13
# 		from_ior = 1.0;
	assign		from_ior $const1 	%line{13} %argrw{"wr"}
# glass.osl:14
# 		to_ior = eta;
	assign		to_ior eta 	%line{14} %argrw{"wr"}
# glass.osl:18
# 	fresnel( I, N, from_ior / to_ior, Kr, Kt);
	div		$tmp2 from_ior to_ior 	%line{18} %argrw{"wrr"}
	functioncall	$const2 67 	%argrw{"r"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:239
#         F *= sqr (beta / (g+c));
	functioncall	$const2 67 	%filename{"/home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h"} %line{239} %argrw{"r"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:211
#     float c = dot(I, N);
	dot		___217_c I N 	%line{211} %argrw{"wrr"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:212
#     if (c < 0)
	lt		$tmp3 ___217_c $const3 	%line{212} %argrw{"wrr"}
	if		$tmp3 13 13 	%argrw{"r"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:213
#         c = -c;
	neg		___217_c ___217_c 	%line{213} %argrw{"wr"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:214
#     R = reflect(I, N);
	functioncall	$const4 18 	%line{214} %argrw{"r"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:200
# vector reflect (vector I, vector N) { return I - 2*dot(N,I)*N; }
	dot		$tmp4 N I 	%line{200} %argrw{"wrr"}
	mul		$tmp5 $const6 $tmp4 	%argrw{"wrr"}
	mul		$tmp6 $tmp5 N 	%argrw{"wrr"}
	sub		___221_R I $tmp6 	%argrw{"wrr"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:215
#     float g = 1.0 / sqr(eta) - 1.0 + c * c;
	functioncall	$const7 20 	%line{215} %argrw{"r"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:210
#     float sqr(float x) { return x*x; }
	mul		$tmp7 $tmp2 $tmp2 	%line{210} %argrw{"wrr"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:215
#     float g = 1.0 / sqr(eta) - 1.0 + c * c;
	div		$tmp8 $const1 $tmp7 	%line{215} %argrw{"wrr"}
	sub		$tmp9 $tmp8 $const1 	%argrw{"wrr"}
	mul		$tmp10 ___217_c ___217_c 	%argrw{"wrr"}
	add		___217_g $tmp9 $tmp10 	%argrw{"wrr"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:216
#     if (g >= 0.0) {
	ge		$tmp11 ___217_g $const8 	%line{216} %argrw{"wrr"}
	if		$tmp11 64 67 	%argrw{"r"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:217
#         g = sqrt (g);
	sqrt		___217_g ___217_g 	%line{217} %argrw{"wr"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:218
#         float beta = g - c;
	sub		___219_beta ___217_g ___217_c 	%line{218} %argrw{"wrr"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:219
#         float F = (c * (g+c) - 1.0) / (c * beta + 1.0);
	add		$tmp12 ___217_g ___217_c 	%line{219} %argrw{"wrr"}
	mul		$tmp13 ___217_c $tmp12 	%argrw{"wrr"}
	sub		$tmp14 $tmp13 $const1 	%argrw{"wrr"}
	mul		$tmp15 ___217_c ___219_beta 	%argrw{"wrr"}
	add		$tmp16 $tmp15 $const1 	%argrw{"wrr"}
	div		___219_F $tmp14 $tmp16 	%argrw{"wrr"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:220
#         F = 0.5 * (1.0 + sqr(F));
	functioncall	$const7 36 	%line{220} %argrw{"r"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:210
#     float sqr(float x) { return x*x; }
	mul		$tmp17 ___219_F ___219_F 	%line{210} %argrw{"wrr"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:220
#         F = 0.5 * (1.0 + sqr(F));
	add		$tmp18 $const1 $tmp17 	%line{220} %argrw{"wrr"}
	mul		___219_F $const9 $tmp18 	%argrw{"wrr"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:221
#         F *= sqr (beta / (g+c));
	add		$tmp20 ___217_g ___217_c 	%line{221} %argrw{"wrr"}
	div		$tmp21 ___219_beta $tmp20 	%argrw{"wrr"}
	functioncall	$const7 42 	%argrw{"r"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:210
#     float sqr(float x) { return x*x; }
	mul		$tmp19 $tmp21 $tmp21 	%line{210} %argrw{"wrr"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:221
#         F *= sqr (beta / (g+c));
	mul		___219_F ___219_F $tmp19 	%line{221} %argrw{"wrr"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:222
#         Kr = F;
	assign		Kr ___219_F 	%line{222} %argrw{"wr"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:223
#         Kt = (1.0 - Kr) * eta*eta;
	sub		$tmp22 $const1 Kr 	%line{223} %argrw{"wrr"}
	mul		$tmp23 $tmp22 $tmp2 	%argrw{"wrr"}
	mul		Kt $tmp23 $tmp2 	%argrw{"wrr"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:226
#         T = refract(I, N, eta);
	functioncall	$const10 64 	%line{226} %argrw{"r"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:202
#     float IdotN = dot (I, N);
	dot		___216_IdotN I N 	%line{202} %argrw{"wrr"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:203
#     float k = 1 - eta*eta * (1 - IdotN*IdotN);
	mul		$tmp24 $tmp2 $tmp2 	%line{203} %argrw{"wrr"}
	mul		$tmp25 ___216_IdotN ___216_IdotN 	%argrw{"wrr"}
	sub		$tmp26 $const1 $tmp25 	%argrw{"wrr"}
	mul		$tmp27 $tmp24 $tmp26 	%argrw{"wrr"}
	sub		___216_k $const1 $tmp27 	%argrw{"wrr"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:204
#     return (k < 0) ? vector(0,0,0) : (eta*I - N * (eta*IdotN + sqrt(k)));
	lt		$tmp28 ___216_k $const3 	%line{204} %argrw{"wrr"}
	if		$tmp28 57 63 	%argrw{"r"}
	assign		___221_T $const12 	%argrw{"wr"}
	mul		$tmp29 $tmp2 I 	%argrw{"wrr"}
	mul		$tmp30 $tmp2 ___216_IdotN 	%argrw{"wrr"}
	sqrt		$tmp31 ___216_k 	%argrw{"wr"}
	add		$tmp32 $tmp30 $tmp31 	%argrw{"wrr"}
	mul		$tmp33 N $tmp32 	%argrw{"wrr"}
	sub		___221_T $tmp29 $tmp33 	%argrw{"wrr"}
	return
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:229
#         Kr = 1.0;
	assign		Kr $const1 	%line{229} %argrw{"wr"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:230
#         Kt = 0.0;
	assign		Kt $const8 	%line{230} %argrw{"wr"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:231
#         T = vector (0,0,0);
	assign		___221_T $const12 	%line{231} %argrw{"wr"}
# glass.osl:19
#  	Ci = (Kr * reflection(N)) + (Kt * refraction(N, from_ior, to_ior));
	closure		$tmp34 $const13 N 	%filename{"glass.osl"} %line{19} %argrw{"wrr"}
	mul		$tmp35 $tmp34 Kr 	%argrw{"wrr"}
	closure		$tmp36 $const14 N from_ior to_ior 	%argrw{"wrrrr"}
	mul		$tmp37 $tmp36 Kt 	%argrw{"wrr"}
	add		Ci $tmp35 $tmp37 	%argrw{"wrr"}
	end
