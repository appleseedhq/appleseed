OpenShadingLanguage 1.00
# Compiled by oslc 1.10.3
# options: -I/home/est/Devel/appleseedhq/appleseed/sandbox/shaders/include
shader as_map2d
param	float	U	0		%read{2,2} %write{0,0} %initexpr
param	float	V	0		%read{3,3} %write{1,1} %initexpr
param	string	Flip	"Off"		%meta{string,widget,"popup"} %meta{string,options,"Off|U|V|Both"}  %read{4,10} %write{2147483647,-1}
param	vector	Center	0.5 0.5 0.5		%read{14,43} %write{2147483647,-1}
param	vector	Repeat	1 1 1		%read{16,20} %write{2147483647,-1}
param	float	Rotate	0		%read{23,27} %write{2147483647,-1}
param	vector	Offset	0 0 0		%read{41,45} %write{2147483647,-1}
oparam	float	UOut	0		%read{2147483647,-1} %write{42,42}
oparam	float	VOut	0		%read{2147483647,-1} %write{46,46}
global	float	u	%read{0,0} %write{2147483647,-1}
global	float	v	%read{1,1} %write{2147483647,-1}
local	float	___341_angle_in_rad	%read{28,28} %write{27,27}
local	float	___341_c	%read{29,33} %write{28,28}
local	float	___341_s	%read{30,32} %write{28,28}
local	float	___341_xx	%read{35,35} %write{31,31}
local	float	___341_yy	%read{36,36} %write{34,34}
local	float	uu	%read{6,40} %write{2,37}
local	float	vv	%read{9,44} %write{3,38}
const	string	$const1	"U"		%read{4,4} %write{2147483647,-1}
temp	int	$tmp1	%read{5,5} %write{4,4}
const	float	$const2	1		%read{6,13} %write{2147483647,-1}
const	string	$const3	"V"		%read{7,7} %write{2147483647,-1}
temp	int	$tmp2	%read{8,8} %write{7,7}
const	string	$const4	"Both"		%read{10,10} %write{2147483647,-1}
temp	int	$tmp3	%read{11,11} %write{10,10}
const	int	$const5	0		%read{14,41} %write{2147483647,-1}
temp	float	$tmp4	%read{15,15} %write{14,14}
temp	float	$tmp5	%read{17,17} %write{15,15}
temp	float	$tmp6	%read{17,17} %write{16,16}
const	int	$const6	1		%read{18,45} %write{2147483647,-1}
temp	float	$tmp7	%read{19,19} %write{18,18}
temp	float	$tmp8	%read{21,21} %write{19,19}
temp	float	$tmp9	%read{21,21} %write{20,20}
const	string	$const7	"rotate2d"		%read{22,22} %write{2147483647,-1}
temp	int	$tmp10	%read{24,24} %write{23,23}
const	string	$const8	"radians"		%read{25,25} %write{2147483647,-1}
const	float	$const9	3.14159274		%read{26,26} %write{2147483647,-1}
const	float	$const10	180		%read{26,26} %write{2147483647,-1}
temp	float	$tmp11	%read{27,27} %write{26,26}
temp	float	$tmp12	%read{31,31} %write{29,29}
temp	float	$tmp13	%read{31,31} %write{30,30}
temp	float	$tmp14	%read{34,34} %write{32,32}
temp	float	$tmp15	%read{34,34} %write{33,33}
temp	float	$tmp16	%read{40,40} %write{39,39}
temp	float	$tmp17	%read{42,42} %write{40,40}
temp	float	$tmp18	%read{42,42} %write{41,41}
temp	float	$tmp19	%read{44,44} %write{43,43}
temp	float	$tmp20	%read{46,46} %write{44,44}
temp	float	$tmp21	%read{46,46} %write{45,45}
code U
# as_map2d.osl:33
#     float        U = u,
	assign		U u 	%filename{"as_map2d.osl"} %line{33} %argrw{"wr"}
code V
# as_map2d.osl:34
#     float        V = v,
	assign		V v 	%filename{"as_map2d.osl"} %line{34} %argrw{"wr"}
code ___main___
# as_map2d.osl:48
#     float uu = U;
	assign		uu U 	%filename{"as_map2d.osl"} %line{48} %argrw{"wr"}
# as_map2d.osl:49
#     float vv = V;
	assign		vv V 	%line{49} %argrw{"wr"}
# as_map2d.osl:51
#     if (Flip == "U")
	eq		$tmp1 Flip $const1 	%line{51} %argrw{"wrr"}
	if		$tmp1 7 14 	%argrw{"r"}
# as_map2d.osl:52
#         uu = 1.0 - uu;
	sub		uu $const2 uu 	%line{52} %argrw{"wrr"}
# as_map2d.osl:53
#     else if (Flip == "V")
	eq		$tmp2 Flip $const3 	%line{53} %argrw{"wrr"}
	if		$tmp2 10 14 	%argrw{"r"}
# as_map2d.osl:54
#         vv = 1.0 - vv;
	sub		vv $const2 vv 	%line{54} %argrw{"wrr"}
# as_map2d.osl:55
#     else if (Flip == "Both")
	eq		$tmp3 Flip $const4 	%line{55} %argrw{"wrr"}
	if		$tmp3 14 14 	%argrw{"r"}
# as_map2d.osl:57
#         uu = 1.0 - uu;
	sub		uu $const2 uu 	%line{57} %argrw{"wrr"}
# as_map2d.osl:58
#         vv = 1.0 - vv;
	sub		vv $const2 vv 	%line{58} %argrw{"wrr"}
# as_map2d.osl:61
#     uu = (uu - Center[0]) * Repeat[0];
	compref		$tmp4 Center $const5 	%line{61} %argrw{"wrr"}
	sub		$tmp5 uu $tmp4 	%argrw{"wrr"}
	compref		$tmp6 Repeat $const5 	%argrw{"wrr"}
	mul		uu $tmp5 $tmp6 	%argrw{"wrr"}
# as_map2d.osl:62
#     vv = (vv - Center[1]) * Repeat[1];
	compref		$tmp7 Center $const6 	%line{62} %argrw{"wrr"}
	sub		$tmp8 vv $tmp7 	%argrw{"wrr"}
	compref		$tmp9 Repeat $const6 	%argrw{"wrr"}
	mul		vv $tmp8 $tmp9 	%argrw{"wrr"}
# as_map2d.osl:64
#     rotate2d(uu, vv, Rotate, uu, vv);
	functioncall	$const7 39 	%line{64} %argrw{"r"}
# transform.h:39
#     if (angle_in_degrees != 0)
	neq		$tmp10 Rotate $const5 	%filename{"transform.h"} %line{39} %argrw{"wrr"}
	if		$tmp10 37 39 	%argrw{"r"}
# transform.h:41
#         float angle_in_rad = radians(angle_in_degrees);
	functioncall	$const8 28 	%line{41} %argrw{"r"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:88
# float  radians (float x)  { return x*(M_PI/180.0); }
	div		$tmp11 $const9 $const10 	%filename{"/home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h"} %line{88} %argrw{"wrr"}
	mul		___341_angle_in_rad Rotate $tmp11 	%argrw{"wrr"}
# transform.h:43
#         sincos(angle_in_rad, s, c);
	sincos		___341_angle_in_rad ___341_s ___341_c 	%filename{"transform.h"} %line{43} %argrw{"rww"}
# transform.h:44
#         float xx = x * c - s * y;
	mul		$tmp12 uu ___341_c 	%line{44} %argrw{"wrr"}
	mul		$tmp13 ___341_s vv 	%argrw{"wrr"}
	sub		___341_xx $tmp12 $tmp13 	%argrw{"wrr"}
# transform.h:45
#         float yy = x * s + c * y;
	mul		$tmp14 uu ___341_s 	%line{45} %argrw{"wrr"}
	mul		$tmp15 ___341_c vv 	%argrw{"wrr"}
	add		___341_yy $tmp14 $tmp15 	%argrw{"wrr"}
# transform.h:46
#         rx = xx;
	assign		uu ___341_xx 	%line{46} %argrw{"wr"}
# transform.h:47
#         ry = yy;
	assign		vv ___341_yy 	%line{47} %argrw{"wr"}
# transform.h:51
#         rx = x;
	assign		uu uu 	%line{51} %argrw{"wr"}
# transform.h:52
#         ry = y;
	assign		vv vv 	%line{52} %argrw{"wr"}
# as_map2d.osl:66
#     UOut = uu + Center[0] + Offset[0];
	compref		$tmp16 Center $const5 	%filename{"as_map2d.osl"} %line{66} %argrw{"wrr"}
	add		$tmp17 uu $tmp16 	%argrw{"wrr"}
	compref		$tmp18 Offset $const5 	%argrw{"wrr"}
	add		UOut $tmp17 $tmp18 	%argrw{"wrr"}
# as_map2d.osl:67
#     VOut = vv + Center[1] + Offset[1];
	compref		$tmp19 Center $const6 	%line{67} %argrw{"wrr"}
	add		$tmp20 vv $tmp19 	%argrw{"wrr"}
	compref		$tmp21 Offset $const6 	%argrw{"wrr"}
	add		VOut $tmp20 $tmp21 	%argrw{"wrr"}
	end
