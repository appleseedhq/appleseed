OpenShadingLanguage 1.00
# Compiled by oslc 1.10.5
# options: -O2 -DNDEBUG -IN:/appleseed/appleseed/src/appleseed.shaders/include -o N:/appleseed/appleseed/sandbox/shaders/appleseed/as_standard_surface.oso
shader as_standard_surface	%meta{string,help,"appleseed's standard material shader."} %meta{string,icon,"asStandardSurface.png"} %meta{string,URL,"https://appleseed.readthedocs.io/projects/appleseed-maya/en/latest/shaders/material/as_standard_surface.html#label-as-standard-surface"} %meta{string,as_node_name,"asStandardSurface"} %meta{string,as_category,"shader"} %meta{string,as_max_class_id,"651059681 943276521"} %meta{string,as_max_plugin_type,"material"} %meta{int,as_maya_type_id,1210836} %meta{string,as_maya_classification,"drawdb/shader/surface:rendernode/appleseed/surface:shader/surface:swatch/AppleseedRenderSwatch"} 
param	float	in_diffuse_weight	1		%meta{string,as_maya_attribute_name,"diffuseWeight"} %meta{string,as_maya_attribute_short_name,"diw"} %meta{float,min,0} %meta{float,max,1} %meta{string,label,"Diffuse Weight"} %meta{string,page,"Diffuse"}  %read{178,597} %write{2147483647,-1}
param	color	in_color	0.5 0.5 0.5		%meta{string,as_maya_attribute_name,"color"} %meta{string,as_maya_attribute_short_name,"c"} %meta{string,label,"Diffuse Color"} %meta{string,page,"Diffuse"}  %read{173,597} %write{2147483647,-1}
param	float	in_diffuse_roughness	0.100000001		%meta{string,as_maya_attribute_name,"diffuseRoughness"} %meta{string,as_maya_attribute_short_name,"dir"} %meta{float,min,0} %meta{float,max,1} %meta{string,label,"Diffuse Roughness"} %meta{string,page,"Diffuse"}  %read{606,606} %write{2147483647,-1}
param	float	in_subsurface_weight	0		%meta{string,as_maya_attribute_name,"subsurfaceWeight"} %meta{string,as_maya_attribute_short_name,"ssw"} %meta{float,min,0} %meta{float,max,1} %meta{string,label,"Subsurface Weight"} %meta{string,page,"Subsurface"} %meta{int,divider,1}  %read{198,595} %write{2147483647,-1}
param	color	in_sss_mfp	0 0 0		%meta{string,as_maya_attribute_name,"subsurfaceMfp"} %meta{string,as_maya_attribute_short_name,"mfp"} %meta{string,label,"Depth"} %meta{string,page,"Subsurface"}  %read{204,593} %write{2147483647,-1}
param	float	in_sss_mfp_scale	1		%meta{string,as_maya_attribute_name,"subsurfaceMfpScale"} %meta{string,as_maya_attribute_short_name,"sfm"} %meta{float,min,0} %meta{float,max,1000} %meta{float,softmax,100} %meta{string,label,"Depth Scale"} %meta{string,page,"Subsurface"} %meta{int,as_maya_attribute_connectable,0} %meta{int,as_maya_attribute_keyable,1} %meta{int,as_maya_attribute_hidden,1} %meta{int,as_blender_input_socket,0} %meta{int,gafferNoduleLayoutVisible,0}  %read{593,593} %write{2147483647,-1}
param	int	in_subsurface_profile	2		%meta{string,as_maya_attribute_name,"subsurfaceProfile"} %meta{string,as_maya_attribute_short_name,"ssp"} %meta{string,widget,"mapper"} %meta{string,options,"Gaussian:0|Dipole:1|Normalized Diffusion:2|Random Walk:3"} %meta{string,label,"Subsurface Profile"} %meta{string,page,"Subsurface.Advanced"} %meta{int,as_maya_attribute_connectable,0} %meta{int,as_maya_attribute_keyable,0} %meta{int,as_maya_attribute_hidden,1} %meta{int,as_blender_input_socket,0} %meta{int,gafferNoduleLayoutVisible,0} %meta{int,divider,1}  %read{582,588} %write{2147483647,-1}
param	int	in_sss_maximum_ray_depth	2		%meta{string,as_maya_attribute_name,"sssMaximumRayDepth"} %meta{string,as_maya_attribute_short_name,"ssd"} %meta{int,min,1} %meta{int,max,16} %meta{int,softmax,8} %meta{string,label,"Subsurface Ray Depth"} %meta{string,page,"Subsurface.Advanced"} %meta{int,as_maya_attribute_connectable,0} %meta{int,as_maya_attribute_keyable,0} %meta{int,as_maya_attribute_hidden,1} %meta{int,as_blender_input_socket,0} %meta{int,gafferNoduleLayoutVisible,0}  %read{183,183} %write{2147483647,-1}
param	float	in_sss_threshold	0.00100000005		%meta{string,as_maya_attribute_name,"sssThreshold"} %meta{string,as_maya_attibute_short_name,"sth"} %meta{float,min,0} %meta{float,max,1} %meta{float,softmax,0.00999999978} %meta{string,label,"Subsurface Threshold"} %meta{string,page,"Subsurface.Advanced"} %meta{string,help,"Threshold at which the subsurface scattering term is replaced by a diffuse term."} %meta{int,as_maya_attribute_connectable,0} %meta{int,as_maya_attribute_keyable,0} %meta{int,as_maya_attribute_hidden,1} %meta{int,as_blender_input_socket,0} %meta{int,gafferNoduleLayoutVisible,0}  %read{209,209} %write{2147483647,-1}
param	float	in_translucency_weight	0		%meta{string,as_maya_attribute_name,"translucencyWeight"} %meta{string,as_maya_attribute_short_name,"trw"} %meta{float,min,0} %meta{float,max,1} %meta{string,label,"Translucency Weight"} %meta{string,page,"Translucency"}  %read{146,610} %write{2147483647,-1}
param	color	in_translucency_color	0 0 0		%meta{string,as_maya_attribute_name,"translucencyColor"} %meta{string,as_maya_attribute_short_name,"trc"} %meta{string,label,"Translucency Color"} %meta{string,page,"Translucency"}  %read{141,610} %write{2147483647,-1}
param	color	in_specular_color	1 1 1		%meta{string,as_maya_attribute_name,"specularColor"} %meta{string,as_maya_attribute_short_name,"spc"} %meta{string,label,"Specular Color"} %meta{string,page,"Specular"}  %read{163,355} %write{2147483647,-1}
param	float	in_specular_roughness	0.100000001		%meta{string,as_maya_attribute_name,"specularRoughness"} %meta{string,as_maya_attribute_short_name,"sro"} %meta{float,min,0} %meta{float,max,1} %meta{string,label,"Specular Roughness"} %meta{string,page,"Specular"}  %read{309,333} %write{2147483647,-1}
param	float	in_specular_spread	0.25		%meta{string,as_maya_attribute_name,"specularSpread"} %meta{string,as_maya_attribute_short_name,"sps"} %meta{float,min,0} %meta{float,max,1} %meta{string,label,"Specular Spread"} %meta{string,page,"Specular"} %meta{string,help,"Specular spread, controls the tails of the highlights."} %meta{int,divider,1} %meta{int,as_deprecated,1}  %read{2147483647,-1} %write{2147483647,-1}
param	int	in_fresnel_type	0		%meta{string,as_maya_attribute_name,"fresnelType"} %meta{string,as_maya_attribute_short_name,"fty"} %meta{string,widget,"mapper"} %meta{string,options,"Dielectric:0|Conductor:1"} %meta{string,label,"Fresnel Type"} %meta{string,page,"Specular"} %meta{string,help,"In dielectric mode, set IOR explicitly, and in conductor mode, set face and edge refletance."} %meta{int,as_maya_attribute_connectable,0} %meta{int,as_maya_attribute_keyable,0} %meta{int,as_maya_attribute_hidden,1} %meta{int,as_blender_input_socket,0} %meta{int,gafferNoduleLayoutVisible,0} %meta{int,divider,1}  %read{305,365} %write{2147483647,-1}
param	float	in_ior	1.37		%meta{string,as_maya_attribute_name,"ior"} %meta{string,as_maya_attribute_short_name,"sio"} %meta{float,min,1} %meta{float,max,10} %meta{float,softmax,2} %meta{string,label,"Index Of Refraction"} %meta{string,page,"Specular"} %meta{string,help,"IOR, only active if Fresnel is set to dielectric."} %meta{int,as_maya_attribute_connectable,0} %meta{int,as_maya_attribute_keyable,1} %meta{int,as_maya_attribute_hidden,1} %meta{int,as_blender_input_socket,0} %meta{int,gafferNoduleLayoutVisible,0}  %read{309,594} %write{2147483647,-1}
param	color	in_face_tint	0.850000024 0.209999993 0.0500000007		%meta{string,as_maya_attribute_name,"faceTint"} %meta{string,as_maya_attribute_short_name,"f0"} %meta{string,label,"Facing Tint"} %meta{string,page,"Specular"} %meta{string,help,"Reflectance at facing angle, for conductor Fresnel."} %meta{int,as_maya_attribute_connectable,0} %meta{int,as_maya_attribute_keyable,0} %meta{int,as_maya_attribute_hidden,1} %meta{int,as_blender_input_socket,0} %meta{int,gafferNoduleLayoutVisible,0}  %read{333,450} %write{2147483647,-1}
param	color	in_edge_tint	1 1 1		%meta{string,as_maya_attribute_name,"edgeTint"} %meta{string,as_maya_attribute_short_name,"f90"} %meta{string,label,"Edge Tint"} %meta{string,page,"Specular"} %meta{string,help,"Reflectance at grazing angle, conductor Fresnel only."} %meta{int,as_maya_attribute_connectable,0} %meta{int,as_maya_attribute_keyable,0} %meta{int,as_maya_attribute_hidden,1} %meta{int,as_blender_input_socket,0} %meta{int,gafferNoduleLayoutVisible,0} %meta{int,divider,1}  %read{333,410} %write{2147483647,-1}
param	float	in_anisotropy_amount	0		%meta{string,as_maya_attribute_name,"anisotropyAmount"} %meta{string,as_maya_attribute_short_name,"anw"} %meta{float,min,0} %meta{float,max,1} %meta{string,label,"Anisotropy Amount"} %meta{string,page,"Specular.Anisotropy"}  %read{234,333} %write{2147483647,-1}
param	float	in_anisotropy_angle	0		%meta{string,as_maya_attribute_name,"anisotropyAngle"} %meta{string,as_maya_attribute_short_name,"ana"} %meta{float,min,0} %meta{float,max,1} %meta{string,label,"Anisotropy Angle"} %meta{string,page,"Specular.Anisotropy"} %meta{string,help,"Anisotropy angle in [0,1], mapping to [0,360] degrees."}  %read{250,252} %write{2147483647,-1}
param	color	in_anisotropy_map	0 0 0		%meta{string,as_maya_attribute_name,"anisotropyMap"} %meta{string,as_maya_attribute_short_name,"ama"} %meta{string,label,"Anisotropy Vector Map"} %meta{string,page,"Specular.Anisotropy"} %meta{string,help,"Anisotropy vector map, with XY encoded in RG channels."}  %read{236,238} %write{2147483647,-1}
param	float	in_refraction_amount	0		%meta{string,as_maya_attribute_name,"refractionAmount"} %meta{string,as_maya_attribute_short_name,"rtw"} %meta{float,min,0} %meta{float,max,1} %meta{string,label,"Refraction Weight"} %meta{string,page,"Specular.Refraction"} %meta{string,help,"Refraction weight. Refraction inherits the IOR."}  %read{157,308} %write{2147483647,-1}
param	color	in_refraction_tint	1 1 1		%meta{string,as_maya_attribute_name,"refractionTint"} %meta{string,as_maya_attribute_short_name,"rti"} %meta{string,label,"Refraction Tint"} %meta{string,page,"Specular.Refraction"} %meta{int,divider,1}  %read{152,308} %write{2147483647,-1}
param	float	in_absorption_depth	0		%meta{string,as_maya_attribute_name,"absorptionDepth"} %meta{string,as_maya_attribute_short_name,"rad"} %meta{float,min,0} %meta{float,max,10000} %meta{float,softmax,100} %meta{string,label,"Absorption Depth"} %meta{string,page,"Specular.Refraction"} %meta{int,as_maya_attribute_connectable,0} %meta{int,as_maya_attribute_keyable,0} %meta{int,as_maya_attribute_hidden,1} %meta{int,as_blender_input_socket,0} %meta{int,gafferNoduleLayoutVisible,0}  %read{309,309} %write{2147483647,-1}
param	color	in_absorption_color	1 1 1		%meta{string,as_maya_attribute_name,"absorptionColor"} %meta{string,as_maya_attribute_short_name,"rac"} %meta{string,label,"Absorption Color"} %meta{string,page,"Specular.Refraction"}  %read{309,309} %write{2147483647,-1}
param	float	in_coating_reflectivity	0		%meta{string,as_maya_attribute_name,"coatingReflectivity"} %meta{string,as_maya_attribute_short_name,"cow"} %meta{float,min,0} %meta{float,max,1} %meta{string,label,"Coating Reflectivity"} %meta{string,page,"Coating"} %meta{string,help,"Coating specular reflectivity."}  %read{39,71} %write{2147483647,-1}
param	float	in_coating_roughness	0		%meta{string,as_maya_attribute_name,"coatingRoughness"} %meta{string,as_maya_attribute_short_name,"cor"} %meta{float,min,0} %meta{float,max,1} %meta{string,label,"Coating Roughness"} %meta{string,page,"Coating"}  %read{61,69} %write{2147483647,-1}
param	float	in_coating_ior	1.41999996		%meta{string,as_maya_attribute_name,"coatingIor"} %meta{string,as_maya_attribute_short_name,"coi"} %meta{float,min,1} %meta{float,max,5} %meta{float,softmax,2} %meta{string,label,"Coating IOR"} %meta{string,page,"Coating"} %meta{string,help,"Coating (monochromatic) dielectric IOR."} %meta{int,divider,1} %meta{int,as_maya_attribute_connectable,0} %meta{int,as_maya_attribute_keyable,1} %meta{int,as_maya_attribute_hidden,1} %meta{int,as_blender_input_socket,0} %meta{int,gafferNoduleLayoutVisible,0}  %read{57,383} %write{2147483647,-1}
param	float	in_coating_depth	0		%meta{string,as_maya_attribute_name,"coatingDepth"} %meta{string,as_maya_attribute_short_name,"cod"} %meta{float,min,0} %meta{float,max,10} %meta{float,softmax,1} %meta{string,label,"Coating Thickness"} %meta{string,page,"Coating"} %meta{string,help,"Maps from [0,1] to [0,10] microns."}  %read{42,110} %write{2147483647,-1}
param	color	in_coating_absorption	1 1 1		%meta{string,as_maya_attribute_name,"coatingAbsorption"} %meta{string,as_maya_attribute_short_name,"coa"} %meta{string,label,"Coating Absorption"} %meta{string,page,"Coating"}  %read{99,108} %write{2147483647,-1}
param	float	in_incandescence_amount	0		%meta{string,as_maya_attribute_name,"incandescenceAmount"} %meta{string,as_maya_attribute_short_name,"inw"} %meta{float,min,0} %meta{float,softmax,1} %meta{string,label,"Emission Amount"} %meta{string,page,"Emission"}  %read{221,534} %write{2147483647,-1}
param	int	in_incandescence_type	0		%meta{string,as_maya_attribute_name,"incandescenceType"} %meta{string,as_maya_attribute_short_name,"int"} %meta{string,widget,"mapper"} %meta{string,options,"Custom:0|Black-body:1"} %meta{string,label,"Emission Type"} %meta{string,page,"Emission"} %meta{string,help,"Custom or black-body radiator EDF."} %meta{int,divider,1} %meta{int,as_maya_attribute_connectable,0} %meta{int,as_maya_attribute_keyable,0} %meta{int,as_maya_attribute_hidden,1} %meta{int,as_blender_input_socket,0} %meta{int,gafferNoduleLayoutVisible,0}  %read{529,529} %write{2147483647,-1}
param	color	in_incandescence_color	0 0 0		%meta{string,as_maya_attribute_name,"incandescenceColor"} %meta{string,as_maya_attribute_short_name,"inc"} %meta{string,label,"Emission Color"} %meta{string,page,"Emission"} %meta{string,help,"Emission color, only valid in constant mode."}  %read{216,531} %write{2147483647,-1}
param	int	in_temperature	4300		%meta{string,as_maya_attribute_name,"temperature"} %meta{string,as_maya_attribute_short_name,"tem"} %meta{int,min,1000} %meta{int,max,11000} %meta{int,softmin,3400} %meta{int,softmax,9300} %meta{string,label,"Temperature"} %meta{string,page,"Emission"} %meta{string,help,"Temperature in Kelvin degrees, only valid in physically based mode."} %meta{int,divider,1} %meta{int,as_maya_attribute_connectable,0} %meta{int,as_maya_attribute_keyable,0} %meta{int,as_maya_attribute_hidden,1} %meta{int,as_blender_input_socket,0} %meta{int,gafferNoduleLayoutVisible,0}  %read{532,532} %write{2147483647,-1}
param	int	in_area_normalize_edf	0		%meta{string,as_maya_attribute_name,"normalizeAreaEDF"} %meta{string,as_maya_attribute_short_name,"nae"} %meta{string,widget,"checkBox"} %meta{string,label,"Normalize Area"} %meta{string,page,"Emission"} %meta{int,as_maya_attribute_connectable,0} %meta{int,as_maya_attribute_keyable,0} %meta{int,as_maya_attribute_hidden,1} %meta{int,as_blender_input_socket,0} %meta{int,gafferNoduleLayoutVisible,0}  %read{537,537} %write{2147483647,-1}
param	int	in_tonemap_edf	1		%meta{string,as_maya_attribute_name,"toneMapEDF"} %meta{string,as_maya_attribute_short_name,"tme"} %meta{string,widget,"checkBox"} %meta{string,label,"Tonemap Color"} %meta{string,page,"Emission"} %meta{string,help,"Tonemap emission, only valid for the black-body radiator mode."} %meta{int,as_maya_attribute_connectable,0} %meta{int,as_maya_attribute_keyable,0} %meta{int,as_maya_attribute_hidden,1} %meta{int,as_blender_input_socket,0} %meta{int,gafferNoduleLayoutVisible,0}  %read{544,544} %write{2147483647,-1}
param	color	in_transparency	0 0 0		%meta{string,as_maya_attribute_name,"transparency"} %meta{string,as_maya_attribute_short_name,"it"} %meta{string,label,"Transparency Color"} %meta{string,page,"Transparency"}  %read{3,38} %write{2147483647,-1}
param	normal	in_bump_normal_coating	0 0 0		%meta{string,as_maya_attribute_name,"coatingNormal"} %meta{string,as_maya_attribute_short_name,"ncn"} %meta{string,label,"Coating Normal"} %meta{string,page,"Bump"} %meta{string,help,"The coating normal. If not set, the substrate normal is used for both layers."}  %read{50,52} %write{0,0} %initexpr
param	normal	in_bump_normal_substrate	0 0 0		%meta{string,as_maya_attribute_name,"normalCamera"} %meta{string,as_maya_attribute_short_name,"n"} %meta{string,label,"Substrate Normal"} %meta{string,page,"Bump"} %meta{string,help,"The default bump normal."}  %read{53,227} %write{1,1} %initexpr
param	int	in_enable_matte	0		%meta{string,as_maya_attribute_name,"enableMatte"} %meta{string,as_maya_attribute_short_name,"ema"} %meta{string,widget,"checkBox"} %meta{string,label,"Enable Matte Opacity"} %meta{string,page,"Matte Opacity"} %meta{int,as_maya_attribute_connectable,0} %meta{int,as_maya_attribute_keyable,0} %meta{int,as_maya_attribute_hidden,1} %meta{int,as_blender_input_socket,0} %meta{int,gafferNoduleLayoutVisible,0} %meta{int,divider,1}  %read{18,18} %write{2147483647,-1}
param	float	in_matte_opacity	0		%meta{string,as_maya_attribute_name,"matteOpacity"} %meta{string,as_maya_attribute_short_name,"mao"} %meta{float,min,0} %meta{float,max,1} %meta{string,label,"Matte Opacity"} %meta{string,page,"Matte Opacity"} %meta{int,as_blender_input_socket,0} %meta{int,gafferNoduleLayoutVisible,0}  %read{19,19} %write{2147483647,-1}
param	color	in_matte_opacity_color	1 0.5 0		%meta{string,as_maya_attribute_name,"matteOpacityColor"} %meta{string,as_maya_attribute_short_name,"mac"} %meta{string,label,"Matte Opacity Color"} %meta{string,page,"Matte Opacity"} %meta{int,as_blender_input_socket,0} %meta{int,gafferNoduleLayoutVisible,0}  %read{19,19} %write{2147483647,-1}
param	int	in_maximum_ray_depth	100		%meta{string,as_maya_attribute_name,"maximumRayDepth"} %meta{string,as_maya_attribute_short_name,"mrd"} %meta{int,min,0} %meta{int,max,100} %meta{int,softmax,16} %meta{string,label,"Ray Depth"} %meta{string,page,"Advanced"} %meta{int,as_maya_attribute_connectable,0} %meta{int,as_maya_attribute_keyable,0} %meta{int,as_maya_attribute_hidden,1} %meta{int,as_blender_input_socket,0} %meta{int,gafferNoduleLayoutVisible,0}  %read{30,30} %write{2147483647,-1}
param	vector	Tn	0 0 0		%meta{int,lockgeom,0} %meta{int,as_maya_attribute_hidden,1} %meta{string,widget,"null"} %meta{int,as_blender_input_socket,0} %meta{int,gafferNoduleLayoutVisible,0}  %read{233,242} %write{2147483647,-1}
param	vector	Bn	0 0 0		%meta{int,lockgeom,0} %meta{int,as_maya_attribute_hidden,1} %meta{string,widget,"null"} %meta{int,as_blender_input_socket,0} %meta{int,gafferNoduleLayoutVisible,0}  %read{244,244} %write{2147483647,-1}
oparam	closure color	out_outColor			%meta{string,as_maya_attribute_name,"outColor"} %meta{string,as_maya_attribute_short_name,"oc"} %meta{string,widget,"null"}  %read{15,623} %write{15,623}
oparam	closure color	out_outTransparency			%meta{string,as_maya_attribute_name,"outTransparency"} %meta{string,as_maya_attribute_short_name,"ot"} %meta{string,widget,"null"}  %read{15,15} %write{14,14}
oparam	closure color	out_outMatteOpacity			%meta{string,as_maya_attribute_name,"outMatteOpacity"} %meta{string,as_maya_attribute_short_name,"om"} %meta{string,widget,"null"} %meta{int,as_maya_attribute_hidden,1} %meta{int,as_blender_input_socket,0} %meta{int,gafferNoduleLayoutVisible,0}  %read{20,20} %write{19,19}
global	vector	I	%read{54,362} %write{2147483647,-1}
global	normal	N	%read{0,1} %write{2147483647,-1}
local	vector	___254_axis	%read{259,261} %write{256,256}
local	float	___254_cosang	%read{258,299} %write{257,257}
local	float	___254_sinang	%read{269,294} %write{257,257}
local	float	___254_cosang1	%read{268,293} %write{258,258}
local	float	___254_x	%read{262,294} %write{259,259}
local	float	___254_y	%read{267,292} %write{260,260}
local	float	___254_z	%read{269,297} %write{261,261}
local	matrix	___254_M	%read{303,303} %write{301,301}
local	float	___334_anisotropy	%read{67,69} %write{64,65}
local	float	___368_eta_min	%read{397,419} %write{392,414}
local	float	___368_sqrt_f0	%read{394,417} %write{393,415}
local	float	___368_eta_max	%read{397,419} %write{396,418}
local	float	___369_nr	%read{434,462} %write{432,460}
local	float	___376_eta	%read{467,510} %write{467,510}
local	float	___376_etak	%read{467,510} %write{467,510}
local	float	___376_costheta_i2	%read{467,510} %write{467,510}
local	float	___376_sintheta_i2	%read{467,510} %write{467,510}
local	float	___376_eta2	%read{467,510} %write{467,510}
local	float	___376_etak2	%read{467,510} %write{467,510}
local	float	___376_t0	%read{467,510} %write{467,510}
local	float	___376_a2b2sum	%read{467,510} %write{467,510}
local	float	___376_t1	%read{467,510} %write{467,510}
local	float	___376_sqrt_a	%read{467,510} %write{467,510}
local	float	___376_t2	%read{467,510} %write{467,510}
local	float	___376_Rs	%read{467,510} %write{467,510}
local	float	___376_t3	%read{467,510} %write{467,510}
local	float	___376_t4	%read{467,510} %write{467,510}
local	float	___376_Rp	%read{467,510} %write{467,510}
local	int	compute_transparency	%read{12,186} %write{10,11}
local	int	ray_depth	%read{30,183} %write{25,26}
local	int	status	%read{27,27} %write{26,26}
local	color	opacity	%read{71,620} %write{38,38}
local	int	compute_coating	%read{49,382} %write{46,47}
local	color	coating_transmittance	%read{90,517} %write{48,130}
local	normal	___383_Nn	%read{55,69} %write{52,53}
local	float	___383_costheta_o	%read{80,114} %write{56,56}
local	float	___384_R0	%read{79,83} %write{78,78}
local	float	___384_Kr	%read{85,85} %write{83,83}
local	color	___385_absorption_coeff	%read{120,123} %write{108,121}
local	float	___385_max_depth	%read{116,116} %write{113,113}
local	float	___385_tau	%read{122,122} %write{116,116}
local	color	___385_fake_absorption	%read{128,128} %write{124,124}
local	int	compute_translucency	%read{190,348} %write{149,150}
local	int	compute_transmission	%read{194,307} %write{160,161}
local	int	compute_specular	%read{228,228} %write{170,171}
local	int	compute_diffuse	%read{338,338} %write{181,182}
local	int	compute_bssrdf	%read{340,567} %write{213,214}
local	int	compute_edf	%read{344,550} %write{224,225}
local	color	substrate_transmittance	%read{517,517} %write{226,516}
local	normal	Nn	%read{247,619} %write{227,227}
local	vector	___387_tangent	%read{302,333} %write{233,304}
local	vector	___389_vector_map	%read{241,246} %write{240,240}
local	float	___395_costheta_o	%read{373,510} %write{364,364}
local	float	___396_R0	%read{372,376} %write{371,371}
local	float	___396_Kr	%read{378,378} %write{376,376}
local	float	___397_exterior_n	%read{467,510} %write{383,384}
local	color	___397_Kr	%read{514,514} %write{385,510}
local	color	___397_n	%read{423,510} %write{420,420}
local	color	___397_k	%read{467,510} %write{464,464}
local	int	___398_i	%read{467,510} %write{466,510}
local	color	transmittance	%read{519,620} %write{517,517}
local	color	___401_edf_color	%read{541,564} %write{531,549}
local	color	___405_albedo	%read{570,580} %write{568,581}
local	string	___406_subsurface_profile	%read{594,594} %write{584,591}
local	color	___411_diffuse_color	%read{599,606} %write{597,597}
local	color	___411_translucency_color	%read{612,621} %write{610,610}
temp	float	$tmp1	%read{8,8} %write{7,7}
const	string	$const1	"max"		%read{2,611} %write{2147483647,-1}
const	int	$const2	0		%read{3,612} %write{2147483647,-1}
temp	float	$tmp2	%read{7,7} %write{3,3}
temp	float	$tmp3	%read{7,7} %write{6,6}
const	int	$const3	1		%read{4,613} %write{2147483647,-1}
temp	float	$tmp4	%read{6,6} %write{4,4}
const	int	$const4	2		%read{5,614} %write{2147483647,-1}
temp	float	$tmp5	%read{6,6} %write{5,5}
const	float	$const5	0		%read{8,617} %write{2147483647,-1}
temp	int	$tmp6	%read{9,9} %write{8,8}
temp	closure color	$tmp7	%read{14,14} %write{13,13}
const	string	$const6	"transparent"		%read{13,13} %write{2147483647,-1}
temp	int	$tmp8	%read{17,17} %write{16,16}
const	string	$const7	"transparency"		%read{16,16} %write{2147483647,-1}
const	string	$const8	"as_matte"		%read{19,19} %write{2147483647,-1}
temp	int	$tmp9	%read{23,23} %write{22,22}
const	string	$const9	"shadow"		%read{22,22} %write{2147483647,-1}
const	string	$const10	"path:ray_depth"		%read{26,26} %write{2147483647,-1}
temp	int	$tmp10	%read{28,28} %write{27,27}
temp	int	$tmp11	%read{29,33} %write{28,32}
temp	int	$tmp12	%read{31,31} %write{30,30}
temp	int	$tmp13	%read{32,32} %write{31,31}
const	float	$const11	1		%read{35,548} %write{2147483647,-1}
temp	int	$tmp14	%read{36,36} %write{35,35}
temp	int	$tmp15	%read{40,40} %write{39,39}
temp	int	$tmp16	%read{41,45} %write{40,44}
temp	int	$tmp17	%read{43,43} %write{42,42}
temp	int	$tmp18	%read{44,44} %write{43,43}
const	color	$const12	1 1 1		%read{48,226} %write{2147483647,-1}
temp	int	$tmp19	%read{51,51} %write{50,50}
temp	float	$tmp20	%read{56,56} %write{55,55}
temp	vector	$tmp21	%read{55,55} %write{54,54}
temp	int	$tmp22	%read{58,58} %write{57,57}
temp	closure color	$tmp23	%read{72,72} %write{67,69}
const	string	$const14	"microfacet"		%read{59,60} %write{2147483647,-1}
const	vector	$const15	0 0 0		%read{67,69} %write{2147483647,-1}
temp	int	$tmp25	%read{62,62} %write{61,61}
temp	float	$tmp26	%read{64,64} %write{63,63}
const	color	$const16	0 0 0		%read{67,385} %write{2147483647,-1}
const	string	$const17	"as_glass"		%read{67,309} %write{2147483647,-1}
const	string	$const18	"as_glossy"		%read{69,320} %write{2147483647,-1}
temp	color	$tmp31	%read{72,72} %write{71,71}
temp	closure color	$tmp32	%read{73,73} %write{72,72}
temp	float	$tmp33	%read{76,76} %write{74,74}
temp	float	$tmp34	%read{76,76} %write{75,75}
temp	float	$tmp35	%read{78,78} %write{76,76}
const	string	$const19	"sqr"		%read{77,499} %write{2147483647,-1}
temp	float	$tmp36	%read{82,82} %write{79,79}
temp	float	$tmp37	%read{82,82} %write{81,81}
temp	float	$tmp38	%read{81,81} %write{80,80}
const	float	$const20	5		%read{81,374} %write{2147483647,-1}
temp	float	$tmp39	%read{83,83} %write{82,82}
temp	float	$tmp40	%read{87,87} %write{86,86}
const	string	$const21	"clamp"		%read{84,579} %write{2147483647,-1}
temp	float	$tmp41	%read{86,86} %write{85,85}
temp	float	$tmp42	%read{88,88} %write{87,87}
temp	float	$tmp43	%read{95,95} %write{94,94}
temp	float	$tmp44	%read{94,94} %write{90,90}
temp	float	$tmp45	%read{94,94} %write{93,93}
temp	float	$tmp46	%read{93,93} %write{91,91}
temp	float	$tmp47	%read{93,93} %write{92,92}
temp	int	$tmp48	%read{96,96} %write{95,95}
temp	int	$tmp49	%read{97,107} %write{96,106}
temp	float	$tmp50	%read{104,104} %write{103,103}
const	string	$const22	"min"		%read{98,98} %write{2147483647,-1}
temp	float	$tmp51	%read{103,103} %write{99,99}
temp	float	$tmp52	%read{103,103} %write{102,102}
temp	float	$tmp53	%read{102,102} %write{100,100}
temp	float	$tmp54	%read{102,102} %write{101,101}
temp	int	$tmp55	%read{105,105} %write{104,104}
temp	int	$tmp56	%read{106,106} %write{105,105}
const	float	$const23	10000		%read{113,113} %write{2147483647,-1}
temp	float	$tmp57	%read{113,113} %write{112,112}
temp	float	$tmp58	%read{112,112} %write{110,110}
temp	float	$tmp59	%read{115,115} %write{114,114}
temp	float	$tmp60	%read{116,116} %write{115,115}
temp	color	$tmp61	%read{121,121} %write{117,117}
const	float	$const24	0.99000001		%read{118,578} %write{2147483647,-1}
temp	color	$tmp62	%read{120,120} %write{118,118}
temp	color	$tmp63	%read{121,121} %write{120,120}
temp	float	$tmp64	%read{123,123} %write{122,122}
temp	color	$tmp65	%read{124,124} %write{123,123}
temp	color	$tmp66	%read{130,130} %write{129,129}
temp	color	$tmp67	%read{129,129} %write{125,125}
temp	color	$tmp68	%read{128,128} %write{126,126}
temp	color	$tmp69	%read{129,129} %write{128,128}
temp	float	$tmp70	%read{137,137} %write{136,136}
temp	float	$tmp71	%read{136,136} %write{132,132}
temp	float	$tmp72	%read{136,136} %write{135,135}
temp	float	$tmp73	%read{135,135} %write{133,133}
temp	float	$tmp74	%read{135,135} %write{134,134}
const	float	$const25	9.99999997e-07		%read{137,524} %write{2147483647,-1}
temp	int	$tmp75	%read{138,138} %write{137,137}
temp	float	$tmp76	%read{146,146} %write{145,145}
temp	float	$tmp77	%read{145,145} %write{141,141}
temp	float	$tmp78	%read{145,145} %write{144,144}
temp	float	$tmp79	%read{144,144} %write{142,142}
temp	float	$tmp80	%read{144,144} %write{143,143}
temp	float	$tmp81	%read{147,147} %write{146,146}
temp	int	$tmp82	%read{148,148} %write{147,147}
temp	float	$tmp83	%read{157,157} %write{156,156}
temp	float	$tmp84	%read{156,156} %write{152,152}
temp	float	$tmp85	%read{156,156} %write{155,155}
temp	float	$tmp86	%read{155,155} %write{153,153}
temp	float	$tmp87	%read{155,155} %write{154,154}
temp	float	$tmp88	%read{158,158} %write{157,157}
temp	int	$tmp89	%read{159,159} %write{158,158}
temp	float	$tmp90	%read{168,168} %write{167,167}
temp	float	$tmp91	%read{167,167} %write{163,163}
temp	float	$tmp92	%read{167,167} %write{166,166}
temp	float	$tmp93	%read{166,166} %write{164,164}
temp	float	$tmp94	%read{166,166} %write{165,165}
temp	int	$tmp95	%read{169,169} %write{168,168}
temp	float	$tmp96	%read{178,178} %write{177,177}
temp	float	$tmp97	%read{177,177} %write{173,173}
temp	float	$tmp98	%read{177,177} %write{176,176}
temp	float	$tmp99	%read{176,176} %write{174,174}
temp	float	$tmp100	%read{176,176} %write{175,175}
temp	float	$tmp101	%read{179,179} %write{178,178}
temp	int	$tmp102	%read{180,180} %write{179,179}
temp	int	$tmp103	%read{184,184} %write{183,183}
temp	int	$tmp104	%read{185,188} %write{184,187}
temp	int	$tmp105	%read{187,187} %write{186,186}
temp	int	$tmp106	%read{189,192} %write{188,191}
temp	int	$tmp107	%read{191,191} %write{190,190}
temp	int	$tmp108	%read{193,196} %write{192,195}
temp	int	$tmp109	%read{195,195} %write{194,194}
temp	int	$tmp110	%read{197,201} %write{196,200}
temp	int	$tmp111	%read{199,199} %write{198,198}
temp	int	$tmp112	%read{200,200} %write{199,199}
temp	int	$tmp113	%read{202,212} %write{201,211}
temp	float	$tmp114	%read{209,209} %write{208,208}
temp	float	$tmp115	%read{208,208} %write{204,204}
temp	float	$tmp116	%read{208,208} %write{207,207}
temp	float	$tmp117	%read{207,207} %write{205,205}
temp	float	$tmp118	%read{207,207} %write{206,206}
temp	int	$tmp119	%read{210,210} %write{209,209}
temp	int	$tmp120	%read{211,211} %write{210,210}
temp	float	$tmp121	%read{221,221} %write{220,220}
temp	float	$tmp122	%read{220,220} %write{216,216}
temp	float	$tmp123	%read{220,220} %write{219,219}
temp	float	$tmp124	%read{219,219} %write{217,217}
temp	float	$tmp125	%read{219,219} %write{218,218}
temp	float	$tmp126	%read{222,222} %write{221,221}
temp	int	$tmp127	%read{223,223} %write{222,222}
temp	int	$tmp128	%read{229,232} %write{228,231}
temp	int	$tmp129	%read{231,231} %write{230,230}
temp	int	$tmp130	%read{235,235} %write{234,234}
temp	int	$tmp131	%read{237,237} %write{236,236}
const	float	$const26	2		%read{238,493} %write{2147483647,-1}
temp	vector	$tmp132	%read{239,239} %write{238,238}
temp	vector	$tmp133	%read{240,240} %write{239,239}
temp	float	$tmp134	%read{242,242} %write{241,241}
temp	vector	$tmp135	%read{245,245} %write{242,242}
temp	float	$tmp136	%read{244,244} %write{243,243}
temp	vector	$tmp137	%read{245,245} %write{244,244}
temp	vector	$tmp138	%read{248,248} %write{245,245}
temp	float	$tmp139	%read{247,247} %write{246,246}
temp	normal	$tmp140	%read{248,248} %write{247,247}
temp	vector	$tmp141	%read{249,249} %write{248,248}
temp	int	$tmp142	%read{251,251} %write{250,250}
const	float	$const27	6.28318548		%read{252,252} %write{2147483647,-1}
temp	float	$tmp143	%read{257,257} %write{252,252}
const	point	$const28	0 0 0		%read{255,304} %write{2147483647,-1}
temp	point	$tmp145	%read{255,255} %write{253,253}
const	string	$const29	"rotate"		%read{254,254} %write{2147483647,-1}
temp	vector	$tmp146	%read{256,256} %write{255,255}
temp	float	$tmp147	%read{266,266} %write{262,262}
temp	float	$tmp148	%read{264,264} %write{263,263}
temp	float	$tmp149	%read{265,265} %write{264,264}
temp	float	$tmp150	%read{266,266} %write{265,265}
temp	float	$tmp151	%read{301,301} %write{266,266}
temp	float	$tmp152	%read{268,268} %write{267,267}
temp	float	$tmp153	%read{270,270} %write{268,268}
temp	float	$tmp154	%read{270,270} %write{269,269}
temp	float	$tmp155	%read{301,301} %write{270,270}
temp	float	$tmp156	%read{272,272} %write{271,271}
temp	float	$tmp157	%read{274,274} %write{272,272}
temp	float	$tmp158	%read{274,274} %write{273,273}
temp	float	$tmp159	%read{301,301} %write{274,274}
temp	float	$tmp160	%read{276,276} %write{275,275}
temp	float	$tmp161	%read{278,278} %write{276,276}
temp	float	$tmp162	%read{278,278} %write{277,277}
temp	float	$tmp163	%read{301,301} %write{278,278}
temp	float	$tmp164	%read{283,283} %write{279,279}
temp	float	$tmp165	%read{281,281} %write{280,280}
temp	float	$tmp166	%read{282,282} %write{281,281}
temp	float	$tmp167	%read{283,283} %write{282,282}
temp	float	$tmp168	%read{301,301} %write{283,283}
temp	float	$tmp169	%read{285,285} %write{284,284}
temp	float	$tmp170	%read{287,287} %write{285,285}
temp	float	$tmp171	%read{287,287} %write{286,286}
temp	float	$tmp172	%read{301,301} %write{287,287}
temp	float	$tmp173	%read{289,289} %write{288,288}
temp	float	$tmp174	%read{291,291} %write{289,289}
temp	float	$tmp175	%read{291,291} %write{290,290}
temp	float	$tmp176	%read{301,301} %write{291,291}
temp	float	$tmp177	%read{293,293} %write{292,292}
temp	float	$tmp178	%read{295,295} %write{293,293}
temp	float	$tmp179	%read{295,295} %write{294,294}
temp	float	$tmp180	%read{301,301} %write{295,295}
temp	float	$tmp181	%read{300,300} %write{296,296}
temp	float	$tmp182	%read{298,298} %write{297,297}
temp	float	$tmp183	%read{299,299} %write{298,298}
temp	float	$tmp184	%read{300,300} %write{299,299}
temp	float	$tmp185	%read{301,301} %write{300,300}
temp	vector	$tmp186	%read{304,304} %write{303,303}
temp	vector	$tmp187	%read{303,303} %write{302,302}
temp	int	$tmp188	%read{306,306} %write{305,305}
temp	closure color	$tmp189	%read{310,310} %write{309,309}
temp	color	$tmp190	%read{309,309} %write{308,308}
temp	closure color	$tmp191	%read{311,311} %write{310,310}
temp	float	$tmp192	%read{318,318} %write{317,317}
temp	float	$tmp193	%read{317,317} %write{313,313}
temp	float	$tmp194	%read{317,317} %write{316,316}
temp	float	$tmp195	%read{316,316} %write{314,314}
temp	float	$tmp196	%read{316,316} %write{315,315}
temp	int	$tmp197	%read{319,319} %write{318,318}
temp	closure color	$tmp198	%read{323,323} %write{320,320}
temp	color	$tmp199	%read{322,322} %write{321,321}
temp	color	$tmp200	%read{323,323} %write{322,322}
temp	closure color	$tmp201	%read{324,324} %write{323,323}
temp	float	$tmp202	%read{331,331} %write{330,330}
temp	float	$tmp203	%read{330,330} %write{326,326}
temp	float	$tmp204	%read{330,330} %write{329,329}
temp	float	$tmp205	%read{329,329} %write{327,327}
temp	float	$tmp206	%read{329,329} %write{328,328}
temp	int	$tmp207	%read{332,332} %write{331,331}
temp	closure color	$tmp208	%read{336,336} %write{333,333}
const	string	$const30	"as_metal"		%read{333,333} %write{2147483647,-1}
temp	color	$tmp209	%read{335,335} %write{334,334}
temp	color	$tmp210	%read{336,336} %write{335,335}
temp	closure color	$tmp211	%read{337,337} %write{336,336}
temp	int	$tmp212	%read{339,342} %write{338,341}
temp	int	$tmp213	%read{341,341} %write{340,340}
temp	int	$tmp214	%read{343,346} %write{342,345}
temp	int	$tmp215	%read{345,345} %write{344,344}
temp	int	$tmp216	%read{347,350} %write{346,349}
temp	int	$tmp217	%read{349,349} %write{348,348}
temp	int	$tmp218	%read{351,361} %write{350,360}
temp	float	$tmp219	%read{358,358} %write{357,357}
temp	float	$tmp220	%read{357,357} %write{353,353}
temp	float	$tmp221	%read{357,357} %write{356,356}
temp	float	$tmp222	%read{356,356} %write{354,354}
temp	float	$tmp223	%read{356,356} %write{355,355}
temp	int	$tmp224	%read{359,359} %write{358,358}
temp	int	$tmp225	%read{360,360} %write{359,359}
temp	float	$tmp226	%read{364,364} %write{363,363}
temp	vector	$tmp227	%read{363,363} %write{362,362}
temp	int	$tmp228	%read{366,366} %write{365,365}
temp	float	$tmp229	%read{369,369} %write{367,367}
temp	float	$tmp230	%read{369,369} %write{368,368}
temp	float	$tmp231	%read{371,371} %write{369,369}
temp	float	$tmp232	%read{375,375} %write{372,372}
temp	float	$tmp233	%read{375,375} %write{374,374}
temp	float	$tmp234	%read{374,374} %write{373,373}
temp	float	$tmp235	%read{376,376} %write{375,375}
temp	float	$tmp236	%read{380,380} %write{379,379}
temp	float	$tmp237	%read{379,379} %write{378,378}
temp	float	$tmp238	%read{381,381} %write{380,380}
const	string	$const31	"get_eta"		%read{386,411} %write{2147483647,-1}
temp	float	$tmp239	%read{420,420} %write{397,397}
temp	float	$tmp240	%read{390,393} %write{387,387}
temp	float	$tmp241	%read{397,397} %write{388,388}
temp	float	$tmp242	%read{392,392} %write{390,390}
temp	float	$tmp243	%read{392,392} %write{391,391}
temp	float	$tmp244	%read{396,396} %write{394,394}
temp	float	$tmp245	%read{396,396} %write{395,395}
temp	float	$tmp246	%read{420,420} %write{408,408}
temp	float	$tmp247	%read{401,404} %write{398,398}
temp	float	$tmp248	%read{408,408} %write{399,399}
temp	float	$tmp249	%read{403,403} %write{401,401}
temp	float	$tmp250	%read{403,403} %write{402,402}
temp	float	$tmp251	%read{407,407} %write{405,405}
temp	float	$tmp252	%read{407,407} %write{406,406}
temp	float	$tmp253	%read{420,420} %write{419,419}
temp	float	$tmp254	%read{412,415} %write{409,409}
temp	float	$tmp255	%read{419,419} %write{410,410}
temp	float	$tmp256	%read{414,414} %write{412,412}
temp	float	$tmp257	%read{414,414} %write{413,413}
temp	float	$tmp258	%read{418,418} %write{416,416}
temp	float	$tmp259	%read{418,418} %write{417,417}
const	string	$const32	"get_kappa"		%read{421,452} %write{2147483647,-1}
temp	float	$tmp260	%read{464,464} %write{435,435}
temp	float	$tmp261	%read{428,433} %write{422,422}
temp	float	$tmp262	%read{425,429} %write{423,423}
temp	float	$tmp263	%read{428,428} %write{427,427}
temp	float	$tmp264	%read{427,427} %write{425,425}
temp	float	$tmp265	%read{432,432} %write{428,428}
temp	float	$tmp266	%read{432,432} %write{431,431}
temp	float	$tmp267	%read{431,431} %write{429,429}
temp	float	$tmp268	%read{434,434} %write{433,433}
temp	float	$tmp269	%read{435,435} %write{434,434}
temp	float	$tmp270	%read{464,464} %write{449,449}
temp	float	$tmp271	%read{442,447} %write{436,436}
temp	float	$tmp272	%read{439,443} %write{437,437}
temp	float	$tmp273	%read{442,442} %write{441,441}
temp	float	$tmp274	%read{441,441} %write{439,439}
temp	float	$tmp275	%read{446,446} %write{442,442}
temp	float	$tmp276	%read{446,446} %write{445,445}
temp	float	$tmp277	%read{445,445} %write{443,443}
temp	float	$tmp278	%read{448,448} %write{447,447}
temp	float	$tmp279	%read{449,449} %write{448,448}
temp	float	$tmp280	%read{464,464} %write{463,463}
temp	float	$tmp281	%read{456,461} %write{450,450}
temp	float	$tmp282	%read{453,457} %write{451,451}
temp	float	$tmp283	%read{456,456} %write{455,455}
temp	float	$tmp284	%read{455,455} %write{453,453}
temp	float	$tmp285	%read{460,460} %write{456,456}
temp	float	$tmp286	%read{460,460} %write{459,459}
temp	float	$tmp287	%read{459,459} %write{457,457}
temp	float	$tmp288	%read{462,462} %write{461,461}
temp	float	$tmp289	%read{463,463} %write{462,462}
const	int	$const33	3		%read{467,467} %write{2147483647,-1}
temp	int	$tmp290	%read{467,510} %write{467,510}
temp	int	$tmp291	%read{465,510} %write{466,510}
temp	float	$tmp292	%read{467,510} %write{467,510}
temp	float	$tmp293	%read{467,510} %write{467,510}
temp	float	$tmp294	%read{467,510} %write{467,510}
const	string	$const34	"dielectricConductorFresnel"		%read{471,471} %write{2147483647,-1}
temp	float	$tmp295	%read{467,510} %write{467,510}
temp	float	$tmp296	%read{467,510} %write{467,510}
const	float	$const35	4		%read{485,485} %write{2147483647,-1}
temp	float	$tmp297	%read{467,510} %write{467,510}
temp	float	$tmp298	%read{467,510} %write{467,510}
temp	float	$tmp299	%read{467,510} %write{467,510}
const	float	$const36	0.5		%read{491,508} %write{2147483647,-1}
temp	float	$tmp300	%read{467,510} %write{467,510}
temp	float	$tmp301	%read{467,510} %write{467,510}
temp	float	$tmp302	%read{467,510} %write{467,510}
temp	float	$tmp303	%read{467,510} %write{467,510}
temp	float	$tmp304	%read{467,510} %write{467,510}
temp	float	$tmp305	%read{467,510} %write{467,510}
temp	float	$tmp306	%read{467,510} %write{467,510}
temp	float	$tmp307	%read{467,510} %write{467,510}
temp	float	$tmp308	%read{467,510} %write{467,510}
temp	float	$tmp309	%read{467,510} %write{467,510}
temp	float	$tmp310	%read{467,510} %write{467,510}
temp	color	$tmp311	%read{516,516} %write{515,515}
temp	color	$tmp312	%read{515,515} %write{511,511}
temp	color	$tmp313	%read{514,514} %write{512,512}
temp	color	$tmp314	%read{515,515} %write{514,514}
temp	float	$tmp315	%read{524,524} %write{523,523}
temp	float	$tmp316	%read{523,523} %write{519,519}
temp	float	$tmp317	%read{523,523} %write{522,522}
temp	float	$tmp318	%read{522,522} %write{520,520}
temp	float	$tmp319	%read{522,522} %write{521,521}
temp	int	$tmp320	%read{525,525} %write{524,524}
temp	int	$tmp321	%read{528,528} %write{527,527}
const	string	$const37	"light"		%read{527,527} %write{2147483647,-1}
temp	int	$tmp322	%read{530,530} %write{529,529}
temp	color	$tmp323	%read{534,534} %write{533,533}
temp	float	$tmp324	%read{533,533} %write{532,532}
temp	int	$tmp325	%read{536,539} %write{535,538}
temp	int	$tmp326	%read{538,538} %write{537,537}
temp	float	$tmp327	%read{541,541} %write{540,540}
temp	int	$tmp328	%read{543,546} %write{542,545}
temp	int	$tmp329	%read{545,545} %write{544,544}
temp	float	$tmp330	%read{548,548} %write{547,547}
temp	float	$tmp331	%read{549,549} %write{548,548}
temp	int	$tmp332	%read{551,561} %write{550,560}
temp	float	$tmp333	%read{558,558} %write{557,557}
temp	float	$tmp334	%read{557,557} %write{553,553}
temp	float	$tmp335	%read{557,557} %write{556,556}
temp	float	$tmp336	%read{556,556} %write{554,554}
temp	float	$tmp337	%read{556,556} %write{555,555}
temp	int	$tmp338	%read{559,559} %write{558,558}
temp	int	$tmp339	%read{560,560} %write{559,559}
temp	closure color	$tmp340	%read{565,565} %write{562,562}
const	string	$const38	"emission"		%read{562,562} %write{2147483647,-1}
temp	color	$tmp341	%read{564,564} %write{563,563}
temp	color	$tmp342	%read{565,565} %write{564,564}
temp	closure color	$tmp343	%read{566,566} %write{565,565}
temp	float	$tmp344	%read{575,575} %write{574,574}
temp	float	$tmp345	%read{574,574} %write{570,570}
temp	float	$tmp346	%read{574,574} %write{573,573}
temp	float	$tmp347	%read{573,573} %write{571,571}
temp	float	$tmp348	%read{573,573} %write{572,572}
temp	int	$tmp349	%read{576,576} %write{575,575}
const	float	$const39	0.00999999978		%read{577,577} %write{2147483647,-1}
temp	color	$tmp350	%read{581,581} %write{577,577}
temp	color	$tmp351	%read{580,580} %write{578,578}
temp	color	$tmp352	%read{581,581} %write{580,580}
temp	int	$tmp353	%read{583,583} %write{582,582}
const	string	$const40	"gaussian"		%read{584,584} %write{2147483647,-1}
temp	int	$tmp354	%read{586,586} %write{585,585}
const	string	$const41	"better_dipole"		%read{587,587} %write{2147483647,-1}
temp	int	$tmp355	%read{589,589} %write{588,588}
const	string	$const42	"normalized_diffusion"		%read{590,590} %write{2147483647,-1}
const	string	$const43	"randomwalk"		%read{591,591} %write{2147483647,-1}
temp	closure color	$tmp356	%read{595,595} %write{594,594}
temp	color	$tmp357	%read{594,594} %write{592,592}
temp	color	$tmp358	%read{594,594} %write{593,593}
const	string	$const44	"fresnel_weight"		%read{594,594} %write{2147483647,-1}
const	string	$const45	"as_subsurface"		%read{594,594} %write{2147483647,-1}
temp	closure color	$tmp359	%read{596,596} %write{595,595}
temp	float	$tmp360	%read{604,604} %write{603,603}
temp	float	$tmp361	%read{603,603} %write{599,599}
temp	float	$tmp362	%read{603,603} %write{602,602}
temp	float	$tmp363	%read{602,602} %write{600,600}
temp	float	$tmp364	%read{602,602} %write{601,601}
temp	int	$tmp365	%read{605,605} %write{604,604}
temp	closure color	$tmp366	%read{608,608} %write{606,606}
const	string	$const46	"as_oren_nayar"		%read{606,606} %write{2147483647,-1}
temp	color	$tmp367	%read{608,608} %write{607,607}
temp	closure color	$tmp368	%read{609,609} %write{608,608}
temp	float	$tmp369	%read{617,617} %write{616,616}
temp	float	$tmp370	%read{616,616} %write{612,612}
temp	float	$tmp371	%read{616,616} %write{615,615}
temp	float	$tmp372	%read{615,615} %write{613,613}
temp	float	$tmp373	%read{615,615} %write{614,614}
temp	int	$tmp374	%read{618,618} %write{617,617}
temp	closure color	$tmp375	%read{622,622} %write{619,619}
const	string	$const47	"translucent"		%read{619,619} %write{2147483647,-1}
temp	color	$tmp376	%read{621,621} %write{620,620}
temp	color	$tmp377	%read{622,622} %write{621,621}
temp	closure color	$tmp378	%read{623,623} %write{622,622}
code in_bump_normal_coating
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:461
#     normal in_bump_normal_coating = N
	assign		in_bump_normal_coating N 	%filename{"N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl"} %line{461} %argrw{"wr"}
code in_bump_normal_substrate
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:469
#     normal in_bump_normal_substrate = N
	assign		in_bump_normal_substrate N 	%filename{"N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl"} %line{469} %argrw{"wr"}
code ___main___
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:565
#     int compute_transparency = (max(in_transparency) > 0.0) ? 1 : 0;
	functioncall	$const1 8 	%filename{"N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl"} %line{565} %argrw{"r"}
# N:\appleseed\appleseed\sandbox\shaders\as_osl_extensions.h:48
# float max(color C)  { return max(C[0], max(C[1], C[2])); }
	compref		$tmp2 in_transparency $const2 	%filename{"N:\appleseed\appleseed\sandbox\shaders\as_osl_extensions.h"} %line{48} %argrw{"wrr"}
	compref		$tmp4 in_transparency $const3 	%argrw{"wrr"}
	compref		$tmp5 in_transparency $const4 	%argrw{"wrr"}
	max		$tmp3 $tmp4 $tmp5 	%argrw{"wrr"}
	max		$tmp1 $tmp2 $tmp3 	%argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:565
#     int compute_transparency = (max(in_transparency) > 0.0) ? 1 : 0;
	gt		$tmp6 $tmp1 $const5 	%filename{"N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl"} %line{565} %argrw{"wrr"}
	if		$tmp6 11 12 	%argrw{"r"}
	assign		compute_transparency $const3 	%argrw{"wr"}
	assign		compute_transparency $const2 	%argrw{"wr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:567
#     if (compute_transparency)
	if		compute_transparency 16 16 	%line{567} %argrw{"r"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:569
#         out_outTransparency = in_transparency * transparent();
	closure		$tmp7 $const6 	%line{569} %argrw{"wr"}
	mul		out_outTransparency $tmp7 in_transparency 	%argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:570
#         out_outColor += out_outTransparency;
	add		out_outColor out_outColor out_outTransparency 	%line{570} %argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:573
#     if (raytype("transparency"))
	raytype		$tmp8 $const7 	%line{573} %argrw{"wr"}
	if		$tmp8 22 22 	%argrw{"r"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:575
#         if (in_enable_matte)
	if		in_enable_matte 21 21 	%line{575} %argrw{"r"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:577
#             out_outMatteOpacity = as_matte(
	closure		out_outMatteOpacity $const8 in_matte_opacity_color in_matte_opacity 	%line{577} %argrw{"wrrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:581
#             out_outColor += out_outMatteOpacity;
	add		out_outColor out_outColor out_outMatteOpacity 	%line{581} %argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:583
#         return;
	exit	%line{583}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:586
#     if (raytype("shadow"))
	raytype		$tmp9 $const9 	%line{586} %argrw{"wr"}
	if		$tmp9 25 25 	%argrw{"r"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:588
#         return;
	exit	%line{588}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:591
#     int ray_depth = 0;
	assign		ray_depth $const2 	%line{591} %argrw{"wr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:592
#     int status = getattribute("path:ray_depth", ray_depth);
	getattribute	status $const10 ray_depth 	%line{592} %argrw{"wrw"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:594
#     if (!status || ray_depth > in_maximum_ray_depth)
	eq		$tmp10 status $const2 	%line{594} %argrw{"wrr"}
	neq		$tmp11 $tmp10 $const2 	%argrw{"wrr"}
	if		$tmp11 30 33 	%argrw{"r"}
	gt		$tmp12 ray_depth in_maximum_ray_depth 	%argrw{"wrr"}
	neq		$tmp13 $tmp12 $const2 	%argrw{"wrr"}
	assign		$tmp11 $tmp13 	%argrw{"wr"}
	if		$tmp11 35 35 	%argrw{"r"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:596
#         return;
	exit	%line{596}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:599
#     if (in_transparency == 1.0)
	eq		$tmp14 in_transparency $const11 	%line{599} %argrw{"wrr"}
	if		$tmp14 38 38 	%argrw{"r"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:601
#         return;
	exit	%line{601}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:604
#     color opacity = 1.0 - in_transparency;
	sub		opacity $const11 in_transparency 	%line{604} %argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:609
#         (in_coating_reflectivity > 0.0 || in_coating_depth > 0.0) ? 1 : 0;
	gt		$tmp15 in_coating_reflectivity $const5 	%line{609} %argrw{"wrr"}
	neq		$tmp16 $tmp15 $const2 	%argrw{"wrr"}
	if		$tmp16 42 45 	%argrw{"r"}
	gt		$tmp17 in_coating_depth $const5 	%argrw{"wrr"}
	neq		$tmp18 $tmp17 $const2 	%argrw{"wrr"}
	assign		$tmp16 $tmp18 	%argrw{"wr"}
	if		$tmp16 47 48 	%argrw{"r"}
	assign		compute_coating $const3 	%argrw{"wr"}
	assign		compute_coating $const2 	%argrw{"wr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:611
#     color coating_transmittance = color(1);
	assign		coating_transmittance $const12 	%line{611} %argrw{"wr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:613
#     if (compute_coating)
	if		compute_coating 140 140 	%line{613} %argrw{"r"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:615
#         normal Nn = isconnected(in_bump_normal_coating)
	isconnected	$tmp19 in_bump_normal_coating 	%line{615} %argrw{"wr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:616
#             ? normalize(in_bump_normal_coating)
	if		$tmp19 53 54 	%line{616} %argrw{"r"}
	normalize	___383_Nn in_bump_normal_coating 	%argrw{"wr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:617
#             : normalize(in_bump_normal_substrate);
	normalize	___383_Nn in_bump_normal_substrate 	%line{617} %argrw{"wr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:619
#         float costheta_o = max(0.0, dot(-I, Nn));
	neg		$tmp21 I 	%line{619} %argrw{"wr"}
	dot		$tmp20 $tmp21 ___383_Nn 	%argrw{"wrr"}
	max		___383_costheta_o $const5 $tmp20 	%argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:621
#         if (in_coating_ior > 1.0)
	gt		$tmp22 in_coating_ior $const11 	%line{621} %argrw{"wrr"}
	if		$tmp22 89 89 	%argrw{"r"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:624
#                 in_coating_reflectivity * microfacet(
	functioncall	$const14 71 	%line{624} %argrw{"r"}
# N:\appleseed\appleseed\sandbox\shaders\stdosl.h:603
#     return microfacet(
	functioncall	$const14 71 	%filename{"N:\appleseed\appleseed\sandbox\shaders\stdosl.h"} %line{603} %argrw{"r"}
# N:\appleseed\appleseed\sandbox\shaders\stdosl.h:569
#     float anisotropy = (yalpha > 0.0) ? 1.0 - (xalpha / yalpha) : 0.0;
	gt		$tmp25 in_coating_roughness $const5 	%line{569} %argrw{"wrr"}
	if		$tmp25 65 66 	%argrw{"r"}
	div		$tmp26 in_coating_roughness in_coating_roughness 	%argrw{"wrr"}
	sub		___334_anisotropy $const11 $tmp26 	%argrw{"wrr"}
	assign		___334_anisotropy $const5 	%argrw{"wr"}
# N:\appleseed\appleseed\sandbox\shaders\stdosl.h:571
#     if (refract)
	if		$const2 69 71 	%line{571} %argrw{"r"}
# N:\appleseed\appleseed\sandbox\shaders\stdosl.h:573
#         return as_glass(
	closure		$tmp23 $const17 ___383_Nn $const15 $const12 $const16 $const12 in_coating_roughness ___334_anisotropy in_coating_ior $const12 $const5 	%line{573} %argrw{"wrrrrrrrrrrr"}
# N:\appleseed\appleseed\sandbox\shaders\stdosl.h:583
#             0.0);       // volume transmittance distance
	return	%line{583}
# N:\appleseed\appleseed\sandbox\shaders\stdosl.h:587
#         return as_glossy(
	closure		$tmp23 $const18 ___383_Nn $const15 in_coating_roughness ___334_anisotropy in_coating_ior 	%line{587} %argrw{"wrrrrrr"}
# N:\appleseed\appleseed\sandbox\shaders\stdosl.h:592
#             eta);
	return	%line{592}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:623
#             out_outColor += opacity *
	mul		$tmp31 opacity in_coating_reflectivity 	%filename{"N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl"} %line{623} %argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:624
#                 in_coating_reflectivity * microfacet(
	mul		$tmp32 $tmp23 $tmp31 	%line{624} %argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:629
#                     0);
	add		out_outColor out_outColor $tmp32 	%line{629} %argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:633
#             float R0 = sqr((in_coating_ior - 1.0) / (in_coating_ior + 1.0));
	sub		$tmp33 in_coating_ior $const11 	%line{633} %argrw{"wrr"}
	add		$tmp34 in_coating_ior $const11 	%argrw{"wrr"}
	div		$tmp35 $tmp33 $tmp34 	%argrw{"wrr"}
	functioncall	$const19 79 	%argrw{"r"}
# N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\math\as_math_helpers.h:34
# float sqr(float x) { return x * x; }
	mul		___384_R0 $tmp35 $tmp35 	%filename{"N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\math\as_math_helpers.h"} %line{34} %argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:634
#             float Kr = R0 + (1.0 - R0) * pow(1.0 - costheta_o, 5.0);
	sub		$tmp36 $const11 ___384_R0 	%filename{"N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl"} %line{634} %argrw{"wrr"}
	sub		$tmp38 $const11 ___383_costheta_o 	%argrw{"wrr"}
	pow		$tmp37 $tmp38 $const20 	%argrw{"wrr"}
	mul		$tmp39 $tmp36 $tmp37 	%argrw{"wrr"}
	add		___384_Kr ___384_R0 $tmp39 	%argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:636
#             coating_transmittance = 1.0 - clamp(Kr, 0.0, 1.0);
	functioncall	$const21 87 	%line{636} %argrw{"r"}
# N:\appleseed\appleseed\sandbox\shaders\stdosl.h:145
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp41 ___384_Kr $const11 	%filename{"N:\appleseed\appleseed\sandbox\shaders\stdosl.h"} %line{145} %argrw{"wrr"}
	max		$tmp40 $tmp41 $const5 	%argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:636
#             coating_transmittance = 1.0 - clamp(Kr, 0.0, 1.0);
	sub		$tmp42 $const11 $tmp40 	%filename{"N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl"} %line{636} %argrw{"wrr"}
	assign		coating_transmittance $tmp42 	%argrw{"wr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:639
#         if (max(coating_transmittance) > 0.0 &&
	functioncall	$const1 95 	%line{639} %argrw{"r"}
# N:\appleseed\appleseed\sandbox\shaders\as_osl_extensions.h:48
# float max(color C)  { return max(C[0], max(C[1], C[2])); }
	compref		$tmp44 coating_transmittance $const2 	%filename{"N:\appleseed\appleseed\sandbox\shaders\as_osl_extensions.h"} %line{48} %argrw{"wrr"}
	compref		$tmp46 coating_transmittance $const3 	%argrw{"wrr"}
	compref		$tmp47 coating_transmittance $const4 	%argrw{"wrr"}
	max		$tmp45 $tmp46 $tmp47 	%argrw{"wrr"}
	max		$tmp43 $tmp44 $tmp45 	%argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:639
#         if (max(coating_transmittance) > 0.0 &&
	gt		$tmp48 $tmp43 $const5 	%filename{"N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl"} %line{639} %argrw{"wrr"}
	neq		$tmp49 $tmp48 $const2 	%argrw{"wrr"}
	if		$tmp49 107 107 	%argrw{"r"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:640
#             min(in_coating_absorption) < 1.0)
	functioncall	$const22 104 	%line{640} %argrw{"r"}
# N:\appleseed\appleseed\sandbox\shaders\as_osl_extensions.h:47
# float min(color C)  { return min(C[0], min(C[1], C[2])); }
	compref		$tmp51 in_coating_absorption $const2 	%filename{"N:\appleseed\appleseed\sandbox\shaders\as_osl_extensions.h"} %line{47} %argrw{"wrr"}
	compref		$tmp53 in_coating_absorption $const3 	%argrw{"wrr"}
	compref		$tmp54 in_coating_absorption $const4 	%argrw{"wrr"}
	min		$tmp52 $tmp53 $tmp54 	%argrw{"wrr"}
	min		$tmp50 $tmp51 $tmp52 	%argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:640
#             min(in_coating_absorption) < 1.0)
	lt		$tmp55 $tmp50 $const11 	%filename{"N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl"} %line{640} %argrw{"wrr"}
	neq		$tmp56 $tmp55 $const2 	%argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:639
#         if (max(coating_transmittance) > 0.0 &&
	assign		$tmp49 $tmp56 	%line{639} %argrw{"wr"}
	if		$tmp49 131 131 	%argrw{"r"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:642
#             color absorption_coeff = 1.0 - in_coating_absorption;
	sub		___385_absorption_coeff $const11 in_coating_absorption 	%line{642} %argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:646
#             float max_depth = 10000.0 * sqr(sqr(in_coating_depth));
	functioncall	$const19 111 	%line{646} %argrw{"r"}
# N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\math\as_math_helpers.h:34
# float sqr(float x) { return x * x; }
	mul		$tmp58 in_coating_depth in_coating_depth 	%filename{"N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\math\as_math_helpers.h"} %line{34} %argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:646
#             float max_depth = 10000.0 * sqr(sqr(in_coating_depth));
	functioncall	$const19 113 	%filename{"N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl"} %line{646} %argrw{"r"}
# N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\math\as_math_helpers.h:34
# float sqr(float x) { return x * x; }
	mul		$tmp57 $tmp58 $tmp58 	%filename{"N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\math\as_math_helpers.h"} %line{34} %argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:646
#             float max_depth = 10000.0 * sqr(sqr(in_coating_depth));
	mul		___385_max_depth $const23 $tmp57 	%filename{"N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl"} %line{646} %argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:647
#             float tau = max_depth * (1.0 - max(0.0, costheta_o));
	max		$tmp59 $const5 ___383_costheta_o 	%line{647} %argrw{"wrr"}
	sub		$tmp60 $const11 $tmp59 	%argrw{"wrr"}
	mul		___385_tau ___385_max_depth $tmp60 	%argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:650
#             absorption_coeff = clamp(absorption_coeff, 0.0, 0.99);
	assign		$tmp61 $const5 	%line{650} %argrw{"wr"}
	assign		$tmp62 $const24 	%argrw{"wr"}
	functioncall	$const21 122 	%argrw{"r"}
# N:\appleseed\appleseed\sandbox\shaders\stdosl.h:144
# color  clamp (color x, color minval, color maxval) { return max(min(x,maxval),minval); }
	min		$tmp63 ___385_absorption_coeff $tmp62 	%filename{"N:\appleseed\appleseed\sandbox\shaders\stdosl.h"} %line{144} %argrw{"wrr"}
	max		___385_absorption_coeff $tmp63 $tmp61 	%argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:652
#             color fake_absorption = exp(-tau * absorption_coeff);
	neg		$tmp64 ___385_tau 	%filename{"N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl"} %line{652} %argrw{"wr"}
	mul		$tmp65 $tmp64 ___385_absorption_coeff 	%argrw{"wrr"}
	exp		___385_fake_absorption $tmp65 	%argrw{"wr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:654
#             coating_transmittance *= clamp(fake_absorption, 0.0, 1.0);
	assign		$tmp67 $const5 	%line{654} %argrw{"wr"}
	assign		$tmp68 $const11 	%argrw{"wr"}
	functioncall	$const21 130 	%argrw{"r"}
# N:\appleseed\appleseed\sandbox\shaders\stdosl.h:144
# color  clamp (color x, color minval, color maxval) { return max(min(x,maxval),minval); }
	min		$tmp69 ___385_fake_absorption $tmp68 	%filename{"N:\appleseed\appleseed\sandbox\shaders\stdosl.h"} %line{144} %argrw{"wrr"}
	max		$tmp66 $tmp69 $tmp67 	%argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:654
#             coating_transmittance *= clamp(fake_absorption, 0.0, 1.0);
	mul		coating_transmittance coating_transmittance $tmp66 	%filename{"N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl"} %line{654} %argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:657
#         if (max(coating_transmittance) <= EPS)
	functioncall	$const1 137 	%line{657} %argrw{"r"}
# N:\appleseed\appleseed\sandbox\shaders\as_osl_extensions.h:48
# float max(color C)  { return max(C[0], max(C[1], C[2])); }
	compref		$tmp71 coating_transmittance $const2 	%filename{"N:\appleseed\appleseed\sandbox\shaders\as_osl_extensions.h"} %line{48} %argrw{"wrr"}
	compref		$tmp73 coating_transmittance $const3 	%argrw{"wrr"}
	compref		$tmp74 coating_transmittance $const4 	%argrw{"wrr"}
	max		$tmp72 $tmp73 $tmp74 	%argrw{"wrr"}
	max		$tmp70 $tmp71 $tmp72 	%argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:657
#         if (max(coating_transmittance) <= EPS)
	le		$tmp75 $tmp70 $const25 	%filename{"N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl"} %line{657} %argrw{"wrr"}
	if		$tmp75 140 140 	%argrw{"r"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:659
#             return;
	exit	%line{659}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:664
#         (in_translucency_weight * max(in_translucency_color) > 0.0) ? 1 : 0;
	functioncall	$const1 146 	%line{664} %argrw{"r"}
# N:\appleseed\appleseed\sandbox\shaders\as_osl_extensions.h:48
# float max(color C)  { return max(C[0], max(C[1], C[2])); }
	compref		$tmp77 in_translucency_color $const2 	%filename{"N:\appleseed\appleseed\sandbox\shaders\as_osl_extensions.h"} %line{48} %argrw{"wrr"}
	compref		$tmp79 in_translucency_color $const3 	%argrw{"wrr"}
	compref		$tmp80 in_translucency_color $const4 	%argrw{"wrr"}
	max		$tmp78 $tmp79 $tmp80 	%argrw{"wrr"}
	max		$tmp76 $tmp77 $tmp78 	%argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:664
#         (in_translucency_weight * max(in_translucency_color) > 0.0) ? 1 : 0;
	mul		$tmp81 in_translucency_weight $tmp76 	%filename{"N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl"} %line{664} %argrw{"wrr"}
	gt		$tmp82 $tmp81 $const5 	%argrw{"wrr"}
	if		$tmp82 150 151 	%argrw{"r"}
	assign		compute_translucency $const3 	%argrw{"wr"}
	assign		compute_translucency $const2 	%argrw{"wr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:667
#         (in_refraction_amount * max(in_refraction_tint) > 0.0) ? 1 : 0;
	functioncall	$const1 157 	%line{667} %argrw{"r"}
# N:\appleseed\appleseed\sandbox\shaders\as_osl_extensions.h:48
# float max(color C)  { return max(C[0], max(C[1], C[2])); }
	compref		$tmp84 in_refraction_tint $const2 	%filename{"N:\appleseed\appleseed\sandbox\shaders\as_osl_extensions.h"} %line{48} %argrw{"wrr"}
	compref		$tmp86 in_refraction_tint $const3 	%argrw{"wrr"}
	compref		$tmp87 in_refraction_tint $const4 	%argrw{"wrr"}
	max		$tmp85 $tmp86 $tmp87 	%argrw{"wrr"}
	max		$tmp83 $tmp84 $tmp85 	%argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:667
#         (in_refraction_amount * max(in_refraction_tint) > 0.0) ? 1 : 0;
	mul		$tmp88 in_refraction_amount $tmp83 	%filename{"N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl"} %line{667} %argrw{"wrr"}
	gt		$tmp89 $tmp88 $const5 	%argrw{"wrr"}
	if		$tmp89 161 162 	%argrw{"r"}
	assign		compute_transmission $const3 	%argrw{"wr"}
	assign		compute_transmission $const2 	%argrw{"wr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:669
#     int compute_specular = max(in_specular_color) > 0.0 ? 1 : 0;
	functioncall	$const1 168 	%line{669} %argrw{"r"}
# N:\appleseed\appleseed\sandbox\shaders\as_osl_extensions.h:48
# float max(color C)  { return max(C[0], max(C[1], C[2])); }
	compref		$tmp91 in_specular_color $const2 	%filename{"N:\appleseed\appleseed\sandbox\shaders\as_osl_extensions.h"} %line{48} %argrw{"wrr"}
	compref		$tmp93 in_specular_color $const3 	%argrw{"wrr"}
	compref		$tmp94 in_specular_color $const4 	%argrw{"wrr"}
	max		$tmp92 $tmp93 $tmp94 	%argrw{"wrr"}
	max		$tmp90 $tmp91 $tmp92 	%argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:669
#     int compute_specular = max(in_specular_color) > 0.0 ? 1 : 0;
	gt		$tmp95 $tmp90 $const5 	%filename{"N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl"} %line{669} %argrw{"wrr"}
	if		$tmp95 171 172 	%argrw{"r"}
	assign		compute_specular $const3 	%argrw{"wr"}
	assign		compute_specular $const2 	%argrw{"wr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:671
#     int compute_diffuse = (in_diffuse_weight * max(in_color) > 0.0) ? 1 : 0;
	functioncall	$const1 178 	%line{671} %argrw{"r"}
# N:\appleseed\appleseed\sandbox\shaders\as_osl_extensions.h:48
# float max(color C)  { return max(C[0], max(C[1], C[2])); }
	compref		$tmp97 in_color $const2 	%filename{"N:\appleseed\appleseed\sandbox\shaders\as_osl_extensions.h"} %line{48} %argrw{"wrr"}
	compref		$tmp99 in_color $const3 	%argrw{"wrr"}
	compref		$tmp100 in_color $const4 	%argrw{"wrr"}
	max		$tmp98 $tmp99 $tmp100 	%argrw{"wrr"}
	max		$tmp96 $tmp97 $tmp98 	%argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:671
#     int compute_diffuse = (in_diffuse_weight * max(in_color) > 0.0) ? 1 : 0;
	mul		$tmp101 in_diffuse_weight $tmp96 	%filename{"N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl"} %line{671} %argrw{"wrr"}
	gt		$tmp102 $tmp101 $const5 	%argrw{"wrr"}
	if		$tmp102 182 183 	%argrw{"r"}
	assign		compute_diffuse $const3 	%argrw{"wr"}
	assign		compute_diffuse $const2 	%argrw{"wr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:674
#         ray_depth > in_sss_maximum_ray_depth ||
	gt		$tmp103 ray_depth in_sss_maximum_ray_depth 	%line{674} %argrw{"wrr"}
	neq		$tmp104 $tmp103 $const2 	%argrw{"wrr"}
	if		$tmp104 186 188 	%argrw{"r"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:675
#         compute_transparency || compute_translucency || compute_transmission ||
	neq		$tmp105 compute_transparency $const2 	%line{675} %argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:674
#         ray_depth > in_sss_maximum_ray_depth ||
	assign		$tmp104 $tmp105 	%line{674} %argrw{"wr"}
	neq		$tmp106 $tmp104 $const2 	%argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:675
#         compute_transparency || compute_translucency || compute_transmission ||
	if		$tmp106 190 192 	%line{675} %argrw{"r"}
	neq		$tmp107 compute_translucency $const2 	%argrw{"wrr"}
	assign		$tmp106 $tmp107 	%argrw{"wr"}
	neq		$tmp108 $tmp106 $const2 	%argrw{"wrr"}
	if		$tmp108 194 196 	%argrw{"r"}
	neq		$tmp109 compute_transmission $const2 	%argrw{"wrr"}
	assign		$tmp108 $tmp109 	%argrw{"wr"}
	neq		$tmp110 $tmp108 $const2 	%argrw{"wrr"}
	if		$tmp110 198 201 	%argrw{"r"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:676
#         in_subsurface_weight == 0.0 || max(in_sss_mfp) <= in_sss_threshold)
	eq		$tmp111 in_subsurface_weight $const5 	%line{676} %argrw{"wrr"}
	neq		$tmp112 $tmp111 $const2 	%argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:675
#         compute_transparency || compute_translucency || compute_transmission ||
	assign		$tmp110 $tmp112 	%line{675} %argrw{"wr"}
	neq		$tmp113 $tmp110 $const2 	%argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:676
#         in_subsurface_weight == 0.0 || max(in_sss_mfp) <= in_sss_threshold)
	if		$tmp113 203 212 	%line{676} %argrw{"r"}
	functioncall	$const1 209 	%argrw{"r"}
# N:\appleseed\appleseed\sandbox\shaders\as_osl_extensions.h:48
# float max(color C)  { return max(C[0], max(C[1], C[2])); }
	compref		$tmp115 in_sss_mfp $const2 	%filename{"N:\appleseed\appleseed\sandbox\shaders\as_osl_extensions.h"} %line{48} %argrw{"wrr"}
	compref		$tmp117 in_sss_mfp $const3 	%argrw{"wrr"}
	compref		$tmp118 in_sss_mfp $const4 	%argrw{"wrr"}
	max		$tmp116 $tmp117 $tmp118 	%argrw{"wrr"}
	max		$tmp114 $tmp115 $tmp116 	%argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:676
#         in_subsurface_weight == 0.0 || max(in_sss_mfp) <= in_sss_threshold)
	le		$tmp119 $tmp114 in_sss_threshold 	%filename{"N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl"} %line{676} %argrw{"wrr"}
	neq		$tmp120 $tmp119 $const2 	%argrw{"wrr"}
	assign		$tmp113 $tmp120 	%argrw{"wr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:677
#         ? 0 : 1;
	if		$tmp113 214 215 	%line{677} %argrw{"r"}
	assign		compute_bssrdf $const2 	%argrw{"wr"}
	assign		compute_bssrdf $const3 	%argrw{"wr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:680
#         (in_incandescence_amount * max(in_incandescence_color) > 0.0) ? 1 : 0;
	functioncall	$const1 221 	%line{680} %argrw{"r"}
# N:\appleseed\appleseed\sandbox\shaders\as_osl_extensions.h:48
# float max(color C)  { return max(C[0], max(C[1], C[2])); }
	compref		$tmp122 in_incandescence_color $const2 	%filename{"N:\appleseed\appleseed\sandbox\shaders\as_osl_extensions.h"} %line{48} %argrw{"wrr"}
	compref		$tmp124 in_incandescence_color $const3 	%argrw{"wrr"}
	compref		$tmp125 in_incandescence_color $const4 	%argrw{"wrr"}
	max		$tmp123 $tmp124 $tmp125 	%argrw{"wrr"}
	max		$tmp121 $tmp122 $tmp123 	%argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:680
#         (in_incandescence_amount * max(in_incandescence_color) > 0.0) ? 1 : 0;
	mul		$tmp126 in_incandescence_amount $tmp121 	%filename{"N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl"} %line{680} %argrw{"wrr"}
	gt		$tmp127 $tmp126 $const5 	%argrw{"wrr"}
	if		$tmp127 225 226 	%argrw{"r"}
	assign		compute_edf $const3 	%argrw{"wr"}
	assign		compute_edf $const2 	%argrw{"wr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:684
#     color substrate_transmittance = color(1);
	assign		substrate_transmittance $const12 	%line{684} %argrw{"wr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:685
#     normal Nn = normalize(in_bump_normal_substrate);
	normalize	Nn in_bump_normal_substrate 	%line{685} %argrw{"wr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:687
#     if (compute_specular || compute_transmission)
	neq		$tmp128 compute_specular $const2 	%line{687} %argrw{"wrr"}
	if		$tmp128 230 232 	%argrw{"r"}
	neq		$tmp129 compute_transmission $const2 	%argrw{"wrr"}
	assign		$tmp128 $tmp129 	%argrw{"wr"}
	if		$tmp128 517 517 	%argrw{"r"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:689
#         vector tangent = Tn;
	assign		___387_tangent Tn 	%line{689} %argrw{"wr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:691
#         if (in_anisotropy_amount > 0.0)
	gt		$tmp130 in_anisotropy_amount $const5 	%line{691} %argrw{"wrr"}
	if		$tmp130 305 305 	%argrw{"r"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:693
#             if (isconnected(in_anisotropy_map))
	isconnected	$tmp131 in_anisotropy_map 	%line{693} %argrw{"wr"}
	if		$tmp131 250 250 	%argrw{"r"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:696
#                     (vector) in_anisotropy_map * 2.0 - 1.0);
	mul		$tmp132 in_anisotropy_map $const26 	%line{696} %argrw{"wrr"}
	sub		$tmp133 $tmp132 $const11 	%argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:695
#                 vector vector_map = normalize(
	normalize	___389_vector_map $tmp133 	%line{695} %argrw{"wr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:699
#                     vector_map[0] * Tn +
	compref		$tmp134 ___389_vector_map $const2 	%line{699} %argrw{"wrr"}
	mul		$tmp135 $tmp134 Tn 	%argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:700
#                     vector_map[1] * Bn +
	compref		$tmp136 ___389_vector_map $const3 	%line{700} %argrw{"wrr"}
	mul		$tmp137 $tmp136 Bn 	%argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:699
#                     vector_map[0] * Tn +
	add		$tmp138 $tmp135 $tmp137 	%line{699} %argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:701
#                     vector_map[2] * Nn);
	compref		$tmp139 ___389_vector_map $const4 	%line{701} %argrw{"wrr"}
	mul		$tmp140 $tmp139 Nn 	%argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:700
#                     vector_map[1] * Bn +
	add		$tmp141 $tmp138 $tmp140 	%line{700} %argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:698
#                 tangent = normalize(
	normalize	___387_tangent $tmp141 	%line{698} %argrw{"wr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:704
#             if (in_anisotropy_angle > 0.0)
	gt		$tmp142 in_anisotropy_angle $const5 	%line{704} %argrw{"wrr"}
	if		$tmp142 305 305 	%argrw{"r"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:708
#                     in_anisotropy_angle * M_2PI,
	mul		$tmp143 in_anisotropy_angle $const27 	%line{708} %argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:710
#                     point(Nn));
	assign		$tmp145 Nn 	%line{710} %argrw{"wr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:706
#                 tangent = rotate(
	functioncall	$const29 305 	%line{706} %argrw{"r"}
# N:\appleseed\appleseed\sandbox\shaders\stdosl.h:274
#     vector axis = normalize (b - a);
	sub		$tmp146 $tmp145 $const28 	%filename{"N:\appleseed\appleseed\sandbox\shaders\stdosl.h"} %line{274} %argrw{"wrr"}
	normalize	___254_axis $tmp146 	%argrw{"wr"}
# N:\appleseed\appleseed\sandbox\shaders\stdosl.h:276
#     sincos (angle, sinang, cosang);
	sincos		$tmp143 ___254_sinang ___254_cosang 	%line{276} %argrw{"rww"}
# N:\appleseed\appleseed\sandbox\shaders\stdosl.h:277
#     float cosang1 = 1.0 - cosang;
	sub		___254_cosang1 $const11 ___254_cosang 	%line{277} %argrw{"wrr"}
# N:\appleseed\appleseed\sandbox\shaders\stdosl.h:278
#     float x = axis[0], y = axis[1], z = axis[2];
	compref		___254_x ___254_axis $const2 	%line{278} %argrw{"wrr"}
	compref		___254_y ___254_axis $const3 	%argrw{"wrr"}
	compref		___254_z ___254_axis $const4 	%argrw{"wrr"}
# N:\appleseed\appleseed\sandbox\shaders\stdosl.h:279
#     matrix M = matrix (x * x + (1.0 - x * x) * cosang,
	mul		$tmp147 ___254_x ___254_x 	%line{279} %argrw{"wrr"}
	mul		$tmp148 ___254_x ___254_x 	%argrw{"wrr"}
	sub		$tmp149 $const11 $tmp148 	%argrw{"wrr"}
	mul		$tmp150 $tmp149 ___254_cosang 	%argrw{"wrr"}
	add		$tmp151 $tmp147 $tmp150 	%argrw{"wrr"}
# N:\appleseed\appleseed\sandbox\shaders\stdosl.h:280
#                        x * y * cosang1 + z * sinang,
	mul		$tmp152 ___254_x ___254_y 	%line{280} %argrw{"wrr"}
	mul		$tmp153 $tmp152 ___254_cosang1 	%argrw{"wrr"}
	mul		$tmp154 ___254_z ___254_sinang 	%argrw{"wrr"}
	add		$tmp155 $tmp153 $tmp154 	%argrw{"wrr"}
# N:\appleseed\appleseed\sandbox\shaders\stdosl.h:281
#                        x * z * cosang1 - y * sinang,
	mul		$tmp156 ___254_x ___254_z 	%line{281} %argrw{"wrr"}
	mul		$tmp157 $tmp156 ___254_cosang1 	%argrw{"wrr"}
	mul		$tmp158 ___254_y ___254_sinang 	%argrw{"wrr"}
	sub		$tmp159 $tmp157 $tmp158 	%argrw{"wrr"}
# N:\appleseed\appleseed\sandbox\shaders\stdosl.h:283
#                        x * y * cosang1 - z * sinang,
	mul		$tmp160 ___254_x ___254_y 	%line{283} %argrw{"wrr"}
	mul		$tmp161 $tmp160 ___254_cosang1 	%argrw{"wrr"}
	mul		$tmp162 ___254_z ___254_sinang 	%argrw{"wrr"}
	sub		$tmp163 $tmp161 $tmp162 	%argrw{"wrr"}
# N:\appleseed\appleseed\sandbox\shaders\stdosl.h:284
#                        y * y + (1.0 - y * y) * cosang,
	mul		$tmp164 ___254_y ___254_y 	%line{284} %argrw{"wrr"}
	mul		$tmp165 ___254_y ___254_y 	%argrw{"wrr"}
	sub		$tmp166 $const11 $tmp165 	%argrw{"wrr"}
	mul		$tmp167 $tmp166 ___254_cosang 	%argrw{"wrr"}
	add		$tmp168 $tmp164 $tmp167 	%argrw{"wrr"}
# N:\appleseed\appleseed\sandbox\shaders\stdosl.h:285
#                        y * z * cosang1 + x * sinang,
	mul		$tmp169 ___254_y ___254_z 	%line{285} %argrw{"wrr"}
	mul		$tmp170 $tmp169 ___254_cosang1 	%argrw{"wrr"}
	mul		$tmp171 ___254_x ___254_sinang 	%argrw{"wrr"}
	add		$tmp172 $tmp170 $tmp171 	%argrw{"wrr"}
# N:\appleseed\appleseed\sandbox\shaders\stdosl.h:287
#                        x * z * cosang1 + y * sinang,
	mul		$tmp173 ___254_x ___254_z 	%line{287} %argrw{"wrr"}
	mul		$tmp174 $tmp173 ___254_cosang1 	%argrw{"wrr"}
	mul		$tmp175 ___254_y ___254_sinang 	%argrw{"wrr"}
	add		$tmp176 $tmp174 $tmp175 	%argrw{"wrr"}
# N:\appleseed\appleseed\sandbox\shaders\stdosl.h:288
#                        y * z * cosang1 - x * sinang,
	mul		$tmp177 ___254_y ___254_z 	%line{288} %argrw{"wrr"}
	mul		$tmp178 $tmp177 ___254_cosang1 	%argrw{"wrr"}
	mul		$tmp179 ___254_x ___254_sinang 	%argrw{"wrr"}
	sub		$tmp180 $tmp178 $tmp179 	%argrw{"wrr"}
# N:\appleseed\appleseed\sandbox\shaders\stdosl.h:289
#                        z * z + (1.0 - z * z) * cosang,
	mul		$tmp181 ___254_z ___254_z 	%line{289} %argrw{"wrr"}
	mul		$tmp182 ___254_z ___254_z 	%argrw{"wrr"}
	sub		$tmp183 $const11 $tmp182 	%argrw{"wrr"}
	mul		$tmp184 $tmp183 ___254_cosang 	%argrw{"wrr"}
	add		$tmp185 $tmp181 $tmp184 	%argrw{"wrr"}
# N:\appleseed\appleseed\sandbox\shaders\stdosl.h:279
#     matrix M = matrix (x * x + (1.0 - x * x) * cosang,
	matrix		___254_M $tmp151 $tmp155 $tmp159 $const5 $tmp163 $tmp168 $tmp172 $const5 $tmp176 $tmp180 $tmp185 $const5 $const5 $const5 $const5 $const11 	%line{279} %argrw{"wrrrrrrrrrrrrrrrr"}
# N:\appleseed\appleseed\sandbox\shaders\stdosl.h:292
#     return transform (M, p-a) + a;
	sub		$tmp187 ___387_tangent $const28 	%line{292} %argrw{"wrr"}
	transformv	$tmp186 ___254_M $tmp187 	%argrw{"wrr"}
	add		___387_tangent $tmp186 $const28 	%argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:716
#         if (in_fresnel_type == 0)
	eq		$tmp188 in_fresnel_type $const2 	%filename{"N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl"} %line{716} %argrw{"wrr"}
	if		$tmp188 325 338 	%argrw{"r"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:718
#             if (compute_transmission)
	if		compute_transmission 312 325 	%line{718} %argrw{"r"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:725
#                     in_refraction_amount * in_refraction_tint,
	mul		$tmp190 in_refraction_amount in_refraction_tint 	%line{725} %argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:720
#                 out_outColor += opacity * as_glass(
	closure		$tmp189 $const17 Nn ___387_tangent coating_transmittance in_specular_color $tmp190 in_specular_roughness in_anisotropy_amount in_ior in_absorption_color in_absorption_depth 	%line{720} %argrw{"wrrrrrrrrrrr"}
	mul		$tmp191 $tmp189 opacity 	%argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:730
#                     in_absorption_depth);
	add		out_outColor out_outColor $tmp191 	%line{730} %argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:732
#             else if (max(in_specular_color) > 0.0)
	functioncall	$const1 318 	%line{732} %argrw{"r"}
# N:\appleseed\appleseed\sandbox\shaders\as_osl_extensions.h:48
# float max(color C)  { return max(C[0], max(C[1], C[2])); }
	compref		$tmp193 in_specular_color $const2 	%filename{"N:\appleseed\appleseed\sandbox\shaders\as_osl_extensions.h"} %line{48} %argrw{"wrr"}
	compref		$tmp195 in_specular_color $const3 	%argrw{"wrr"}
	compref		$tmp196 in_specular_color $const4 	%argrw{"wrr"}
	max		$tmp194 $tmp195 $tmp196 	%argrw{"wrr"}
	max		$tmp192 $tmp193 $tmp194 	%argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:732
#             else if (max(in_specular_color) > 0.0)
	gt		$tmp197 $tmp192 $const5 	%filename{"N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl"} %line{732} %argrw{"wrr"}
	if		$tmp197 325 325 	%argrw{"r"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:735
#                     in_specular_color * as_glossy(
	closure		$tmp198 $const18 Nn ___387_tangent in_specular_roughness in_anisotropy_amount in_ior 	%line{735} %argrw{"wrrrrrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:734
#                 out_outColor += coating_transmittance * opacity *
	mul		$tmp199 coating_transmittance opacity 	%line{734} %argrw{"wrr"}
	mul		$tmp200 $tmp199 in_specular_color 	%argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:735
#                     in_specular_color * as_glossy(
	mul		$tmp201 $tmp198 $tmp200 	%line{735} %argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:740
#                         in_ior);
	add		out_outColor out_outColor $tmp201 	%line{740} %argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:743
#         else if (max(in_specular_color) > 0.0)
	functioncall	$const1 331 	%line{743} %argrw{"r"}
# N:\appleseed\appleseed\sandbox\shaders\as_osl_extensions.h:48
# float max(color C)  { return max(C[0], max(C[1], C[2])); }
	compref		$tmp203 in_specular_color $const2 	%filename{"N:\appleseed\appleseed\sandbox\shaders\as_osl_extensions.h"} %line{48} %argrw{"wrr"}
	compref		$tmp205 in_specular_color $const3 	%argrw{"wrr"}
	compref		$tmp206 in_specular_color $const4 	%argrw{"wrr"}
	max		$tmp204 $tmp205 $tmp206 	%argrw{"wrr"}
	max		$tmp202 $tmp203 $tmp204 	%argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:743
#         else if (max(in_specular_color) > 0.0)
	gt		$tmp207 $tmp202 $const5 	%filename{"N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl"} %line{743} %argrw{"wrr"}
	if		$tmp207 338 338 	%argrw{"r"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:746
#                 in_specular_color * as_metal(
	closure		$tmp208 $const30 Nn ___387_tangent in_face_tint in_edge_tint in_specular_roughness in_anisotropy_amount 	%line{746} %argrw{"wrrrrrrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:745
#             out_outColor += coating_transmittance * opacity *
	mul		$tmp209 coating_transmittance opacity 	%line{745} %argrw{"wrr"}
	mul		$tmp210 $tmp209 in_specular_color 	%argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:746
#                 in_specular_color * as_metal(
	mul		$tmp211 $tmp208 $tmp210 	%line{746} %argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:752
#                     in_anisotropy_amount);
	add		out_outColor out_outColor $tmp211 	%line{752} %argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:758
#         if ((compute_diffuse || compute_bssrdf || compute_edf ||
	neq		$tmp212 compute_diffuse $const2 	%line{758} %argrw{"wrr"}
	if		$tmp212 340 342 	%argrw{"r"}
	neq		$tmp213 compute_bssrdf $const2 	%argrw{"wrr"}
	assign		$tmp212 $tmp213 	%argrw{"wr"}
	neq		$tmp214 $tmp212 $const2 	%argrw{"wrr"}
	if		$tmp214 344 346 	%argrw{"r"}
	neq		$tmp215 compute_edf $const2 	%argrw{"wrr"}
	assign		$tmp214 $tmp215 	%argrw{"wr"}
	neq		$tmp216 $tmp214 $const2 	%argrw{"wrr"}
	if		$tmp216 348 350 	%argrw{"r"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:759
#             compute_translucency) && max(in_specular_color) > 0.0)
	neq		$tmp217 compute_translucency $const2 	%line{759} %argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:758
#         if ((compute_diffuse || compute_bssrdf || compute_edf ||
	assign		$tmp216 $tmp217 	%line{758} %argrw{"wr"}
	neq		$tmp218 $tmp216 $const2 	%argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:759
#             compute_translucency) && max(in_specular_color) > 0.0)
	if		$tmp218 361 361 	%line{759} %argrw{"r"}
	functioncall	$const1 358 	%argrw{"r"}
# N:\appleseed\appleseed\sandbox\shaders\as_osl_extensions.h:48
# float max(color C)  { return max(C[0], max(C[1], C[2])); }
	compref		$tmp220 in_specular_color $const2 	%filename{"N:\appleseed\appleseed\sandbox\shaders\as_osl_extensions.h"} %line{48} %argrw{"wrr"}
	compref		$tmp222 in_specular_color $const3 	%argrw{"wrr"}
	compref		$tmp223 in_specular_color $const4 	%argrw{"wrr"}
	max		$tmp221 $tmp222 $tmp223 	%argrw{"wrr"}
	max		$tmp219 $tmp220 $tmp221 	%argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:759
#             compute_translucency) && max(in_specular_color) > 0.0)
	gt		$tmp224 $tmp219 $const5 	%filename{"N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl"} %line{759} %argrw{"wrr"}
	neq		$tmp225 $tmp224 $const2 	%argrw{"wrr"}
	assign		$tmp218 $tmp225 	%argrw{"wr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:758
#         if ((compute_diffuse || compute_bssrdf || compute_edf ||
	if		$tmp218 517 517 	%line{758} %argrw{"r"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:761
#             float costheta_o = max(0.0, dot(-I, Nn));
	neg		$tmp227 I 	%line{761} %argrw{"wr"}
	dot		$tmp226 $tmp227 Nn 	%argrw{"wrr"}
	max		___395_costheta_o $const5 $tmp226 	%argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:763
#             if (in_fresnel_type == 0)
	eq		$tmp228 in_fresnel_type $const2 	%line{763} %argrw{"wrr"}
	if		$tmp228 382 517 	%argrw{"r"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:765
#                 float R0 = sqr((in_ior - 1.0) / (in_ior + 1.0));
	sub		$tmp229 in_ior $const11 	%line{765} %argrw{"wrr"}
	add		$tmp230 in_ior $const11 	%argrw{"wrr"}
	div		$tmp231 $tmp229 $tmp230 	%argrw{"wrr"}
	functioncall	$const19 372 	%argrw{"r"}
# N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\math\as_math_helpers.h:34
# float sqr(float x) { return x * x; }
	mul		___396_R0 $tmp231 $tmp231 	%filename{"N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\math\as_math_helpers.h"} %line{34} %argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:766
#                 float Kr = R0 + (1.0 - R0) * pow(1.0 - costheta_o, 5.0);
	sub		$tmp232 $const11 ___396_R0 	%filename{"N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl"} %line{766} %argrw{"wrr"}
	sub		$tmp234 $const11 ___395_costheta_o 	%argrw{"wrr"}
	pow		$tmp233 $tmp234 $const20 	%argrw{"wrr"}
	mul		$tmp235 $tmp232 $tmp233 	%argrw{"wrr"}
	add		___396_Kr ___396_R0 $tmp235 	%argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:768
#                 substrate_transmittance = 1.0 - clamp(Kr, 0.0, 1.0);
	functioncall	$const21 380 	%line{768} %argrw{"r"}
# N:\appleseed\appleseed\sandbox\shaders\stdosl.h:145
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp237 ___396_Kr $const11 	%filename{"N:\appleseed\appleseed\sandbox\shaders\stdosl.h"} %line{145} %argrw{"wrr"}
	max		$tmp236 $tmp237 $const5 	%argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:768
#                 substrate_transmittance = 1.0 - clamp(Kr, 0.0, 1.0);
	sub		$tmp238 $const11 $tmp236 	%filename{"N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl"} %line{768} %argrw{"wrr"}
	assign		substrate_transmittance $tmp238 	%argrw{"wr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:772
#                 float exterior_n = compute_coating ? in_coating_ior : 1.0;
	if		compute_coating 384 385 	%line{772} %argrw{"r"}
	assign		___397_exterior_n in_coating_ior 	%argrw{"wr"}
	assign		___397_exterior_n $const11 	%argrw{"wr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:774
#                 color Kr = color(0);
	assign		___397_Kr $const16 	%line{774} %argrw{"wr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:776
#                 color n = get_eta(in_face_tint, in_edge_tint);
	functioncall	$const31 421 	%line{776} %argrw{"r"}
# N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\material\as_material_helpers.h:82
#     return color(get_eta(f0[0], f90[0]),
	compref		$tmp240 in_face_tint $const2 	%filename{"N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\material\as_material_helpers.h"} %line{82} %argrw{"wrr"}
	compref		$tmp241 in_edge_tint $const2 	%argrw{"wrr"}
	functioncall	$const31 398 	%argrw{"r"}
# N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\material\as_material_helpers.h:67
#     float eta_min = (1.0 - f0) / (1.0 + f0);
	sub		$tmp242 $const11 $tmp240 	%line{67} %argrw{"wrr"}
	add		$tmp243 $const11 $tmp240 	%argrw{"wrr"}
	div		___368_eta_min $tmp242 $tmp243 	%argrw{"wrr"}
# N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\material\as_material_helpers.h:68
#     float sqrt_f0 = sqrt(f0);
	sqrt		___368_sqrt_f0 $tmp240 	%line{68} %argrw{"wr"}
# N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\material\as_material_helpers.h:69
#     float eta_max = (1.0 + sqrt_f0) / (1.0 - sqrt_f0);
	add		$tmp244 $const11 ___368_sqrt_f0 	%line{69} %argrw{"wrr"}
	sub		$tmp245 $const11 ___368_sqrt_f0 	%argrw{"wrr"}
	div		___368_eta_max $tmp244 $tmp245 	%argrw{"wrr"}
# N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\material\as_material_helpers.h:71
#     return mix(eta_max, eta_min, f90);
	mix		$tmp239 ___368_eta_max ___368_eta_min $tmp241 	%line{71} %argrw{"wrrr"}
# N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\material\as_material_helpers.h:83
#                  get_eta(f0[1], f90[1]),
	compref		$tmp247 in_face_tint $const3 	%line{83} %argrw{"wrr"}
	compref		$tmp248 in_edge_tint $const3 	%argrw{"wrr"}
	functioncall	$const31 409 	%argrw{"r"}
# N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\material\as_material_helpers.h:67
#     float eta_min = (1.0 - f0) / (1.0 + f0);
	sub		$tmp249 $const11 $tmp247 	%line{67} %argrw{"wrr"}
	add		$tmp250 $const11 $tmp247 	%argrw{"wrr"}
	div		___368_eta_min $tmp249 $tmp250 	%argrw{"wrr"}
# N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\material\as_material_helpers.h:68
#     float sqrt_f0 = sqrt(f0);
	sqrt		___368_sqrt_f0 $tmp247 	%line{68} %argrw{"wr"}
# N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\material\as_material_helpers.h:69
#     float eta_max = (1.0 + sqrt_f0) / (1.0 - sqrt_f0);
	add		$tmp251 $const11 ___368_sqrt_f0 	%line{69} %argrw{"wrr"}
	sub		$tmp252 $const11 ___368_sqrt_f0 	%argrw{"wrr"}
	div		___368_eta_max $tmp251 $tmp252 	%argrw{"wrr"}
# N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\material\as_material_helpers.h:71
#     return mix(eta_max, eta_min, f90);
	mix		$tmp246 ___368_eta_max ___368_eta_min $tmp248 	%line{71} %argrw{"wrrr"}
# N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\material\as_material_helpers.h:84
#                  get_eta(f0[2], f90[2]));
	compref		$tmp254 in_face_tint $const4 	%line{84} %argrw{"wrr"}
	compref		$tmp255 in_edge_tint $const4 	%argrw{"wrr"}
	functioncall	$const31 420 	%argrw{"r"}
# N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\material\as_material_helpers.h:67
#     float eta_min = (1.0 - f0) / (1.0 + f0);
	sub		$tmp256 $const11 $tmp254 	%line{67} %argrw{"wrr"}
	add		$tmp257 $const11 $tmp254 	%argrw{"wrr"}
	div		___368_eta_min $tmp256 $tmp257 	%argrw{"wrr"}
# N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\material\as_material_helpers.h:68
#     float sqrt_f0 = sqrt(f0);
	sqrt		___368_sqrt_f0 $tmp254 	%line{68} %argrw{"wr"}
# N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\material\as_material_helpers.h:69
#     float eta_max = (1.0 + sqrt_f0) / (1.0 - sqrt_f0);
	add		$tmp258 $const11 ___368_sqrt_f0 	%line{69} %argrw{"wrr"}
	sub		$tmp259 $const11 ___368_sqrt_f0 	%argrw{"wrr"}
	div		___368_eta_max $tmp258 $tmp259 	%argrw{"wrr"}
# N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\material\as_material_helpers.h:71
#     return mix(eta_max, eta_min, f90);
	mix		$tmp253 ___368_eta_max ___368_eta_min $tmp255 	%line{71} %argrw{"wrrr"}
# N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\material\as_material_helpers.h:82
#     return color(get_eta(f0[0], f90[0]),
	color		___397_n $tmp239 $tmp246 $tmp253 	%line{82} %argrw{"wrrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:777
#                 color k = get_kappa(in_face_tint, n);
	functioncall	$const32 465 	%filename{"N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl"} %line{777} %argrw{"r"}
# N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\material\as_material_helpers.h:89
#     return color(get_kappa(f0[0], eta[0]),
	compref		$tmp261 in_face_tint $const2 	%filename{"N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\material\as_material_helpers.h"} %line{89} %argrw{"wrr"}
	compref		$tmp262 ___397_n $const2 	%argrw{"wrr"}
	functioncall	$const32 436 	%argrw{"r"}
# N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\material\as_material_helpers.h:76
#     float nr = f0 * sqr(eta + 1.0) - sqr(eta - 1.0);
	add		$tmp264 $tmp262 $const11 	%line{76} %argrw{"wrr"}
	functioncall	$const19 428 	%argrw{"r"}
# N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\math\as_math_helpers.h:34
# float sqr(float x) { return x * x; }
	mul		$tmp263 $tmp264 $tmp264 	%filename{"N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\math\as_math_helpers.h"} %line{34} %argrw{"wrr"}
# N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\material\as_material_helpers.h:76
#     float nr = f0 * sqr(eta + 1.0) - sqr(eta - 1.0);
	mul		$tmp265 $tmp261 $tmp263 	%filename{"N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\material\as_material_helpers.h"} %line{76} %argrw{"wrr"}
	sub		$tmp267 $tmp262 $const11 	%argrw{"wrr"}
	functioncall	$const19 432 	%argrw{"r"}
# N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\math\as_math_helpers.h:34
# float sqr(float x) { return x * x; }
	mul		$tmp266 $tmp267 $tmp267 	%filename{"N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\math\as_math_helpers.h"} %line{34} %argrw{"wrr"}
# N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\material\as_material_helpers.h:76
#     float nr = f0 * sqr(eta + 1.0) - sqr(eta - 1.0);
	sub		___369_nr $tmp265 $tmp266 	%filename{"N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\material\as_material_helpers.h"} %line{76} %argrw{"wrr"}
# N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\material\as_material_helpers.h:77
#     return sqrt(nr / (1.0 - f0));
	sub		$tmp268 $const11 $tmp261 	%line{77} %argrw{"wrr"}
	div		$tmp269 ___369_nr $tmp268 	%argrw{"wrr"}
	sqrt		$tmp260 $tmp269 	%argrw{"wr"}
# N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\material\as_material_helpers.h:90
#                  get_kappa(f0[1], eta[1]),
	compref		$tmp271 in_face_tint $const3 	%line{90} %argrw{"wrr"}
	compref		$tmp272 ___397_n $const3 	%argrw{"wrr"}
	functioncall	$const32 450 	%argrw{"r"}
# N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\material\as_material_helpers.h:76
#     float nr = f0 * sqr(eta + 1.0) - sqr(eta - 1.0);
	add		$tmp274 $tmp272 $const11 	%line{76} %argrw{"wrr"}
	functioncall	$const19 442 	%argrw{"r"}
# N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\math\as_math_helpers.h:34
# float sqr(float x) { return x * x; }
	mul		$tmp273 $tmp274 $tmp274 	%filename{"N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\math\as_math_helpers.h"} %line{34} %argrw{"wrr"}
# N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\material\as_material_helpers.h:76
#     float nr = f0 * sqr(eta + 1.0) - sqr(eta - 1.0);
	mul		$tmp275 $tmp271 $tmp273 	%filename{"N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\material\as_material_helpers.h"} %line{76} %argrw{"wrr"}
	sub		$tmp277 $tmp272 $const11 	%argrw{"wrr"}
	functioncall	$const19 446 	%argrw{"r"}
# N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\math\as_math_helpers.h:34
# float sqr(float x) { return x * x; }
	mul		$tmp276 $tmp277 $tmp277 	%filename{"N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\math\as_math_helpers.h"} %line{34} %argrw{"wrr"}
# N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\material\as_material_helpers.h:76
#     float nr = f0 * sqr(eta + 1.0) - sqr(eta - 1.0);
	sub		___369_nr $tmp275 $tmp276 	%filename{"N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\material\as_material_helpers.h"} %line{76} %argrw{"wrr"}
# N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\material\as_material_helpers.h:77
#     return sqrt(nr / (1.0 - f0));
	sub		$tmp278 $const11 $tmp271 	%line{77} %argrw{"wrr"}
	div		$tmp279 ___369_nr $tmp278 	%argrw{"wrr"}
	sqrt		$tmp270 $tmp279 	%argrw{"wr"}
# N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\material\as_material_helpers.h:91
#                  get_kappa(f0[2], eta[2]));
	compref		$tmp281 in_face_tint $const4 	%line{91} %argrw{"wrr"}
	compref		$tmp282 ___397_n $const4 	%argrw{"wrr"}
	functioncall	$const32 464 	%argrw{"r"}
# N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\material\as_material_helpers.h:76
#     float nr = f0 * sqr(eta + 1.0) - sqr(eta - 1.0);
	add		$tmp284 $tmp282 $const11 	%line{76} %argrw{"wrr"}
	functioncall	$const19 456 	%argrw{"r"}
# N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\math\as_math_helpers.h:34
# float sqr(float x) { return x * x; }
	mul		$tmp283 $tmp284 $tmp284 	%filename{"N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\math\as_math_helpers.h"} %line{34} %argrw{"wrr"}
# N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\material\as_material_helpers.h:76
#     float nr = f0 * sqr(eta + 1.0) - sqr(eta - 1.0);
	mul		$tmp285 $tmp281 $tmp283 	%filename{"N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\material\as_material_helpers.h"} %line{76} %argrw{"wrr"}
	sub		$tmp287 $tmp282 $const11 	%argrw{"wrr"}
	functioncall	$const19 460 	%argrw{"r"}
# N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\math\as_math_helpers.h:34
# float sqr(float x) { return x * x; }
	mul		$tmp286 $tmp287 $tmp287 	%filename{"N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\math\as_math_helpers.h"} %line{34} %argrw{"wrr"}
# N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\material\as_material_helpers.h:76
#     float nr = f0 * sqr(eta + 1.0) - sqr(eta - 1.0);
	sub		___369_nr $tmp285 $tmp286 	%filename{"N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\material\as_material_helpers.h"} %line{76} %argrw{"wrr"}
# N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\material\as_material_helpers.h:77
#     return sqrt(nr / (1.0 - f0));
	sub		$tmp288 $const11 $tmp281 	%line{77} %argrw{"wrr"}
	div		$tmp289 ___369_nr $tmp288 	%argrw{"wrr"}
	sqrt		$tmp280 $tmp289 	%argrw{"wr"}
# N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\material\as_material_helpers.h:89
#     return color(get_kappa(f0[0], eta[0]),
	color		___397_k $tmp260 $tmp270 $tmp280 	%line{89} %argrw{"wrrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:779
#                 for (int i = 0; i < 3; ++i)
	for		$tmp291 467 469 510 511 	%filename{"N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl"} %line{779} %argrw{"r"}
	assign		___398_i $const2 	%argrw{"wr"}
	lt		$tmp290 ___398_i $const33 	%argrw{"wrr"}
	neq		$tmp291 $tmp290 $const2 	%argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:783
#                         n[i],
	compref		$tmp293 ___397_n ___398_i 	%line{783} %argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:784
#                         k[i],
	compref		$tmp294 ___397_k ___398_i 	%line{784} %argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:781
#                     Kr[i] = dielectricConductorFresnel(
	functioncall	$const34 509 	%line{781} %argrw{"r"}
# N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\material\as_material_helpers.h:152
#     float eta = etat / etai;
	div		___376_eta $tmp293 ___397_exterior_n 	%filename{"N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\material\as_material_helpers.h"} %line{152} %argrw{"wrr"}
# N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\material\as_material_helpers.h:153
#     float etak = k / etai;
	div		___376_etak $tmp294 ___397_exterior_n 	%line{153} %argrw{"wrr"}
# N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\material\as_material_helpers.h:155
#     float costheta_i2 = sqr(costhetai);
	functioncall	$const19 476 	%line{155} %argrw{"r"}
# N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\math\as_math_helpers.h:34
# float sqr(float x) { return x * x; }
	mul		___376_costheta_i2 ___395_costheta_o ___395_costheta_o 	%filename{"N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\math\as_math_helpers.h"} %line{34} %argrw{"wrr"}
# N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\material\as_material_helpers.h:156
#     float sintheta_i2 = 1.0 - costheta_i2;
	sub		___376_sintheta_i2 $const11 ___376_costheta_i2 	%filename{"N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\material\as_material_helpers.h"} %line{156} %argrw{"wrr"}
# N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\material\as_material_helpers.h:157
#     float eta2 = sqr(eta);
	functioncall	$const19 479 	%line{157} %argrw{"r"}
# N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\math\as_math_helpers.h:34
# float sqr(float x) { return x * x; }
	mul		___376_eta2 ___376_eta ___376_eta 	%filename{"N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\math\as_math_helpers.h"} %line{34} %argrw{"wrr"}
# N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\material\as_material_helpers.h:158
#     float etak2 = sqr(etak);
	functioncall	$const19 481 	%filename{"N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\material\as_material_helpers.h"} %line{158} %argrw{"r"}
# N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\math\as_math_helpers.h:34
# float sqr(float x) { return x * x; }
	mul		___376_etak2 ___376_etak ___376_etak 	%filename{"N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\math\as_math_helpers.h"} %line{34} %argrw{"wrr"}
# N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\material\as_material_helpers.h:160
#     float t0 = eta2 - etak2 - sintheta_i2;
	sub		$tmp295 ___376_eta2 ___376_etak2 	%filename{"N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\material\as_material_helpers.h"} %line{160} %argrw{"wrr"}
	sub		___376_t0 $tmp295 ___376_sintheta_i2 	%argrw{"wrr"}
# N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\material\as_material_helpers.h:162
#     float a2b2sum = sqrt(sqr(t0) + 4.0 * eta2 * etak2);
	functioncall	$const19 485 	%line{162} %argrw{"r"}
# N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\math\as_math_helpers.h:34
# float sqr(float x) { return x * x; }
	mul		$tmp296 ___376_t0 ___376_t0 	%filename{"N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\math\as_math_helpers.h"} %line{34} %argrw{"wrr"}
# N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\material\as_material_helpers.h:162
#     float a2b2sum = sqrt(sqr(t0) + 4.0 * eta2 * etak2);
	mul		$tmp297 $const35 ___376_eta2 	%filename{"N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\material\as_material_helpers.h"} %line{162} %argrw{"wrr"}
	mul		$tmp298 $tmp297 ___376_etak2 	%argrw{"wrr"}
	add		$tmp299 $tmp296 $tmp298 	%argrw{"wrr"}
	sqrt		___376_a2b2sum $tmp299 	%argrw{"wr"}
# N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\material\as_material_helpers.h:164
#     float t1 = a2b2sum + costheta_i2;
	add		___376_t1 ___376_a2b2sum ___376_costheta_i2 	%line{164} %argrw{"wrr"}
# N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\material\as_material_helpers.h:166
#     float sqrt_a = sqrt(0.5 * (a2b2sum + t0));
	add		$tmp300 ___376_a2b2sum ___376_t0 	%line{166} %argrw{"wrr"}
	mul		$tmp301 $const36 $tmp300 	%argrw{"wrr"}
	sqrt		___376_sqrt_a $tmp301 	%argrw{"wr"}
# N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\material\as_material_helpers.h:168
#     float t2 = 2.0 * costhetai * sqrt_a;
	mul		$tmp302 $const26 ___395_costheta_o 	%line{168} %argrw{"wrr"}
	mul		___376_t2 $tmp302 ___376_sqrt_a 	%argrw{"wrr"}
# N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\material\as_material_helpers.h:170
#     float Rs = (t1 - t2) / (t1 + t2);
	sub		$tmp303 ___376_t1 ___376_t2 	%line{170} %argrw{"wrr"}
	add		$tmp304 ___376_t1 ___376_t2 	%argrw{"wrr"}
	div		___376_Rs $tmp303 $tmp304 	%argrw{"wrr"}
# N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\material\as_material_helpers.h:172
#     float t3 = a2b2sum * costheta_i2 + sqr(sintheta_i2);
	mul		$tmp305 ___376_a2b2sum ___376_costheta_i2 	%line{172} %argrw{"wrr"}
	functioncall	$const19 501 	%argrw{"r"}
# N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\math\as_math_helpers.h:34
# float sqr(float x) { return x * x; }
	mul		$tmp306 ___376_sintheta_i2 ___376_sintheta_i2 	%filename{"N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\math\as_math_helpers.h"} %line{34} %argrw{"wrr"}
# N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\material\as_material_helpers.h:172
#     float t3 = a2b2sum * costheta_i2 + sqr(sintheta_i2);
	add		___376_t3 $tmp305 $tmp306 	%filename{"N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\material\as_material_helpers.h"} %line{172} %argrw{"wrr"}
# N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\material\as_material_helpers.h:173
#     float t4 = t2 * sintheta_i2;
	mul		___376_t4 ___376_t2 ___376_sintheta_i2 	%line{173} %argrw{"wrr"}
# N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\material\as_material_helpers.h:175
#     float Rp = Rs * (t3 - t4) / (t3 + t4);
	sub		$tmp307 ___376_t3 ___376_t4 	%line{175} %argrw{"wrr"}
	mul		$tmp308 ___376_Rs $tmp307 	%argrw{"wrr"}
	add		$tmp309 ___376_t3 ___376_t4 	%argrw{"wrr"}
	div		___376_Rp $tmp308 $tmp309 	%argrw{"wrr"}
# N:\appleseed\appleseed\src\appleseed.shaders\include\appleseed\material\as_material_helpers.h:177
#     return 0.5 * (Rp + Rs);
	add		$tmp310 ___376_Rp ___376_Rs 	%line{177} %argrw{"wrr"}
	mul		$tmp292 $const36 $tmp310 	%argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:781
#                     Kr[i] = dielectricConductorFresnel(
	compassign	___397_Kr ___398_i $tmp292 	%filename{"N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl"} %line{781} %argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:779
#                 for (int i = 0; i < 3; ++i)
	add		___398_i ___398_i $const3 	%line{779} %argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:787
#                 substrate_transmittance = 1.0 - clamp(Kr, 0.0, 1.0);
	assign		$tmp312 $const5 	%line{787} %argrw{"wr"}
	assign		$tmp313 $const11 	%argrw{"wr"}
	functioncall	$const21 516 	%argrw{"r"}
# N:\appleseed\appleseed\sandbox\shaders\stdosl.h:144
# color  clamp (color x, color minval, color maxval) { return max(min(x,maxval),minval); }
	min		$tmp314 ___397_Kr $tmp313 	%filename{"N:\appleseed\appleseed\sandbox\shaders\stdosl.h"} %line{144} %argrw{"wrr"}
	max		$tmp311 $tmp314 $tmp312 	%argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:787
#                 substrate_transmittance = 1.0 - clamp(Kr, 0.0, 1.0);
	sub		substrate_transmittance $const11 $tmp311 	%filename{"N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl"} %line{787} %argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:792
#     color transmittance = coating_transmittance * substrate_transmittance;
	mul		transmittance coating_transmittance substrate_transmittance 	%line{792} %argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:794
#     if (max(transmittance) <= EPS)
	functioncall	$const1 524 	%line{794} %argrw{"r"}
# N:\appleseed\appleseed\sandbox\shaders\as_osl_extensions.h:48
# float max(color C)  { return max(C[0], max(C[1], C[2])); }
	compref		$tmp316 transmittance $const2 	%filename{"N:\appleseed\appleseed\sandbox\shaders\as_osl_extensions.h"} %line{48} %argrw{"wrr"}
	compref		$tmp318 transmittance $const3 	%argrw{"wrr"}
	compref		$tmp319 transmittance $const4 	%argrw{"wrr"}
	max		$tmp317 $tmp318 $tmp319 	%argrw{"wrr"}
	max		$tmp315 $tmp316 $tmp317 	%argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:794
#     if (max(transmittance) <= EPS)
	le		$tmp320 $tmp315 $const25 	%filename{"N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl"} %line{794} %argrw{"wrr"}
	if		$tmp320 527 527 	%argrw{"r"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:796
#         return;
	exit	%line{796}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:799
#     if (raytype("light"))
	raytype		$tmp321 $const37 	%line{799} %argrw{"wr"}
	if		$tmp321 567 567 	%argrw{"r"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:801
#         color edf_color = (in_incandescence_type == 0)
	eq		$tmp322 in_incandescence_type $const2 	%line{801} %argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:802
#             ? in_incandescence_amount * in_incandescence_color
	if		$tmp322 532 535 	%line{802} %argrw{"r"}
	mul		___401_edf_color in_incandescence_amount in_incandescence_color 	%argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:803
#             : in_incandescence_amount * blackbody(in_temperature);
	assign		$tmp324 in_temperature 	%line{803} %argrw{"wr"}
	blackbody	$tmp323 $tmp324 	%argrw{"wr"}
	mul		___401_edf_color in_incandescence_amount $tmp323 	%argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:805
#         if (compute_edf && in_area_normalize_edf)
	neq		$tmp325 compute_edf $const2 	%line{805} %argrw{"wrr"}
	if		$tmp325 539 539 	%argrw{"r"}
	neq		$tmp326 in_area_normalize_edf $const2 	%argrw{"wrr"}
	assign		$tmp325 $tmp326 	%argrw{"wr"}
	if		$tmp325 542 542 	%argrw{"r"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:807
#             edf_color /= surfacearea();
	surfacearea	$tmp327 	%line{807} %argrw{"w"}
	div		___401_edf_color ___401_edf_color $tmp327 	%argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:809
#         if (compute_edf && in_tonemap_edf)
	neq		$tmp328 compute_edf $const2 	%line{809} %argrw{"wrr"}
	if		$tmp328 546 546 	%argrw{"r"}
	neq		$tmp329 in_tonemap_edf $const2 	%argrw{"wrr"}
	assign		$tmp328 $tmp329 	%argrw{"wr"}
	if		$tmp328 550 550 	%argrw{"r"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:811
#             edf_color /= luminance(edf_color) + 1.0;
	luminance	$tmp330 ___401_edf_color 	%line{811} %argrw{"wr"}
	add		$tmp331 $tmp330 $const11 	%argrw{"wrr"}
	div		___401_edf_color ___401_edf_color $tmp331 	%argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:813
#         if (compute_edf && max(edf_color) > 0.0)
	neq		$tmp332 compute_edf $const2 	%line{813} %argrw{"wrr"}
	if		$tmp332 561 561 	%argrw{"r"}
	functioncall	$const1 558 	%argrw{"r"}
# N:\appleseed\appleseed\sandbox\shaders\as_osl_extensions.h:48
# float max(color C)  { return max(C[0], max(C[1], C[2])); }
	compref		$tmp334 ___401_edf_color $const2 	%filename{"N:\appleseed\appleseed\sandbox\shaders\as_osl_extensions.h"} %line{48} %argrw{"wrr"}
	compref		$tmp336 ___401_edf_color $const3 	%argrw{"wrr"}
	compref		$tmp337 ___401_edf_color $const4 	%argrw{"wrr"}
	max		$tmp335 $tmp336 $tmp337 	%argrw{"wrr"}
	max		$tmp333 $tmp334 $tmp335 	%argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:813
#         if (compute_edf && max(edf_color) > 0.0)
	gt		$tmp338 $tmp333 $const5 	%filename{"N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl"} %line{813} %argrw{"wrr"}
	neq		$tmp339 $tmp338 $const2 	%argrw{"wrr"}
	assign		$tmp332 $tmp339 	%argrw{"wr"}
	if		$tmp332 567 567 	%argrw{"r"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:816
#                 edf_color * emission();
	closure		$tmp340 $const38 	%line{816} %argrw{"wr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:815
#             out_outColor += transmittance * opacity *
	mul		$tmp341 transmittance opacity 	%line{815} %argrw{"wrr"}
	mul		$tmp342 $tmp341 ___401_edf_color 	%argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:816
#                 edf_color * emission();
	mul		$tmp343 $tmp340 $tmp342 	%line{816} %argrw{"wrr"}
	add		out_outColor out_outColor $tmp343 	%argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:820
#     if (compute_bssrdf)
	if		compute_bssrdf 597 624 	%line{820} %argrw{"r"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:822
#         color albedo = in_diffuse_weight * in_color;
	mul		___405_albedo in_diffuse_weight in_color 	%line{822} %argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:824
#         if (max(albedo) > 0.0)
	functioncall	$const1 575 	%line{824} %argrw{"r"}
# N:\appleseed\appleseed\sandbox\shaders\as_osl_extensions.h:48
# float max(color C)  { return max(C[0], max(C[1], C[2])); }
	compref		$tmp345 ___405_albedo $const2 	%filename{"N:\appleseed\appleseed\sandbox\shaders\as_osl_extensions.h"} %line{48} %argrw{"wrr"}
	compref		$tmp347 ___405_albedo $const3 	%argrw{"wrr"}
	compref		$tmp348 ___405_albedo $const4 	%argrw{"wrr"}
	max		$tmp346 $tmp347 $tmp348 	%argrw{"wrr"}
	max		$tmp344 $tmp345 $tmp346 	%argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:824
#         if (max(albedo) > 0.0)
	gt		$tmp349 $tmp344 $const5 	%filename{"N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl"} %line{824} %argrw{"wrr"}
	if		$tmp349 597 597 	%argrw{"r"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:826
#             albedo = clamp(albedo, 0.01, 0.99);
	assign		$tmp350 $const39 	%line{826} %argrw{"wr"}
	assign		$tmp351 $const24 	%argrw{"wr"}
	functioncall	$const21 582 	%argrw{"r"}
# N:\appleseed\appleseed\sandbox\shaders\stdosl.h:144
# color  clamp (color x, color minval, color maxval) { return max(min(x,maxval),minval); }
	min		$tmp352 ___405_albedo $tmp351 	%filename{"N:\appleseed\appleseed\sandbox\shaders\stdosl.h"} %line{144} %argrw{"wrr"}
	max		___405_albedo $tmp352 $tmp350 	%argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:830
#             if (in_subsurface_profile == 0)
	eq		$tmp353 in_subsurface_profile $const2 	%filename{"N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl"} %line{830} %argrw{"wrr"}
	if		$tmp353 585 592 	%argrw{"r"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:832
#                 subsurface_profile = "gaussian";
	assign		___406_subsurface_profile $const40 	%line{832} %argrw{"wr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:834
#             else if (in_subsurface_profile == 1)
	eq		$tmp354 in_subsurface_profile $const3 	%line{834} %argrw{"wrr"}
	if		$tmp354 588 592 	%argrw{"r"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:836
#                 subsurface_profile = "better_dipole";
	assign		___406_subsurface_profile $const41 	%line{836} %argrw{"wr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:838
#             else if (in_subsurface_profile == 2)
	eq		$tmp355 in_subsurface_profile $const4 	%line{838} %argrw{"wrr"}
	if		$tmp355 591 592 	%argrw{"r"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:840
#                 subsurface_profile = "normalized_diffusion";
	assign		___406_subsurface_profile $const42 	%line{840} %argrw{"wr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:844
#                 subsurface_profile = "randomwalk";
	assign		___406_subsurface_profile $const43 	%line{844} %argrw{"wr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:854
#                     in_diffuse_weight * in_color,
	mul		$tmp357 in_diffuse_weight in_color 	%line{854} %argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:855
#                     in_sss_mfp_scale * in_sss_mfp,
	mul		$tmp358 in_sss_mfp_scale in_sss_mfp 	%line{855} %argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:851
#                 as_subsurface(
	closure		$tmp356 $const45 ___406_subsurface_profile Nn $tmp357 $tmp358 in_ior $const44 $const5 	%line{851} %argrw{"wrrrrrrrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:850
#             out_outColor += in_subsurface_weight *
	mul		$tmp359 $tmp356 in_subsurface_weight 	%line{850} %argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:857
#                     "fresnel_weight", 0.0);
	add		out_outColor out_outColor $tmp359 	%line{857} %argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:862
#         color diffuse_color = in_diffuse_weight * in_color;
	mul		___411_diffuse_color in_diffuse_weight in_color 	%line{862} %argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:864
#         if (max(diffuse_color) > 0.0)
	functioncall	$const1 604 	%line{864} %argrw{"r"}
# N:\appleseed\appleseed\sandbox\shaders\as_osl_extensions.h:48
# float max(color C)  { return max(C[0], max(C[1], C[2])); }
	compref		$tmp361 ___411_diffuse_color $const2 	%filename{"N:\appleseed\appleseed\sandbox\shaders\as_osl_extensions.h"} %line{48} %argrw{"wrr"}
	compref		$tmp363 ___411_diffuse_color $const3 	%argrw{"wrr"}
	compref		$tmp364 ___411_diffuse_color $const4 	%argrw{"wrr"}
	max		$tmp362 $tmp363 $tmp364 	%argrw{"wrr"}
	max		$tmp360 $tmp361 $tmp362 	%argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:864
#         if (max(diffuse_color) > 0.0)
	gt		$tmp365 $tmp360 $const5 	%filename{"N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl"} %line{864} %argrw{"wrr"}
	if		$tmp365 610 610 	%argrw{"r"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:867
#                 as_oren_nayar(diffuse_color, Nn, in_diffuse_roughness);
	closure		$tmp366 $const46 ___411_diffuse_color Nn in_diffuse_roughness 	%line{867} %argrw{"wrrrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:866
#             out_outColor += transmittance * opacity *
	mul		$tmp367 transmittance opacity 	%line{866} %argrw{"wrr"}
	mul		$tmp368 $tmp366 $tmp367 	%argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:867
#                 as_oren_nayar(diffuse_color, Nn, in_diffuse_roughness);
	add		out_outColor out_outColor $tmp368 	%line{867} %argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:870
#         color translucency_color = in_translucency_weight *
	mul		___411_translucency_color in_translucency_weight in_translucency_color 	%line{870} %argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:873
#         if (max(translucency_color) > 0.0)
	functioncall	$const1 617 	%line{873} %argrw{"r"}
# N:\appleseed\appleseed\sandbox\shaders\as_osl_extensions.h:48
# float max(color C)  { return max(C[0], max(C[1], C[2])); }
	compref		$tmp370 ___411_translucency_color $const2 	%filename{"N:\appleseed\appleseed\sandbox\shaders\as_osl_extensions.h"} %line{48} %argrw{"wrr"}
	compref		$tmp372 ___411_translucency_color $const3 	%argrw{"wrr"}
	compref		$tmp373 ___411_translucency_color $const4 	%argrw{"wrr"}
	max		$tmp371 $tmp372 $tmp373 	%argrw{"wrr"}
	max		$tmp369 $tmp370 $tmp371 	%argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:873
#         if (max(translucency_color) > 0.0)
	gt		$tmp374 $tmp369 $const5 	%filename{"N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl"} %line{873} %argrw{"wrr"}
	if		$tmp374 624 624 	%argrw{"r"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:876
#                 translucency_color * translucent(Nn);
	closure		$tmp375 $const47 Nn 	%line{876} %argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:875
#             out_outColor += transmittance * opacity *
	mul		$tmp376 transmittance opacity 	%line{875} %argrw{"wrr"}
	mul		$tmp377 $tmp376 ___411_translucency_color 	%argrw{"wrr"}
# N:/appleseed/appleseed/src/appleseed.shaders/src/appleseed/as_standard_surface.osl:876
#                 translucency_color * translucent(Nn);
	mul		$tmp378 $tmp375 $tmp377 	%line{876} %argrw{"wrr"}
	add		out_outColor out_outColor $tmp378 	%argrw{"wrr"}
	end
