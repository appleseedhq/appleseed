OpenShadingLanguage 1.00
# Compiled by oslc 1.6.9
shader as_normal_map
param	color	Color	0 0 0		%read{7,7} %write{0,0} %initexpr
param	vector	Normal	0 0 0		%read{16,32} %write{1,1} %initexpr
param	vector	Tn	0 0 0		%meta{string,help,"Tangent"} %meta{string,label,"Tangent"} %meta{int,lockgeom,0}  %read{16,23} %write{2147483647,-1}
param	string	UpVector	"Blue"		%meta{string,help,"Color channel to use as up direction"} %meta{string,widget,"popup"} %meta{string,options,"Green|Blue"}  %read{10,10} %write{2147483647,-1}
param	string	Space	"Tangent"		%meta{string,widget,"popup"} %meta{string,options,"Tangent|Object|World"}  %read{17,20} %write{2147483647,-1}
param	float	Amount	1		%meta{float,min,0} %meta{float,max,1}  %read{30,32} %write{2147483647,-1}
oparam	vector	NormalOut	0 0 0		%read{35,35} %write{33,34}
oparam	vector	TangentOut	0 0 0		%read{2147483647,-1} %write{36,36}
global	normal	N	%read{1,1} %write{2147483647,-1}
local	normal	n	%read{12,34} %write{9,29}
local	float	___301_tmp	%read{15,15} %write{12,12}
local	vector	bn	%read{25,35} %write{16,16}
const	color	$const1	0 0 0		%read{0,0} %write{2147483647,-1}
const	float	$const3	-1		%read{2,2} %write{2147483647,-1}
temp	normal	$tmp1	%read{9,9} %write{2,2}
const	int	$const4	1		%read{13,24} %write{2147483647,-1}
const	float	$const5	1		%read{3,30} %write{2147483647,-1}
temp	normal	$tmp2	%read{9,9} %write{3,3}
temp	color	$tmp3	%read{9,9} %write{8,8}
const	int	$const6	0		%read{22,22} %write{2147483647,-1}
const	float	$const7	0		%read{4,4} %write{2147483647,-1}
temp	color	$tmp4	%read{8,8} %write{4,4}
temp	color	$tmp5	%read{7,7} %write{5,5}
const	string	$const8	"clamp"		%read{6,6} %write{2147483647,-1}
temp	color	$tmp6	%read{8,8} %write{7,7}
const	string	$const9	"Green"		%read{10,10} %write{2147483647,-1}
temp	int	$tmp7	%read{11,11} %write{10,10}
const	int	$const10	2		%read{12,27} %write{2147483647,-1}
temp	float	$tmp8	%read{14,14} %write{13,13}
const	string	$const11	"Object"		%read{17,17} %write{2147483647,-1}
temp	int	$tmp9	%read{18,18} %write{17,17}
const	string	$const12	"object"		%read{19,19} %write{2147483647,-1}
const	string	$const13	"world"		%read{19,19} %write{2147483647,-1}
const	string	$const14	"Tangent"		%read{20,20} %write{2147483647,-1}
temp	int	$tmp10	%read{21,21} %write{20,20}
temp	float	$tmp11	%read{23,23} %write{22,22}
temp	vector	$tmp12	%read{26,26} %write{23,23}
temp	float	$tmp13	%read{25,25} %write{24,24}
temp	vector	$tmp14	%read{26,26} %write{25,25}
temp	vector	$tmp15	%read{29,29} %write{26,26}
temp	float	$tmp16	%read{28,28} %write{27,27}
temp	vector	$tmp17	%read{29,29} %write{28,28}
temp	int	$tmp18	%read{31,31} %write{30,30}
temp	color	$tmp19	%read{33,33} %write{32,32}
temp	vector	$tmp20	%read{36,36} %write{35,35}
code Color
# ./normal/as_normal_map.osl:32
#     color         Color = color(0),
	assign		Color $const1 	%filename{"./normal/as_normal_map.osl"} %line{32} %argrw{"wr"}
code Normal
# ./normal/as_normal_map.osl:33
#     vector        Normal = N,
	assign		Normal N 	%filename{"./normal/as_normal_map.osl"} %line{33} %argrw{"wr"}
code ___main___
# ./normal/as_normal_map.osl:60
#     normal n = (normal) mix(-1, 1, clamp(Color, 0, 1));
	assign		$tmp1 $const3 	%filename{"./normal/as_normal_map.osl"} %line{60} %argrw{"wr"}
	assign		$tmp2 $const5 	%argrw{"wr"}
	assign		$tmp4 $const7 	%argrw{"wr"}
	assign		$tmp5 $const5 	%argrw{"wr"}
	functioncall	$const8 9 	%argrw{"r"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:156
# float  degrees (float x)  { return x*(180.0/M_PI); }
	min		$tmp6 Color $tmp5 	%filename{"/home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h"} %line{156} %argrw{"wrr"}
	max		$tmp3 $tmp6 $tmp4 	%argrw{"wrr"}
# ./normal/as_normal_map.osl:60
#     normal n = (normal) mix(-1, 1, clamp(Color, 0, 1));
	mix		n $tmp1 $tmp2 $tmp3 	%filename{"./normal/as_normal_map.osl"} %line{60} %argrw{"wrrr"}
# ./normal/as_normal_map.osl:62
#     if (UpVector == "Green")
	eq		$tmp7 UpVector $const9 	%line{62} %argrw{"wrr"}
	if		$tmp7 16 16 	%argrw{"r"}
# ./normal/as_normal_map.osl:64
#         float tmp = n[2];
	compref		___301_tmp n $const10 	%line{64} %argrw{"wrr"}
# ./normal/as_normal_map.osl:65
#         n[2] = n[1];
	compref		$tmp8 n $const4 	%line{65} %argrw{"wrr"}
	compassign	n $const10 $tmp8 	%argrw{"wrr"}
# ./normal/as_normal_map.osl:66
#         n[1] = tmp;
	compassign	n $const4 ___301_tmp 	%line{66} %argrw{"wrr"}
# ./normal/as_normal_map.osl:69
#     vector bn = cross(Tn, Normal);
	cross		bn Tn Normal 	%line{69} %argrw{"wrr"}
# ./normal/as_normal_map.osl:71
#     if (Space == "Object")
	eq		$tmp9 Space $const11 	%line{71} %argrw{"wrr"}
	if		$tmp9 20 30 	%argrw{"r"}
# ./normal/as_normal_map.osl:73
#         n = transform("object", "world", n);
	transformn	n $const12 $const13 n 	%line{73} %argrw{"wrrr"}
# ./normal/as_normal_map.osl:75
#     else if (Space == "Tangent")
	eq		$tmp10 Space $const14 	%line{75} %argrw{"wrr"}
	if		$tmp10 30 30 	%argrw{"r"}
# ./normal/as_normal_map.osl:77
#         n = n[0] * Tn + n[1] * bn + n[2] * Normal;
	compref		$tmp11 n $const6 	%line{77} %argrw{"wrr"}
	mul		$tmp12 $tmp11 Tn 	%argrw{"wrr"}
	compref		$tmp13 n $const4 	%argrw{"wrr"}
	mul		$tmp14 $tmp13 bn 	%argrw{"wrr"}
	add		$tmp15 $tmp12 $tmp14 	%argrw{"wrr"}
	compref		$tmp16 n $const10 	%argrw{"wrr"}
	mul		$tmp17 $tmp16 Normal 	%argrw{"wrr"}
	add		n $tmp15 $tmp17 	%argrw{"wrr"}
# ./normal/as_normal_map.osl:80
#     if (Amount != 1.0)
	neq		$tmp18 Amount $const5 	%line{80} %argrw{"wrr"}
	if		$tmp18 34 35 	%argrw{"r"}
# ./normal/as_normal_map.osl:81
#         NormalOut = normalize(mix(Normal, n, Amount));
	mix		$tmp19 Normal n Amount 	%line{81} %argrw{"wrrr"}
	normalize	NormalOut $tmp19 	%argrw{"wr"}
# ./normal/as_normal_map.osl:83
#         NormalOut = normalize(n);
	normalize	NormalOut n 	%line{83} %argrw{"wr"}
# ./normal/as_normal_map.osl:85
#     TangentOut = normalize(cross(NormalOut, bn));
	cross		$tmp20 NormalOut bn 	%line{85} %argrw{"wrr"}
	normalize	TangentOut $tmp20 	%argrw{"wr"}
	end
