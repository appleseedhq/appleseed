OpenShadingLanguage 1.00
# Compiled by oslc 1.6.9
shader as_glossy_surface	%meta{string,help,"Glossy surface shader"} 
param	vector	Normal	0 0 0		%read{12,12} %write{0,0} %initexpr
param	vector	Tn	0 0 0		%meta{int,lockgeom,0} %meta{string,help,"Tangent"} %meta{string,label,"Tangent"}  %read{12,12} %write{2147483647,-1}
param	float	Reflectance	0.80000001		%meta{float,min,0} %meta{float,max,1}  %read{13,13} %write{2147483647,-1}
param	color	Color	1 1 1		%meta{string,help,"Color"}  %read{13,13} %write{2147483647,-1}
param	float	Ior	1.5		%meta{string,help,"Index of refraction"} %meta{int,divider,1}  %read{12,12} %write{2147483647,-1}
param	string	Distribution	"ggx"		%meta{string,help,"Microfacet distribution to use"} %meta{string,widget,"popup"} %meta{string,options,"beckmann|ggx"}  %read{12,12} %write{2147483647,-1}
param	float	Roughness	0.1		%meta{string,help,"Surface roughness"} %meta{float,min,0.001} %meta{float,max,1}  %read{7,11} %write{2147483647,-1}
param	float	RoughnessDepthScale	1		%meta{float,min,1}  %read{2,7} %write{2147483647,-1}
param	float	Anisotropic	0		%meta{string,help,"Anisotropy"} %meta{float,min,-1} %meta{float,max,1}  %read{12,12} %write{2147483647,-1}
oparam	closure color	BRDF			%read{2147483647,-1} %write{14,14}
global	normal	N	%read{0,0} %write{2147483647,-1}
local	int	___302_RayDepth	%read{5,8} %write{4,4}
temp	closure color	$tmp1	%read{14,14} %write{12,12}
temp	float	$tmp2	%read{12,12} %write{9,11}
const	string	$const1	"microfacet_roughness"		%read{1,1} %write{2147483647,-1}
const	float	$const2	1		%read{2,2} %write{2147483647,-1}
temp	int	$tmp3	%read{3,3} %write{2,2}
temp	int	$tmp4	%read{2147483647,-1} %write{4,4}
const	string	$const3	"path:ray_depth"		%read{4,4} %write{2147483647,-1}
const	int	$const4	0		%read{5,5} %write{2147483647,-1}
temp	int	$tmp5	%read{6,6} %write{5,5}
temp	float	$tmp6	%read{9,9} %write{7,7}
temp	float	$tmp7	%read{9,9} %write{8,8}
const	string	$const5	"as_glossy"		%read{12,12} %write{2147483647,-1}
temp	color	$tmp8	%read{14,14} %write{13,13}
code Normal
# ./surface/as_glossy_surface.osl:36
#     vector               Normal = N,
	assign		Normal N 	%filename{"./surface/as_glossy_surface.osl"} %line{36} %argrw{"wr"}
code ___main___
# ./surface/as_glossy_surface.osl:86
#         microfacet_roughness(Roughness, RoughnessDepthScale),
	functioncall	$const1 12 	%filename{"./surface/as_glossy_surface.osl"} %line{86} %argrw{"r"}
# include/appleseed/microfacet.h:34
#     if (DepthScale > 1.0)
	gt		$tmp3 RoughnessDepthScale $const2 	%filename{"include/appleseed/microfacet.h"} %line{34} %argrw{"wrr"}
	if		$tmp3 11 11 	%argrw{"r"}
# include/appleseed/microfacet.h:37
#         getattribute("path:ray_depth", RayDepth);
	getattribute	$tmp4 $const3 ___302_RayDepth 	%line{37} %argrw{"wrw"}
# include/appleseed/microfacet.h:39
#         if (RayDepth != 0)
	neq		$tmp5 ___302_RayDepth $const4 	%line{39} %argrw{"wrr"}
	if		$tmp5 11 11 	%argrw{"r"}
# include/appleseed/microfacet.h:40
#             return Roughness * DepthScale * RayDepth;
	mul		$tmp6 Roughness RoughnessDepthScale 	%line{40} %argrw{"wrr"}
	assign		$tmp7 ___302_RayDepth 	%argrw{"wr"}
	mul		$tmp2 $tmp6 $tmp7 	%argrw{"wrr"}
	return
# include/appleseed/microfacet.h:43
#     return Roughness;
	assign		$tmp2 Roughness 	%line{43} %argrw{"wr"}
# ./surface/as_glossy_surface.osl:88
#         float  min = 0,
	closure		$tmp1 $const5 Distribution Normal Tn $tmp2 Anisotropic Ior 	%filename{"./surface/as_glossy_surface.osl"} %line{88} %argrw{"wrrrrrrr"}
# ./surface/as_glossy_surface.osl:82
#     BRDF = Color * Reflectance * as_glossy(
	mul		$tmp8 Color Reflectance 	%line{82} %argrw{"wrr"}
# ./surface/as_glossy_surface.osl:88
#         Ior);
	mul		BRDF $tmp1 $tmp8 	%line{88} %argrw{"wrr"}
	end
