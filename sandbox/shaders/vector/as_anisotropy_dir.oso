OpenShadingLanguage 1.00
# Compiled by oslc 1.6.9
shader as_anisotropy_dir
param	vector	Normal	0 0 0		%read{28,28} %write{0,0} %initexpr
param	vector	Tn	0 0 0		%meta{int,lockgeom,0} %meta{string,help,"Tangent"} %meta{string,label,"Tangent"}  %read{28,29} %write{2147483647,-1}
param	color	Color	1 0 0		%read{1,6} %write{2147483647,-1}
param	float	AngleOffset	0		%read{12,16} %write{2147483647,-1}
oparam	vector	TangentOut	0 0 0		%read{2147483647,-1} %write{32,32}
global	normal	N	%read{0,0} %write{2147483647,-1}
local	float	___302_angle_in_rad	%read{17,17} %write{16,16}
local	float	___302_c	%read{18,22} %write{17,17}
local	float	___302_s	%read{19,21} %write{17,17}
local	float	___302_xx	%read{24,24} %write{20,20}
local	float	___302_yy	%read{25,25} %write{23,23}
local	float	x	%read{18,29} %write{5,26}
local	float	z	%read{19,30} %write{10,27}
local	vector	Bn	%read{30,30} %write{28,28}
const	float	$const2	-1		%read{5,10} %write{2147483647,-1}
const	float	$const4	1		%read{3,10} %write{2147483647,-1}
temp	float	$tmp1	%read{5,5} %write{4,4}
const	int	$const5	0		%read{1,12} %write{2147483647,-1}
temp	float	$tmp2	%read{3,3} %write{1,1}
const	float	$const6	0		%read{4,9} %write{2147483647,-1}
const	string	$const7	"clamp"		%read{2,7} %write{2147483647,-1}
temp	float	$tmp3	%read{4,4} %write{3,3}
temp	float	$tmp4	%read{10,10} %write{9,9}
const	int	$const8	2		%read{6,6} %write{2147483647,-1}
temp	float	$tmp5	%read{8,8} %write{6,6}
temp	float	$tmp6	%read{9,9} %write{8,8}
const	string	$const9	"rotate2d"		%read{11,11} %write{2147483647,-1}
temp	int	$tmp7	%read{13,13} %write{12,12}
const	string	$const10	"radians"		%read{14,14} %write{2147483647,-1}
const	float	$const11	3.1415927		%read{15,15} %write{2147483647,-1}
const	float	$const12	180		%read{15,15} %write{2147483647,-1}
temp	float	$tmp8	%read{16,16} %write{15,15}
temp	float	$tmp9	%read{20,20} %write{18,18}
temp	float	$tmp10	%read{20,20} %write{19,19}
temp	float	$tmp11	%read{23,23} %write{21,21}
temp	float	$tmp12	%read{23,23} %write{22,22}
temp	vector	$tmp13	%read{31,31} %write{29,29}
temp	vector	$tmp14	%read{31,31} %write{30,30}
temp	vector	$tmp15	%read{32,32} %write{31,31}
code Normal
# ./vector/as_anisotropy_dir.osl:33
#     vector        Normal = N,
	assign		Normal N 	%filename{"./vector/as_anisotropy_dir.osl"} %line{33} %argrw{"wr"}
code ___main___
# ./vector/as_anisotropy_dir.osl:45
#     float x = mix(-1, 1, clamp(Color[0], 0, 1));
	compref		$tmp2 Color $const5 	%filename{"./vector/as_anisotropy_dir.osl"} %line{45} %argrw{"wrr"}
	functioncall	$const7 5 	%argrw{"r"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:157
# PERCOMP2F (pow)
	min		$tmp3 $tmp2 $const4 	%filename{"/home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h"} %line{157} %argrw{"wrr"}
	max		$tmp1 $tmp3 $const6 	%argrw{"wrr"}
# ./vector/as_anisotropy_dir.osl:45
#     float x = mix(-1, 1, clamp(Color[0], 0, 1));
	mix		x $const2 $const4 $tmp1 	%filename{"./vector/as_anisotropy_dir.osl"} %line{45} %argrw{"wrrr"}
# ./vector/as_anisotropy_dir.osl:46
#     float z = mix(-1, 1, clamp(Color[2], 0, 1));
	compref		$tmp5 Color $const8 	%line{46} %argrw{"wrr"}
	functioncall	$const7 10 	%argrw{"r"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:157
# PERCOMP1 (tanh)
	min		$tmp6 $tmp5 $const4 	%filename{"/home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h"} %line{157} %argrw{"wrr"}
	max		$tmp4 $tmp6 $const6 	%argrw{"wrr"}
# ./vector/as_anisotropy_dir.osl:46
#     float z = mix(-1, 1, clamp(Color[2], 0, 1));
	mix		z $const2 $const4 $tmp4 	%filename{"./vector/as_anisotropy_dir.osl"} %line{46} %argrw{"wrrr"}
# ./vector/as_anisotropy_dir.osl:47
#     rotate2d(x, z, AngleOffset, x, z);
	functioncall	$const9 28 	%line{47} %argrw{"r"}
# include/appleseed/transform.h:39
#     if (angle_in_degrees != 0)
	neq		$tmp7 AngleOffset $const5 	%filename{"include/appleseed/transform.h"} %line{39} %argrw{"wrr"}
	if		$tmp7 26 28 	%argrw{"r"}
# include/appleseed/transform.h:41
#         float angle_in_rad = radians(angle_in_degrees);
	functioncall	$const10 17 	%line{41} %argrw{"r"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:101
# #define M_SQRT1_2  0.7071067811865475        /* 1/sqrt(2) */
	div		$tmp8 $const11 $const12 	%filename{"/home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h"} %line{101} %argrw{"wrr"}
	mul		___302_angle_in_rad AngleOffset $tmp8 	%argrw{"wrr"}
# include/appleseed/transform.h:43
#         sincos(angle_in_rad, s, c);
	sincos		___302_angle_in_rad ___302_s ___302_c 	%filename{"include/appleseed/transform.h"} %line{43} %argrw{"rww"}
# include/appleseed/transform.h:44
#         float xx = x * c - s * y;
	mul		$tmp9 x ___302_c 	%line{44} %argrw{"wrr"}
	mul		$tmp10 ___302_s z 	%argrw{"wrr"}
	sub		___302_xx $tmp9 $tmp10 	%argrw{"wrr"}
# include/appleseed/transform.h:45
#         float yy = x * s + c * y;
	mul		$tmp11 x ___302_s 	%line{45} %argrw{"wrr"}
	mul		$tmp12 ___302_c z 	%argrw{"wrr"}
	add		___302_yy $tmp11 $tmp12 	%argrw{"wrr"}
# include/appleseed/transform.h:46
#         rx = xx;
	assign		x ___302_xx 	%line{46} %argrw{"wr"}
# include/appleseed/transform.h:47
#         ry = yy;
	assign		z ___302_yy 	%line{47} %argrw{"wr"}
# include/appleseed/transform.h:51
#         rx = x;
	assign		x x 	%line{51} %argrw{"wr"}
# include/appleseed/transform.h:52
#         ry = y;
	assign		z z 	%line{52} %argrw{"wr"}
# ./vector/as_anisotropy_dir.osl:48
#     vector Bn = cross(Tn, Normal);
	cross		Bn Tn Normal 	%filename{"./vector/as_anisotropy_dir.osl"} %line{48} %argrw{"wrr"}
# ./vector/as_anisotropy_dir.osl:49
#     TangentOut = normalize(x * Tn + z * Bn);
	mul		$tmp13 x Tn 	%line{49} %argrw{"wrr"}
	mul		$tmp14 z Bn 	%argrw{"wrr"}
	add		$tmp15 $tmp13 $tmp14 	%argrw{"wrr"}
	normalize	TangentOut $tmp15 	%argrw{"wr"}
	end
